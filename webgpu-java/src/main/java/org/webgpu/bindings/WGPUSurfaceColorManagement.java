// Generated by jextract
package org.webgpu.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang = c :
 * struct WGPUSurfaceColorManagement {
 *     WGPUChainedStruct chain;
 *     WGPUPredefinedColorSpace colorSpace;
 *     WGPUToneMappingMode toneMappingMode;
 * }
 * }
 */
public class WGPUSurfaceColorManagement {

    WGPUSurfaceColorManagement() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            WGPUChainedStruct.layout().withName("chain"),
            webgpu_h.C_INT.withName("colorSpace"),
            webgpu_h.C_INT.withName("toneMappingMode")).withName("WGPUSurfaceColorManagement");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout chain$LAYOUT = (GroupLayout) $LAYOUT.select(groupElement("chain"));

    /**
     * Layout for field:
     * {@snippet lang = c : * WGPUChainedStruct chain
     * }
     */
    public static final GroupLayout chain$layout() {
        return chain$LAYOUT;
    }

    private static final long chain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang = c : * WGPUChainedStruct chain
     * }
     */
    public static final long chain$offset() {
        return chain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c : * WGPUChainedStruct chain
     * }
     */
    public static MemorySegment chain(MemorySegment struct) {
        return struct.asSlice(chain$OFFSET, chain$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang = c : * WGPUChainedStruct chain
     * }
     */
    public static void chain(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, chain$OFFSET, chain$LAYOUT.byteSize());
    }

    private static final OfInt colorSpace$LAYOUT = (OfInt) $LAYOUT.select(groupElement("colorSpace"));

    /**
     * Layout for field:
     * {@snippet lang = c : * WGPUPredefinedColorSpace colorSpace
     * }
     */
    public static final OfInt colorSpace$layout() {
        return colorSpace$LAYOUT;
    }

    private static final long colorSpace$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang = c : * WGPUPredefinedColorSpace colorSpace
     * }
     */
    public static final long colorSpace$offset() {
        return colorSpace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c : * WGPUPredefinedColorSpace colorSpace
     * }
     */
    public static int colorSpace(MemorySegment struct) {
        return struct.get(colorSpace$LAYOUT, colorSpace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c : * WGPUPredefinedColorSpace colorSpace
     * }
     */
    public static void colorSpace(MemorySegment struct, int fieldValue) {
        struct.set(colorSpace$LAYOUT, colorSpace$OFFSET, fieldValue);
    }

    private static final OfInt toneMappingMode$LAYOUT = (OfInt) $LAYOUT.select(groupElement("toneMappingMode"));

    /**
     * Layout for field:
     * {@snippet lang = c : * WGPUToneMappingMode toneMappingMode
     * }
     */
    public static final OfInt toneMappingMode$layout() {
        return toneMappingMode$LAYOUT;
    }

    private static final long toneMappingMode$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang = c : * WGPUToneMappingMode toneMappingMode
     * }
     */
    public static final long toneMappingMode$offset() {
        return toneMappingMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c : * WGPUToneMappingMode toneMappingMode
     * }
     */
    public static int toneMappingMode(MemorySegment struct) {
        return struct.get(toneMappingMode$LAYOUT, toneMappingMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c : * WGPUToneMappingMode toneMappingMode
     * }
     */
    public static void toneMappingMode(MemorySegment struct, int fieldValue) {
        struct.set(toneMappingMode$LAYOUT, toneMappingMode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at
     * {@code index}.
     * The returned segment has address
     * {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() {
        return layout().byteSize();
    }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using
     * {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and
     * {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and
     * {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
            Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
