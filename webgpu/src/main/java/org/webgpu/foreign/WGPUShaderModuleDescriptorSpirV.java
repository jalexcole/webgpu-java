// Generated by jextract

package org.webgpu.foreign;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WGPUShaderModuleDescriptorSpirV {
 *     WGPUStringView label;
 *     uint32_t sourceSize;
 *     const uint32_t *source;
 * }
 * }
 */
public class WGPUShaderModuleDescriptorSpirV {

    WGPUShaderModuleDescriptorSpirV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        WGPUStringView.layout().withName("label"),
        webgpu_h.C_INT.withName("sourceSize"),
        MemoryLayout.paddingLayout(4),
        webgpu_h.C_POINTER.withName("source")
    ).withName("WGPUShaderModuleDescriptorSpirV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout label$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStringView label
     * }
     */
    public static final GroupLayout label$layout() {
        return label$LAYOUT;
    }

    private static final long label$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStringView label
     * }
     */
    public static final long label$offset() {
        return label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStringView label
     * }
     */
    public static MemorySegment label(MemorySegment struct) {
        return struct.asSlice(label$OFFSET, label$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStringView label
     * }
     */
    public static void label(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, label$OFFSET, label$LAYOUT.byteSize());
    }

    private static final OfInt sourceSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sourceSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t sourceSize
     * }
     */
    public static final OfInt sourceSize$layout() {
        return sourceSize$LAYOUT;
    }

    private static final long sourceSize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t sourceSize
     * }
     */
    public static final long sourceSize$offset() {
        return sourceSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t sourceSize
     * }
     */
    public static int sourceSize(MemorySegment struct) {
        return struct.get(sourceSize$LAYOUT, sourceSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t sourceSize
     * }
     */
    public static void sourceSize(MemorySegment struct, int fieldValue) {
        struct.set(sourceSize$LAYOUT, sourceSize$OFFSET, fieldValue);
    }

    private static final AddressLayout source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint32_t *source
     * }
     */
    public static final AddressLayout source$layout() {
        return source$LAYOUT;
    }

    private static final long source$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint32_t *source
     * }
     */
    public static final long source$offset() {
        return source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint32_t *source
     * }
     */
    public static MemorySegment source(MemorySegment struct) {
        return struct.get(source$LAYOUT, source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint32_t *source
     * }
     */
    public static void source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(source$LAYOUT, source$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

