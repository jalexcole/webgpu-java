// Generated by jextract

package org.webgpu.foriegn;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class webgpu_h_1 {

    webgpu_h_1() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("wgpu_native"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 0
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)36L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 36
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int _MATH_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _MATH_H 1
     * }
     */
    public static int _MATH_H() {
        return _MATH_H;
    }
    private static final int _BITS_LIBM_SIMD_DECL_STUBS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_LIBM_SIMD_DECL_STUBS_H 1
     * }
     */
    public static int _BITS_LIBM_SIMD_DECL_STUBS_H() {
        return _BITS_LIBM_SIMD_DECL_STUBS_H;
    }
    private static final int __HAVE_FLOAT128 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128 1
     * }
     */
    public static int __HAVE_FLOAT128() {
        return __HAVE_FLOAT128;
    }
    private static final int __HAVE_DISTINCT_FLOAT128 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return __HAVE_DISTINCT_FLOAT128;
    }
    private static final int __HAVE_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return __HAVE_FLOAT16;
    }
    private static final int __HAVE_FLOAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return __HAVE_FLOAT32;
    }
    private static final int __HAVE_FLOAT64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return __HAVE_FLOAT64;
    }
    private static final int __HAVE_FLOAT32X = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return __HAVE_FLOAT32X;
    }
    private static final int __HAVE_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return __HAVE_FLOAT128X;
    }
    private static final int __HAVE_DISTINCT_FLOAT32 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return __HAVE_DISTINCT_FLOAT32;
    }
    private static final int __HAVE_DISTINCT_FLOAT64 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return __HAVE_DISTINCT_FLOAT64;
    }
    private static final int __HAVE_DISTINCT_FLOAT32X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return __HAVE_DISTINCT_FLOAT32X;
    }
    private static final int __HAVE_DISTINCT_FLOAT64X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return __HAVE_DISTINCT_FLOAT64X;
    }
    private static final int __HAVE_FLOATN_NOT_TYPEDEF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return __HAVE_FLOATN_NOT_TYPEDEF;
    }
    private static final int __FP_LOGB0_IS_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __FP_LOGB0_IS_MIN 0
     * }
     */
    public static int __FP_LOGB0_IS_MIN() {
        return __FP_LOGB0_IS_MIN;
    }
    private static final int __FP_LOGBNAN_IS_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __FP_LOGBNAN_IS_MIN 0
     * }
     */
    public static int __FP_LOGBNAN_IS_MIN() {
        return __FP_LOGBNAN_IS_MIN;
    }
    private static final int FP_ILOGBNAN = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define FP_ILOGBNAN 2147483647
     * }
     */
    public static int FP_ILOGBNAN() {
        return FP_ILOGBNAN;
    }
    private static final int FP_FAST_FMA = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FP_FAST_FMA 1
     * }
     */
    public static int FP_FAST_FMA() {
        return FP_FAST_FMA;
    }
    private static final int FP_FAST_FMAF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FP_FAST_FMAF 1
     * }
     */
    public static int FP_FAST_FMAF() {
        return FP_FAST_FMAF;
    }
    private static final int __MATH_DECLARING_DOUBLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __MATH_DECLARING_DOUBLE 1
     * }
     */
    public static int __MATH_DECLARING_DOUBLE() {
        return __MATH_DECLARING_DOUBLE;
    }
    private static final int __MATH_DECLARING_FLOATN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __MATH_DECLARING_FLOATN 0
     * }
     */
    public static int __MATH_DECLARING_FLOATN() {
        return __MATH_DECLARING_FLOATN;
    }
    private static final int __MATH_DECLARE_LDOUBLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __MATH_DECLARE_LDOUBLE 1
     * }
     */
    public static int __MATH_DECLARE_LDOUBLE() {
        return __MATH_DECLARE_LDOUBLE;
    }
    private static final int FP_NAN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FP_NAN 0
     * }
     */
    public static int FP_NAN() {
        return FP_NAN;
    }
    private static final int FP_INFINITE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FP_INFINITE 1
     * }
     */
    public static int FP_INFINITE() {
        return FP_INFINITE;
    }
    private static final int FP_ZERO = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FP_ZERO 2
     * }
     */
    public static int FP_ZERO() {
        return FP_ZERO;
    }
    private static final int FP_SUBNORMAL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define FP_SUBNORMAL 3
     * }
     */
    public static int FP_SUBNORMAL() {
        return FP_SUBNORMAL;
    }
    private static final int FP_NORMAL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FP_NORMAL 4
     * }
     */
    public static int FP_NORMAL() {
        return FP_NORMAL;
    }
    private static final int MATH_ERRNO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MATH_ERRNO 1
     * }
     */
    public static int MATH_ERRNO() {
        return MATH_ERRNO;
    }
    private static final int MATH_ERREXCEPT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MATH_ERREXCEPT 2
     * }
     */
    public static int MATH_ERREXCEPT() {
        return MATH_ERREXCEPT;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = webgpu_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __nlink_t
     * }
     */
    public static final OfInt __nlink_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __blksize_t
     * }
     */
    public static final OfInt __blksize_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int wchar_t
     * }
     */
    public static final OfInt wchar_t = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef float _Float32
     * }
     */
    public static final OfFloat _Float32 = webgpu_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double _Float64
     * }
     */
    public static final OfDouble _Float64 = webgpu_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double _Float32x
     * }
     */
    public static final OfDouble _Float32x = webgpu_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef float float_t
     * }
     */
    public static final OfFloat float_t = webgpu_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double double_t
     * }
     */
    public static final OfDouble double_t = webgpu_h.C_DOUBLE;

    private static class __fpclassify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fpclassify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __fpclassify(double __value)
     * }
     */
    public static FunctionDescriptor __fpclassify$descriptor() {
        return __fpclassify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __fpclassify(double __value)
     * }
     */
    public static MethodHandle __fpclassify$handle() {
        return __fpclassify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __fpclassify(double __value)
     * }
     */
    public static MemorySegment __fpclassify$address() {
        return __fpclassify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __fpclassify(double __value)
     * }
     */
    public static int __fpclassify(double __value) {
        var mh$ = __fpclassify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fpclassify", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __signbit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__signbit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __signbit(double __value)
     * }
     */
    public static FunctionDescriptor __signbit$descriptor() {
        return __signbit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __signbit(double __value)
     * }
     */
    public static MethodHandle __signbit$handle() {
        return __signbit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __signbit(double __value)
     * }
     */
    public static MemorySegment __signbit$address() {
        return __signbit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __signbit(double __value)
     * }
     */
    public static int __signbit(double __value) {
        var mh$ = __signbit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__signbit", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __isinf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__isinf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __isinf(double __value)
     * }
     */
    public static FunctionDescriptor __isinf$descriptor() {
        return __isinf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __isinf(double __value)
     * }
     */
    public static MethodHandle __isinf$handle() {
        return __isinf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __isinf(double __value)
     * }
     */
    public static MemorySegment __isinf$address() {
        return __isinf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __isinf(double __value)
     * }
     */
    public static int __isinf(double __value) {
        var mh$ = __isinf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__isinf", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __finite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__finite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __finite(double __value)
     * }
     */
    public static FunctionDescriptor __finite$descriptor() {
        return __finite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __finite(double __value)
     * }
     */
    public static MethodHandle __finite$handle() {
        return __finite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __finite(double __value)
     * }
     */
    public static MemorySegment __finite$address() {
        return __finite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __finite(double __value)
     * }
     */
    public static int __finite(double __value) {
        var mh$ = __finite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__finite", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __isnan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__isnan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __isnan(double __value)
     * }
     */
    public static FunctionDescriptor __isnan$descriptor() {
        return __isnan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __isnan(double __value)
     * }
     */
    public static MethodHandle __isnan$handle() {
        return __isnan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __isnan(double __value)
     * }
     */
    public static MemorySegment __isnan$address() {
        return __isnan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __isnan(double __value)
     * }
     */
    public static int __isnan(double __value) {
        var mh$ = __isnan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__isnan", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __iseqsig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__iseqsig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __iseqsig(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __iseqsig$descriptor() {
        return __iseqsig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __iseqsig(double __x, double __y)
     * }
     */
    public static MethodHandle __iseqsig$handle() {
        return __iseqsig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __iseqsig(double __x, double __y)
     * }
     */
    public static MemorySegment __iseqsig$address() {
        return __iseqsig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __iseqsig(double __x, double __y)
     * }
     */
    public static int __iseqsig(double __x, double __y) {
        var mh$ = __iseqsig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__iseqsig", __x, __y);
            }
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __issignaling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__issignaling");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __issignaling(double __value)
     * }
     */
    public static FunctionDescriptor __issignaling$descriptor() {
        return __issignaling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __issignaling(double __value)
     * }
     */
    public static MethodHandle __issignaling$handle() {
        return __issignaling.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __issignaling(double __value)
     * }
     */
    public static MemorySegment __issignaling$address() {
        return __issignaling.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __issignaling(double __value)
     * }
     */
    public static int __issignaling(double __value) {
        var mh$ = __issignaling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__issignaling", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class acos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("acos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double acos(double __x)
     * }
     */
    public static FunctionDescriptor acos$descriptor() {
        return acos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double acos(double __x)
     * }
     */
    public static MethodHandle acos$handle() {
        return acos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double acos(double __x)
     * }
     */
    public static MemorySegment acos$address() {
        return acos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double acos(double __x)
     * }
     */
    public static double acos(double __x) {
        var mh$ = acos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("acos", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __acos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__acos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __acos(double __x)
     * }
     */
    public static FunctionDescriptor __acos$descriptor() {
        return __acos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __acos(double __x)
     * }
     */
    public static MethodHandle __acos$handle() {
        return __acos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __acos(double __x)
     * }
     */
    public static MemorySegment __acos$address() {
        return __acos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __acos(double __x)
     * }
     */
    public static double __acos(double __x) {
        var mh$ = __acos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__acos", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("asin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double asin(double __x)
     * }
     */
    public static FunctionDescriptor asin$descriptor() {
        return asin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double asin(double __x)
     * }
     */
    public static MethodHandle asin$handle() {
        return asin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double asin(double __x)
     * }
     */
    public static MemorySegment asin$address() {
        return asin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double asin(double __x)
     * }
     */
    public static double asin(double __x) {
        var mh$ = asin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asin", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __asin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__asin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __asin(double __x)
     * }
     */
    public static FunctionDescriptor __asin$descriptor() {
        return __asin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __asin(double __x)
     * }
     */
    public static MethodHandle __asin$handle() {
        return __asin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __asin(double __x)
     * }
     */
    public static MemorySegment __asin$address() {
        return __asin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __asin(double __x)
     * }
     */
    public static double __asin(double __x) {
        var mh$ = __asin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__asin", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double atan(double __x)
     * }
     */
    public static FunctionDescriptor atan$descriptor() {
        return atan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double atan(double __x)
     * }
     */
    public static MethodHandle atan$handle() {
        return atan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double atan(double __x)
     * }
     */
    public static MemorySegment atan$address() {
        return atan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double atan(double __x)
     * }
     */
    public static double atan(double __x) {
        var mh$ = atan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atan", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __atan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__atan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __atan(double __x)
     * }
     */
    public static FunctionDescriptor __atan$descriptor() {
        return __atan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __atan(double __x)
     * }
     */
    public static MethodHandle __atan$handle() {
        return __atan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __atan(double __x)
     * }
     */
    public static MemorySegment __atan$address() {
        return __atan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __atan(double __x)
     * }
     */
    public static double __atan(double __x) {
        var mh$ = __atan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__atan", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atan2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atan2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double atan2(double __y, double __x)
     * }
     */
    public static FunctionDescriptor atan2$descriptor() {
        return atan2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double atan2(double __y, double __x)
     * }
     */
    public static MethodHandle atan2$handle() {
        return atan2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double atan2(double __y, double __x)
     * }
     */
    public static MemorySegment atan2$address() {
        return atan2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double atan2(double __y, double __x)
     * }
     */
    public static double atan2(double __y, double __x) {
        var mh$ = atan2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atan2", __y, __x);
            }
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __atan2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__atan2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __atan2(double __y, double __x)
     * }
     */
    public static FunctionDescriptor __atan2$descriptor() {
        return __atan2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __atan2(double __y, double __x)
     * }
     */
    public static MethodHandle __atan2$handle() {
        return __atan2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __atan2(double __y, double __x)
     * }
     */
    public static MemorySegment __atan2$address() {
        return __atan2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __atan2(double __y, double __x)
     * }
     */
    public static double __atan2(double __y, double __x) {
        var mh$ = __atan2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__atan2", __y, __x);
            }
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cos(double __x)
     * }
     */
    public static FunctionDescriptor cos$descriptor() {
        return cos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cos(double __x)
     * }
     */
    public static MethodHandle cos$handle() {
        return cos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double cos(double __x)
     * }
     */
    public static MemorySegment cos$address() {
        return cos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double cos(double __x)
     * }
     */
    public static double cos(double __x) {
        var mh$ = cos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cos", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __cos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__cos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __cos(double __x)
     * }
     */
    public static FunctionDescriptor __cos$descriptor() {
        return __cos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __cos(double __x)
     * }
     */
    public static MethodHandle __cos$handle() {
        return __cos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __cos(double __x)
     * }
     */
    public static MemorySegment __cos$address() {
        return __cos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __cos(double __x)
     * }
     */
    public static double __cos(double __x) {
        var mh$ = __cos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__cos", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double sin(double __x)
     * }
     */
    public static FunctionDescriptor sin$descriptor() {
        return sin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double sin(double __x)
     * }
     */
    public static MethodHandle sin$handle() {
        return sin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double sin(double __x)
     * }
     */
    public static MemorySegment sin$address() {
        return sin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double sin(double __x)
     * }
     */
    public static double sin(double __x) {
        var mh$ = sin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sin", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__sin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __sin(double __x)
     * }
     */
    public static FunctionDescriptor __sin$descriptor() {
        return __sin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __sin(double __x)
     * }
     */
    public static MethodHandle __sin$handle() {
        return __sin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __sin(double __x)
     * }
     */
    public static MemorySegment __sin$address() {
        return __sin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __sin(double __x)
     * }
     */
    public static double __sin(double __x) {
        var mh$ = __sin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sin", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double tan(double __x)
     * }
     */
    public static FunctionDescriptor tan$descriptor() {
        return tan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double tan(double __x)
     * }
     */
    public static MethodHandle tan$handle() {
        return tan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double tan(double __x)
     * }
     */
    public static MemorySegment tan$address() {
        return tan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double tan(double __x)
     * }
     */
    public static double tan(double __x) {
        var mh$ = tan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tan", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __tan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__tan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __tan(double __x)
     * }
     */
    public static FunctionDescriptor __tan$descriptor() {
        return __tan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __tan(double __x)
     * }
     */
    public static MethodHandle __tan$handle() {
        return __tan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __tan(double __x)
     * }
     */
    public static MemorySegment __tan$address() {
        return __tan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __tan(double __x)
     * }
     */
    public static double __tan(double __x) {
        var mh$ = __tan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__tan", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cosh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cosh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cosh(double __x)
     * }
     */
    public static FunctionDescriptor cosh$descriptor() {
        return cosh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cosh(double __x)
     * }
     */
    public static MethodHandle cosh$handle() {
        return cosh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double cosh(double __x)
     * }
     */
    public static MemorySegment cosh$address() {
        return cosh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double cosh(double __x)
     * }
     */
    public static double cosh(double __x) {
        var mh$ = cosh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cosh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __cosh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__cosh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __cosh(double __x)
     * }
     */
    public static FunctionDescriptor __cosh$descriptor() {
        return __cosh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __cosh(double __x)
     * }
     */
    public static MethodHandle __cosh$handle() {
        return __cosh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __cosh(double __x)
     * }
     */
    public static MemorySegment __cosh$address() {
        return __cosh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __cosh(double __x)
     * }
     */
    public static double __cosh(double __x) {
        var mh$ = __cosh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__cosh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sinh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sinh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double sinh(double __x)
     * }
     */
    public static FunctionDescriptor sinh$descriptor() {
        return sinh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double sinh(double __x)
     * }
     */
    public static MethodHandle sinh$handle() {
        return sinh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double sinh(double __x)
     * }
     */
    public static MemorySegment sinh$address() {
        return sinh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double sinh(double __x)
     * }
     */
    public static double sinh(double __x) {
        var mh$ = sinh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sinh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sinh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__sinh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __sinh(double __x)
     * }
     */
    public static FunctionDescriptor __sinh$descriptor() {
        return __sinh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __sinh(double __x)
     * }
     */
    public static MethodHandle __sinh$handle() {
        return __sinh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __sinh(double __x)
     * }
     */
    public static MemorySegment __sinh$address() {
        return __sinh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __sinh(double __x)
     * }
     */
    public static double __sinh(double __x) {
        var mh$ = __sinh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sinh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tanh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tanh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double tanh(double __x)
     * }
     */
    public static FunctionDescriptor tanh$descriptor() {
        return tanh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double tanh(double __x)
     * }
     */
    public static MethodHandle tanh$handle() {
        return tanh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double tanh(double __x)
     * }
     */
    public static MemorySegment tanh$address() {
        return tanh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double tanh(double __x)
     * }
     */
    public static double tanh(double __x) {
        var mh$ = tanh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tanh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __tanh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__tanh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __tanh(double __x)
     * }
     */
    public static FunctionDescriptor __tanh$descriptor() {
        return __tanh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __tanh(double __x)
     * }
     */
    public static MethodHandle __tanh$handle() {
        return __tanh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __tanh(double __x)
     * }
     */
    public static MemorySegment __tanh$address() {
        return __tanh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __tanh(double __x)
     * }
     */
    public static double __tanh(double __x) {
        var mh$ = __tanh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__tanh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class acosh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("acosh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double acosh(double __x)
     * }
     */
    public static FunctionDescriptor acosh$descriptor() {
        return acosh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double acosh(double __x)
     * }
     */
    public static MethodHandle acosh$handle() {
        return acosh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double acosh(double __x)
     * }
     */
    public static MemorySegment acosh$address() {
        return acosh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double acosh(double __x)
     * }
     */
    public static double acosh(double __x) {
        var mh$ = acosh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("acosh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __acosh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__acosh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __acosh(double __x)
     * }
     */
    public static FunctionDescriptor __acosh$descriptor() {
        return __acosh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __acosh(double __x)
     * }
     */
    public static MethodHandle __acosh$handle() {
        return __acosh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __acosh(double __x)
     * }
     */
    public static MemorySegment __acosh$address() {
        return __acosh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __acosh(double __x)
     * }
     */
    public static double __acosh(double __x) {
        var mh$ = __acosh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__acosh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asinh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("asinh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double asinh(double __x)
     * }
     */
    public static FunctionDescriptor asinh$descriptor() {
        return asinh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double asinh(double __x)
     * }
     */
    public static MethodHandle asinh$handle() {
        return asinh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double asinh(double __x)
     * }
     */
    public static MemorySegment asinh$address() {
        return asinh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double asinh(double __x)
     * }
     */
    public static double asinh(double __x) {
        var mh$ = asinh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asinh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __asinh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__asinh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __asinh(double __x)
     * }
     */
    public static FunctionDescriptor __asinh$descriptor() {
        return __asinh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __asinh(double __x)
     * }
     */
    public static MethodHandle __asinh$handle() {
        return __asinh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __asinh(double __x)
     * }
     */
    public static MemorySegment __asinh$address() {
        return __asinh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __asinh(double __x)
     * }
     */
    public static double __asinh(double __x) {
        var mh$ = __asinh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__asinh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atanh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atanh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double atanh(double __x)
     * }
     */
    public static FunctionDescriptor atanh$descriptor() {
        return atanh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double atanh(double __x)
     * }
     */
    public static MethodHandle atanh$handle() {
        return atanh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double atanh(double __x)
     * }
     */
    public static MemorySegment atanh$address() {
        return atanh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double atanh(double __x)
     * }
     */
    public static double atanh(double __x) {
        var mh$ = atanh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atanh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __atanh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__atanh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __atanh(double __x)
     * }
     */
    public static FunctionDescriptor __atanh$descriptor() {
        return __atanh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __atanh(double __x)
     * }
     */
    public static MethodHandle __atanh$handle() {
        return __atanh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __atanh(double __x)
     * }
     */
    public static MemorySegment __atanh$address() {
        return __atanh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __atanh(double __x)
     * }
     */
    public static double __atanh(double __x) {
        var mh$ = __atanh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__atanh", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double exp(double __x)
     * }
     */
    public static FunctionDescriptor exp$descriptor() {
        return exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double exp(double __x)
     * }
     */
    public static MethodHandle exp$handle() {
        return exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double exp(double __x)
     * }
     */
    public static MemorySegment exp$address() {
        return exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double exp(double __x)
     * }
     */
    public static double exp(double __x) {
        var mh$ = exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exp", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __exp(double __x)
     * }
     */
    public static FunctionDescriptor __exp$descriptor() {
        return __exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __exp(double __x)
     * }
     */
    public static MethodHandle __exp$handle() {
        return __exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __exp(double __x)
     * }
     */
    public static MemorySegment __exp$address() {
        return __exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __exp(double __x)
     * }
     */
    public static double __exp(double __x) {
        var mh$ = __exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__exp", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class frexp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("frexp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double frexp(double __x, int *__exponent)
     * }
     */
    public static FunctionDescriptor frexp$descriptor() {
        return frexp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double frexp(double __x, int *__exponent)
     * }
     */
    public static MethodHandle frexp$handle() {
        return frexp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double frexp(double __x, int *__exponent)
     * }
     */
    public static MemorySegment frexp$address() {
        return frexp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double frexp(double __x, int *__exponent)
     * }
     */
    public static double frexp(double __x, MemorySegment __exponent) {
        var mh$ = frexp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("frexp", __x, __exponent);
            }
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __frexp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__frexp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __frexp(double __x, int *__exponent)
     * }
     */
    public static FunctionDescriptor __frexp$descriptor() {
        return __frexp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __frexp(double __x, int *__exponent)
     * }
     */
    public static MethodHandle __frexp$handle() {
        return __frexp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __frexp(double __x, int *__exponent)
     * }
     */
    public static MemorySegment __frexp$address() {
        return __frexp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __frexp(double __x, int *__exponent)
     * }
     */
    public static double __frexp(double __x, MemorySegment __exponent) {
        var mh$ = __frexp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__frexp", __x, __exponent);
            }
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ldexp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ldexp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double ldexp(double __x, int __exponent)
     * }
     */
    public static FunctionDescriptor ldexp$descriptor() {
        return ldexp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double ldexp(double __x, int __exponent)
     * }
     */
    public static MethodHandle ldexp$handle() {
        return ldexp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double ldexp(double __x, int __exponent)
     * }
     */
    public static MemorySegment ldexp$address() {
        return ldexp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double ldexp(double __x, int __exponent)
     * }
     */
    public static double ldexp(double __x, int __exponent) {
        var mh$ = ldexp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ldexp", __x, __exponent);
            }
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __ldexp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__ldexp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __ldexp(double __x, int __exponent)
     * }
     */
    public static FunctionDescriptor __ldexp$descriptor() {
        return __ldexp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __ldexp(double __x, int __exponent)
     * }
     */
    public static MethodHandle __ldexp$handle() {
        return __ldexp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __ldexp(double __x, int __exponent)
     * }
     */
    public static MemorySegment __ldexp$address() {
        return __ldexp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __ldexp(double __x, int __exponent)
     * }
     */
    public static double __ldexp(double __x, int __exponent) {
        var mh$ = __ldexp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__ldexp", __x, __exponent);
            }
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double log(double __x)
     * }
     */
    public static FunctionDescriptor log$descriptor() {
        return log.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double log(double __x)
     * }
     */
    public static MethodHandle log$handle() {
        return log.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double log(double __x)
     * }
     */
    public static MemorySegment log$address() {
        return log.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double log(double __x)
     * }
     */
    public static double log(double __x) {
        var mh$ = log.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __log {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__log");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __log(double __x)
     * }
     */
    public static FunctionDescriptor __log$descriptor() {
        return __log.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __log(double __x)
     * }
     */
    public static MethodHandle __log$handle() {
        return __log.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __log(double __x)
     * }
     */
    public static MemorySegment __log$address() {
        return __log.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __log(double __x)
     * }
     */
    public static double __log(double __x) {
        var mh$ = __log.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__log", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log10 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log10");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double log10(double __x)
     * }
     */
    public static FunctionDescriptor log10$descriptor() {
        return log10.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double log10(double __x)
     * }
     */
    public static MethodHandle log10$handle() {
        return log10.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double log10(double __x)
     * }
     */
    public static MemorySegment log10$address() {
        return log10.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double log10(double __x)
     * }
     */
    public static double log10(double __x) {
        var mh$ = log10.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log10", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __log10 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__log10");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __log10(double __x)
     * }
     */
    public static FunctionDescriptor __log10$descriptor() {
        return __log10.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __log10(double __x)
     * }
     */
    public static MethodHandle __log10$handle() {
        return __log10.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __log10(double __x)
     * }
     */
    public static MemorySegment __log10$address() {
        return __log10.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __log10(double __x)
     * }
     */
    public static double __log10(double __x) {
        var mh$ = __log10.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__log10", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class modf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("modf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double modf(double __x, double *__iptr)
     * }
     */
    public static FunctionDescriptor modf$descriptor() {
        return modf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double modf(double __x, double *__iptr)
     * }
     */
    public static MethodHandle modf$handle() {
        return modf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double modf(double __x, double *__iptr)
     * }
     */
    public static MemorySegment modf$address() {
        return modf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double modf(double __x, double *__iptr)
     * }
     */
    public static double modf(double __x, MemorySegment __iptr) {
        var mh$ = modf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("modf", __x, __iptr);
            }
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __modf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__modf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __modf(double __x, double *__iptr)
     * }
     */
    public static FunctionDescriptor __modf$descriptor() {
        return __modf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __modf(double __x, double *__iptr)
     * }
     */
    public static MethodHandle __modf$handle() {
        return __modf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __modf(double __x, double *__iptr)
     * }
     */
    public static MemorySegment __modf$address() {
        return __modf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __modf(double __x, double *__iptr)
     * }
     */
    public static double __modf(double __x, MemorySegment __iptr) {
        var mh$ = __modf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__modf", __x, __iptr);
            }
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class expm1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("expm1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double expm1(double __x)
     * }
     */
    public static FunctionDescriptor expm1$descriptor() {
        return expm1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double expm1(double __x)
     * }
     */
    public static MethodHandle expm1$handle() {
        return expm1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double expm1(double __x)
     * }
     */
    public static MemorySegment expm1$address() {
        return expm1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double expm1(double __x)
     * }
     */
    public static double expm1(double __x) {
        var mh$ = expm1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("expm1", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __expm1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__expm1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __expm1(double __x)
     * }
     */
    public static FunctionDescriptor __expm1$descriptor() {
        return __expm1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __expm1(double __x)
     * }
     */
    public static MethodHandle __expm1$handle() {
        return __expm1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __expm1(double __x)
     * }
     */
    public static MemorySegment __expm1$address() {
        return __expm1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __expm1(double __x)
     * }
     */
    public static double __expm1(double __x) {
        var mh$ = __expm1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__expm1", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log1p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log1p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double log1p(double __x)
     * }
     */
    public static FunctionDescriptor log1p$descriptor() {
        return log1p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double log1p(double __x)
     * }
     */
    public static MethodHandle log1p$handle() {
        return log1p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double log1p(double __x)
     * }
     */
    public static MemorySegment log1p$address() {
        return log1p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double log1p(double __x)
     * }
     */
    public static double log1p(double __x) {
        var mh$ = log1p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log1p", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __log1p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__log1p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __log1p(double __x)
     * }
     */
    public static FunctionDescriptor __log1p$descriptor() {
        return __log1p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __log1p(double __x)
     * }
     */
    public static MethodHandle __log1p$handle() {
        return __log1p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __log1p(double __x)
     * }
     */
    public static MemorySegment __log1p$address() {
        return __log1p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __log1p(double __x)
     * }
     */
    public static double __log1p(double __x) {
        var mh$ = __log1p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__log1p", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class logb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("logb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double logb(double __x)
     * }
     */
    public static FunctionDescriptor logb$descriptor() {
        return logb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double logb(double __x)
     * }
     */
    public static MethodHandle logb$handle() {
        return logb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double logb(double __x)
     * }
     */
    public static MemorySegment logb$address() {
        return logb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double logb(double __x)
     * }
     */
    public static double logb(double __x) {
        var mh$ = logb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("logb", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __logb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__logb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __logb(double __x)
     * }
     */
    public static FunctionDescriptor __logb$descriptor() {
        return __logb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __logb(double __x)
     * }
     */
    public static MethodHandle __logb$handle() {
        return __logb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __logb(double __x)
     * }
     */
    public static MemorySegment __logb$address() {
        return __logb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __logb(double __x)
     * }
     */
    public static double __logb(double __x) {
        var mh$ = __logb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__logb", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exp2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("exp2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double exp2(double __x)
     * }
     */
    public static FunctionDescriptor exp2$descriptor() {
        return exp2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double exp2(double __x)
     * }
     */
    public static MethodHandle exp2$handle() {
        return exp2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double exp2(double __x)
     * }
     */
    public static MemorySegment exp2$address() {
        return exp2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double exp2(double __x)
     * }
     */
    public static double exp2(double __x) {
        var mh$ = exp2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exp2", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __exp2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__exp2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __exp2(double __x)
     * }
     */
    public static FunctionDescriptor __exp2$descriptor() {
        return __exp2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __exp2(double __x)
     * }
     */
    public static MethodHandle __exp2$handle() {
        return __exp2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __exp2(double __x)
     * }
     */
    public static MemorySegment __exp2$address() {
        return __exp2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __exp2(double __x)
     * }
     */
    public static double __exp2(double __x) {
        var mh$ = __exp2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__exp2", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double log2(double __x)
     * }
     */
    public static FunctionDescriptor log2$descriptor() {
        return log2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double log2(double __x)
     * }
     */
    public static MethodHandle log2$handle() {
        return log2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double log2(double __x)
     * }
     */
    public static MemorySegment log2$address() {
        return log2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double log2(double __x)
     * }
     */
    public static double log2(double __x) {
        var mh$ = log2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log2", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __log2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__log2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __log2(double __x)
     * }
     */
    public static FunctionDescriptor __log2$descriptor() {
        return __log2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __log2(double __x)
     * }
     */
    public static MethodHandle __log2$handle() {
        return __log2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __log2(double __x)
     * }
     */
    public static MemorySegment __log2$address() {
        return __log2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __log2(double __x)
     * }
     */
    public static double __log2(double __x) {
        var mh$ = __log2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__log2", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("pow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double pow(double __x, double __y)
     * }
     */
    public static FunctionDescriptor pow$descriptor() {
        return pow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double pow(double __x, double __y)
     * }
     */
    public static MethodHandle pow$handle() {
        return pow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double pow(double __x, double __y)
     * }
     */
    public static MemorySegment pow$address() {
        return pow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double pow(double __x, double __y)
     * }
     */
    public static double pow(double __x, double __y) {
        var mh$ = pow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pow", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __pow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__pow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __pow(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __pow$descriptor() {
        return __pow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __pow(double __x, double __y)
     * }
     */
    public static MethodHandle __pow$handle() {
        return __pow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __pow(double __x, double __y)
     * }
     */
    public static MemorySegment __pow$address() {
        return __pow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __pow(double __x, double __y)
     * }
     */
    public static double __pow(double __x, double __y) {
        var mh$ = __pow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__pow", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sqrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double sqrt(double __x)
     * }
     */
    public static FunctionDescriptor sqrt$descriptor() {
        return sqrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double sqrt(double __x)
     * }
     */
    public static MethodHandle sqrt$handle() {
        return sqrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double sqrt(double __x)
     * }
     */
    public static MemorySegment sqrt$address() {
        return sqrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double sqrt(double __x)
     * }
     */
    public static double sqrt(double __x) {
        var mh$ = sqrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqrt", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sqrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__sqrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __sqrt(double __x)
     * }
     */
    public static FunctionDescriptor __sqrt$descriptor() {
        return __sqrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __sqrt(double __x)
     * }
     */
    public static MethodHandle __sqrt$handle() {
        return __sqrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __sqrt(double __x)
     * }
     */
    public static MemorySegment __sqrt$address() {
        return __sqrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __sqrt(double __x)
     * }
     */
    public static double __sqrt(double __x) {
        var mh$ = __sqrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sqrt", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hypot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("hypot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double hypot(double __x, double __y)
     * }
     */
    public static FunctionDescriptor hypot$descriptor() {
        return hypot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double hypot(double __x, double __y)
     * }
     */
    public static MethodHandle hypot$handle() {
        return hypot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double hypot(double __x, double __y)
     * }
     */
    public static MemorySegment hypot$address() {
        return hypot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double hypot(double __x, double __y)
     * }
     */
    public static double hypot(double __x, double __y) {
        var mh$ = hypot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hypot", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __hypot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__hypot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __hypot(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __hypot$descriptor() {
        return __hypot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __hypot(double __x, double __y)
     * }
     */
    public static MethodHandle __hypot$handle() {
        return __hypot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __hypot(double __x, double __y)
     * }
     */
    public static MemorySegment __hypot$address() {
        return __hypot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __hypot(double __x, double __y)
     * }
     */
    public static double __hypot(double __x, double __y) {
        var mh$ = __hypot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__hypot", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cbrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cbrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cbrt(double __x)
     * }
     */
    public static FunctionDescriptor cbrt$descriptor() {
        return cbrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cbrt(double __x)
     * }
     */
    public static MethodHandle cbrt$handle() {
        return cbrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double cbrt(double __x)
     * }
     */
    public static MemorySegment cbrt$address() {
        return cbrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double cbrt(double __x)
     * }
     */
    public static double cbrt(double __x) {
        var mh$ = cbrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cbrt", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __cbrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__cbrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __cbrt(double __x)
     * }
     */
    public static FunctionDescriptor __cbrt$descriptor() {
        return __cbrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __cbrt(double __x)
     * }
     */
    public static MethodHandle __cbrt$handle() {
        return __cbrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __cbrt(double __x)
     * }
     */
    public static MemorySegment __cbrt$address() {
        return __cbrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __cbrt(double __x)
     * }
     */
    public static double __cbrt(double __x) {
        var mh$ = __cbrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__cbrt", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ceil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ceil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double ceil(double __x)
     * }
     */
    public static FunctionDescriptor ceil$descriptor() {
        return ceil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double ceil(double __x)
     * }
     */
    public static MethodHandle ceil$handle() {
        return ceil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double ceil(double __x)
     * }
     */
    public static MemorySegment ceil$address() {
        return ceil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double ceil(double __x)
     * }
     */
    public static double ceil(double __x) {
        var mh$ = ceil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ceil", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __ceil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__ceil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __ceil(double __x)
     * }
     */
    public static FunctionDescriptor __ceil$descriptor() {
        return __ceil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __ceil(double __x)
     * }
     */
    public static MethodHandle __ceil$handle() {
        return __ceil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __ceil(double __x)
     * }
     */
    public static MemorySegment __ceil$address() {
        return __ceil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __ceil(double __x)
     * }
     */
    public static double __ceil(double __x) {
        var mh$ = __ceil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__ceil", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fabs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double fabs(double __x)
     * }
     */
    public static FunctionDescriptor fabs$descriptor() {
        return fabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double fabs(double __x)
     * }
     */
    public static MethodHandle fabs$handle() {
        return fabs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double fabs(double __x)
     * }
     */
    public static MemorySegment fabs$address() {
        return fabs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double fabs(double __x)
     * }
     */
    public static double fabs(double __x) {
        var mh$ = fabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fabs", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fabs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __fabs(double __x)
     * }
     */
    public static FunctionDescriptor __fabs$descriptor() {
        return __fabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __fabs(double __x)
     * }
     */
    public static MethodHandle __fabs$handle() {
        return __fabs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __fabs(double __x)
     * }
     */
    public static MemorySegment __fabs$address() {
        return __fabs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __fabs(double __x)
     * }
     */
    public static double __fabs(double __x) {
        var mh$ = __fabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fabs", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class floor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("floor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double floor(double __x)
     * }
     */
    public static FunctionDescriptor floor$descriptor() {
        return floor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double floor(double __x)
     * }
     */
    public static MethodHandle floor$handle() {
        return floor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double floor(double __x)
     * }
     */
    public static MemorySegment floor$address() {
        return floor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double floor(double __x)
     * }
     */
    public static double floor(double __x) {
        var mh$ = floor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("floor", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __floor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__floor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __floor(double __x)
     * }
     */
    public static FunctionDescriptor __floor$descriptor() {
        return __floor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __floor(double __x)
     * }
     */
    public static MethodHandle __floor$handle() {
        return __floor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __floor(double __x)
     * }
     */
    public static MemorySegment __floor$address() {
        return __floor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __floor(double __x)
     * }
     */
    public static double __floor(double __x) {
        var mh$ = __floor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__floor", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double fmod(double __x, double __y)
     * }
     */
    public static FunctionDescriptor fmod$descriptor() {
        return fmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double fmod(double __x, double __y)
     * }
     */
    public static MethodHandle fmod$handle() {
        return fmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double fmod(double __x, double __y)
     * }
     */
    public static MemorySegment fmod$address() {
        return fmod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double fmod(double __x, double __y)
     * }
     */
    public static double fmod(double __x, double __y) {
        var mh$ = fmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmod", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __fmod(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __fmod$descriptor() {
        return __fmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __fmod(double __x, double __y)
     * }
     */
    public static MethodHandle __fmod$handle() {
        return __fmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __fmod(double __x, double __y)
     * }
     */
    public static MemorySegment __fmod$address() {
        return __fmod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __fmod(double __x, double __y)
     * }
     */
    public static double __fmod(double __x, double __y) {
        var mh$ = __fmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fmod", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isinf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("isinf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int isinf(double __value)
     * }
     */
    public static FunctionDescriptor isinf$descriptor() {
        return isinf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int isinf(double __value)
     * }
     */
    public static MethodHandle isinf$handle() {
        return isinf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int isinf(double __value)
     * }
     */
    public static MemorySegment isinf$address() {
        return isinf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int isinf(double __value)
     * }
     */
    public static int isinf(double __value) {
        var mh$ = isinf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isinf", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class finite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("finite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int finite(double __value)
     * }
     */
    public static FunctionDescriptor finite$descriptor() {
        return finite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int finite(double __value)
     * }
     */
    public static MethodHandle finite$handle() {
        return finite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int finite(double __value)
     * }
     */
    public static MemorySegment finite$address() {
        return finite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int finite(double __value)
     * }
     */
    public static int finite(double __value) {
        var mh$ = finite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("finite", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class drem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("drem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double drem(double __x, double __y)
     * }
     */
    public static FunctionDescriptor drem$descriptor() {
        return drem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double drem(double __x, double __y)
     * }
     */
    public static MethodHandle drem$handle() {
        return drem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double drem(double __x, double __y)
     * }
     */
    public static MemorySegment drem$address() {
        return drem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double drem(double __x, double __y)
     * }
     */
    public static double drem(double __x, double __y) {
        var mh$ = drem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("drem", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __drem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__drem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __drem(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __drem$descriptor() {
        return __drem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __drem(double __x, double __y)
     * }
     */
    public static MethodHandle __drem$handle() {
        return __drem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __drem(double __x, double __y)
     * }
     */
    public static MemorySegment __drem$address() {
        return __drem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __drem(double __x, double __y)
     * }
     */
    public static double __drem(double __x, double __y) {
        var mh$ = __drem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__drem", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class significand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("significand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double significand(double __x)
     * }
     */
    public static FunctionDescriptor significand$descriptor() {
        return significand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double significand(double __x)
     * }
     */
    public static MethodHandle significand$handle() {
        return significand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double significand(double __x)
     * }
     */
    public static MemorySegment significand$address() {
        return significand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double significand(double __x)
     * }
     */
    public static double significand(double __x) {
        var mh$ = significand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("significand", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __significand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__significand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __significand(double __x)
     * }
     */
    public static FunctionDescriptor __significand$descriptor() {
        return __significand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __significand(double __x)
     * }
     */
    public static MethodHandle __significand$handle() {
        return __significand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __significand(double __x)
     * }
     */
    public static MemorySegment __significand$address() {
        return __significand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __significand(double __x)
     * }
     */
    public static double __significand(double __x) {
        var mh$ = __significand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__significand", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class copysign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("copysign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double copysign(double __x, double __y)
     * }
     */
    public static FunctionDescriptor copysign$descriptor() {
        return copysign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double copysign(double __x, double __y)
     * }
     */
    public static MethodHandle copysign$handle() {
        return copysign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double copysign(double __x, double __y)
     * }
     */
    public static MemorySegment copysign$address() {
        return copysign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double copysign(double __x, double __y)
     * }
     */
    public static double copysign(double __x, double __y) {
        var mh$ = copysign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("copysign", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __copysign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__copysign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __copysign(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __copysign$descriptor() {
        return __copysign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __copysign(double __x, double __y)
     * }
     */
    public static MethodHandle __copysign$handle() {
        return __copysign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __copysign(double __x, double __y)
     * }
     */
    public static MemorySegment __copysign$address() {
        return __copysign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __copysign(double __x, double __y)
     * }
     */
    public static double __copysign(double __x, double __y) {
        var mh$ = __copysign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__copysign", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double nan(const char *__tagb)
     * }
     */
    public static FunctionDescriptor nan$descriptor() {
        return nan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double nan(const char *__tagb)
     * }
     */
    public static MethodHandle nan$handle() {
        return nan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double nan(const char *__tagb)
     * }
     */
    public static MemorySegment nan$address() {
        return nan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double nan(const char *__tagb)
     * }
     */
    public static double nan(MemorySegment __tagb) {
        var mh$ = nan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nan", __tagb);
            }
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __nan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__nan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __nan(const char *__tagb)
     * }
     */
    public static FunctionDescriptor __nan$descriptor() {
        return __nan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __nan(const char *__tagb)
     * }
     */
    public static MethodHandle __nan$handle() {
        return __nan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __nan(const char *__tagb)
     * }
     */
    public static MemorySegment __nan$address() {
        return __nan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __nan(const char *__tagb)
     * }
     */
    public static double __nan(MemorySegment __tagb) {
        var mh$ = __nan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__nan", __tagb);
            }
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isnan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("isnan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int isnan(double __value)
     * }
     */
    public static FunctionDescriptor isnan$descriptor() {
        return isnan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int isnan(double __value)
     * }
     */
    public static MethodHandle isnan$handle() {
        return isnan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int isnan(double __value)
     * }
     */
    public static MemorySegment isnan$address() {
        return isnan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int isnan(double __value)
     * }
     */
    public static int isnan(double __value) {
        var mh$ = isnan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isnan", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class j0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("j0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double j0(double)
     * }
     */
    public static FunctionDescriptor j0$descriptor() {
        return j0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double j0(double)
     * }
     */
    public static MethodHandle j0$handle() {
        return j0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double j0(double)
     * }
     */
    public static MemorySegment j0$address() {
        return j0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double j0(double)
     * }
     */
    public static double j0(double x0) {
        var mh$ = j0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("j0", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __j0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__j0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __j0(double)
     * }
     */
    public static FunctionDescriptor __j0$descriptor() {
        return __j0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __j0(double)
     * }
     */
    public static MethodHandle __j0$handle() {
        return __j0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __j0(double)
     * }
     */
    public static MemorySegment __j0$address() {
        return __j0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __j0(double)
     * }
     */
    public static double __j0(double x0) {
        var mh$ = __j0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__j0", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class j1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("j1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double j1(double)
     * }
     */
    public static FunctionDescriptor j1$descriptor() {
        return j1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double j1(double)
     * }
     */
    public static MethodHandle j1$handle() {
        return j1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double j1(double)
     * }
     */
    public static MemorySegment j1$address() {
        return j1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double j1(double)
     * }
     */
    public static double j1(double x0) {
        var mh$ = j1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("j1", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __j1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__j1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __j1(double)
     * }
     */
    public static FunctionDescriptor __j1$descriptor() {
        return __j1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __j1(double)
     * }
     */
    public static MethodHandle __j1$handle() {
        return __j1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __j1(double)
     * }
     */
    public static MemorySegment __j1$address() {
        return __j1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __j1(double)
     * }
     */
    public static double __j1(double x0) {
        var mh$ = __j1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__j1", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class jn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("jn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double jn(int, double)
     * }
     */
    public static FunctionDescriptor jn$descriptor() {
        return jn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double jn(int, double)
     * }
     */
    public static MethodHandle jn$handle() {
        return jn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double jn(int, double)
     * }
     */
    public static MemorySegment jn$address() {
        return jn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double jn(int, double)
     * }
     */
    public static double jn(int x0, double x1) {
        var mh$ = jn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("jn", x0, x1);
            }
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __jn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__jn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __jn(int, double)
     * }
     */
    public static FunctionDescriptor __jn$descriptor() {
        return __jn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __jn(int, double)
     * }
     */
    public static MethodHandle __jn$handle() {
        return __jn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __jn(int, double)
     * }
     */
    public static MemorySegment __jn$address() {
        return __jn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __jn(int, double)
     * }
     */
    public static double __jn(int x0, double x1) {
        var mh$ = __jn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__jn", x0, x1);
            }
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class y0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("y0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double y0(double)
     * }
     */
    public static FunctionDescriptor y0$descriptor() {
        return y0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double y0(double)
     * }
     */
    public static MethodHandle y0$handle() {
        return y0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double y0(double)
     * }
     */
    public static MemorySegment y0$address() {
        return y0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double y0(double)
     * }
     */
    public static double y0(double x0) {
        var mh$ = y0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("y0", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __y0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__y0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __y0(double)
     * }
     */
    public static FunctionDescriptor __y0$descriptor() {
        return __y0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __y0(double)
     * }
     */
    public static MethodHandle __y0$handle() {
        return __y0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __y0(double)
     * }
     */
    public static MemorySegment __y0$address() {
        return __y0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __y0(double)
     * }
     */
    public static double __y0(double x0) {
        var mh$ = __y0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__y0", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class y1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("y1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double y1(double)
     * }
     */
    public static FunctionDescriptor y1$descriptor() {
        return y1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double y1(double)
     * }
     */
    public static MethodHandle y1$handle() {
        return y1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double y1(double)
     * }
     */
    public static MemorySegment y1$address() {
        return y1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double y1(double)
     * }
     */
    public static double y1(double x0) {
        var mh$ = y1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("y1", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __y1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__y1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __y1(double)
     * }
     */
    public static FunctionDescriptor __y1$descriptor() {
        return __y1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __y1(double)
     * }
     */
    public static MethodHandle __y1$handle() {
        return __y1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __y1(double)
     * }
     */
    public static MemorySegment __y1$address() {
        return __y1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __y1(double)
     * }
     */
    public static double __y1(double x0) {
        var mh$ = __y1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__y1", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class yn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("yn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double yn(int, double)
     * }
     */
    public static FunctionDescriptor yn$descriptor() {
        return yn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double yn(int, double)
     * }
     */
    public static MethodHandle yn$handle() {
        return yn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double yn(int, double)
     * }
     */
    public static MemorySegment yn$address() {
        return yn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double yn(int, double)
     * }
     */
    public static double yn(int x0, double x1) {
        var mh$ = yn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("yn", x0, x1);
            }
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __yn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__yn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __yn(int, double)
     * }
     */
    public static FunctionDescriptor __yn$descriptor() {
        return __yn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __yn(int, double)
     * }
     */
    public static MethodHandle __yn$handle() {
        return __yn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __yn(int, double)
     * }
     */
    public static MemorySegment __yn$address() {
        return __yn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __yn(int, double)
     * }
     */
    public static double __yn(int x0, double x1) {
        var mh$ = __yn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__yn", x0, x1);
            }
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("erf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double erf(double)
     * }
     */
    public static FunctionDescriptor erf$descriptor() {
        return erf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double erf(double)
     * }
     */
    public static MethodHandle erf$handle() {
        return erf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double erf(double)
     * }
     */
    public static MemorySegment erf$address() {
        return erf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double erf(double)
     * }
     */
    public static double erf(double x0) {
        var mh$ = erf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erf", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __erf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__erf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __erf(double)
     * }
     */
    public static FunctionDescriptor __erf$descriptor() {
        return __erf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __erf(double)
     * }
     */
    public static MethodHandle __erf$handle() {
        return __erf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __erf(double)
     * }
     */
    public static MemorySegment __erf$address() {
        return __erf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __erf(double)
     * }
     */
    public static double __erf(double x0) {
        var mh$ = __erf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__erf", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erfc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("erfc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double erfc(double)
     * }
     */
    public static FunctionDescriptor erfc$descriptor() {
        return erfc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double erfc(double)
     * }
     */
    public static MethodHandle erfc$handle() {
        return erfc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double erfc(double)
     * }
     */
    public static MemorySegment erfc$address() {
        return erfc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double erfc(double)
     * }
     */
    public static double erfc(double x0) {
        var mh$ = erfc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erfc", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __erfc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__erfc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __erfc(double)
     * }
     */
    public static FunctionDescriptor __erfc$descriptor() {
        return __erfc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __erfc(double)
     * }
     */
    public static MethodHandle __erfc$handle() {
        return __erfc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __erfc(double)
     * }
     */
    public static MemorySegment __erfc$address() {
        return __erfc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __erfc(double)
     * }
     */
    public static double __erfc(double x0) {
        var mh$ = __erfc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__erfc", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lgamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lgamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double lgamma(double)
     * }
     */
    public static FunctionDescriptor lgamma$descriptor() {
        return lgamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double lgamma(double)
     * }
     */
    public static MethodHandle lgamma$handle() {
        return lgamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double lgamma(double)
     * }
     */
    public static MemorySegment lgamma$address() {
        return lgamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double lgamma(double)
     * }
     */
    public static double lgamma(double x0) {
        var mh$ = lgamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lgamma", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __lgamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__lgamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __lgamma(double)
     * }
     */
    public static FunctionDescriptor __lgamma$descriptor() {
        return __lgamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __lgamma(double)
     * }
     */
    public static MethodHandle __lgamma$handle() {
        return __lgamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __lgamma(double)
     * }
     */
    public static MemorySegment __lgamma$address() {
        return __lgamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __lgamma(double)
     * }
     */
    public static double __lgamma(double x0) {
        var mh$ = __lgamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__lgamma", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tgamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tgamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double tgamma(double)
     * }
     */
    public static FunctionDescriptor tgamma$descriptor() {
        return tgamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double tgamma(double)
     * }
     */
    public static MethodHandle tgamma$handle() {
        return tgamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double tgamma(double)
     * }
     */
    public static MemorySegment tgamma$address() {
        return tgamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double tgamma(double)
     * }
     */
    public static double tgamma(double x0) {
        var mh$ = tgamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tgamma", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __tgamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__tgamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __tgamma(double)
     * }
     */
    public static FunctionDescriptor __tgamma$descriptor() {
        return __tgamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __tgamma(double)
     * }
     */
    public static MethodHandle __tgamma$handle() {
        return __tgamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __tgamma(double)
     * }
     */
    public static MemorySegment __tgamma$address() {
        return __tgamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __tgamma(double)
     * }
     */
    public static double __tgamma(double x0) {
        var mh$ = __tgamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__tgamma", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("gamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double gamma(double)
     * }
     */
    public static FunctionDescriptor gamma$descriptor() {
        return gamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double gamma(double)
     * }
     */
    public static MethodHandle gamma$handle() {
        return gamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double gamma(double)
     * }
     */
    public static MemorySegment gamma$address() {
        return gamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double gamma(double)
     * }
     */
    public static double gamma(double x0) {
        var mh$ = gamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gamma", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __gamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__gamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __gamma(double)
     * }
     */
    public static FunctionDescriptor __gamma$descriptor() {
        return __gamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __gamma(double)
     * }
     */
    public static MethodHandle __gamma$handle() {
        return __gamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __gamma(double)
     * }
     */
    public static MemorySegment __gamma$address() {
        return __gamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __gamma(double)
     * }
     */
    public static double __gamma(double x0) {
        var mh$ = __gamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__gamma", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lgamma_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lgamma_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double lgamma_r(double, int *__signgamp)
     * }
     */
    public static FunctionDescriptor lgamma_r$descriptor() {
        return lgamma_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double lgamma_r(double, int *__signgamp)
     * }
     */
    public static MethodHandle lgamma_r$handle() {
        return lgamma_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double lgamma_r(double, int *__signgamp)
     * }
     */
    public static MemorySegment lgamma_r$address() {
        return lgamma_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double lgamma_r(double, int *__signgamp)
     * }
     */
    public static double lgamma_r(double x0, MemorySegment __signgamp) {
        var mh$ = lgamma_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lgamma_r", x0, __signgamp);
            }
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __lgamma_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__lgamma_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __lgamma_r(double, int *__signgamp)
     * }
     */
    public static FunctionDescriptor __lgamma_r$descriptor() {
        return __lgamma_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __lgamma_r(double, int *__signgamp)
     * }
     */
    public static MethodHandle __lgamma_r$handle() {
        return __lgamma_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __lgamma_r(double, int *__signgamp)
     * }
     */
    public static MemorySegment __lgamma_r$address() {
        return __lgamma_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __lgamma_r(double, int *__signgamp)
     * }
     */
    public static double __lgamma_r(double x0, MemorySegment __signgamp) {
        var mh$ = __lgamma_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__lgamma_r", x0, __signgamp);
            }
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("rint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double rint(double __x)
     * }
     */
    public static FunctionDescriptor rint$descriptor() {
        return rint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double rint(double __x)
     * }
     */
    public static MethodHandle rint$handle() {
        return rint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double rint(double __x)
     * }
     */
    public static MemorySegment rint$address() {
        return rint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double rint(double __x)
     * }
     */
    public static double rint(double __x) {
        var mh$ = rint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rint", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __rint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__rint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __rint(double __x)
     * }
     */
    public static FunctionDescriptor __rint$descriptor() {
        return __rint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __rint(double __x)
     * }
     */
    public static MethodHandle __rint$handle() {
        return __rint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __rint(double __x)
     * }
     */
    public static MemorySegment __rint$address() {
        return __rint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __rint(double __x)
     * }
     */
    public static double __rint(double __x) {
        var mh$ = __rint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__rint", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nextafter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nextafter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double nextafter(double __x, double __y)
     * }
     */
    public static FunctionDescriptor nextafter$descriptor() {
        return nextafter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double nextafter(double __x, double __y)
     * }
     */
    public static MethodHandle nextafter$handle() {
        return nextafter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double nextafter(double __x, double __y)
     * }
     */
    public static MemorySegment nextafter$address() {
        return nextafter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double nextafter(double __x, double __y)
     * }
     */
    public static double nextafter(double __x, double __y) {
        var mh$ = nextafter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nextafter", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __nextafter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__nextafter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __nextafter(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __nextafter$descriptor() {
        return __nextafter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __nextafter(double __x, double __y)
     * }
     */
    public static MethodHandle __nextafter$handle() {
        return __nextafter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __nextafter(double __x, double __y)
     * }
     */
    public static MemorySegment __nextafter$address() {
        return __nextafter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __nextafter(double __x, double __y)
     * }
     */
    public static double __nextafter(double __x, double __y) {
        var mh$ = __nextafter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__nextafter", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remainder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("remainder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double remainder(double __x, double __y)
     * }
     */
    public static FunctionDescriptor remainder$descriptor() {
        return remainder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double remainder(double __x, double __y)
     * }
     */
    public static MethodHandle remainder$handle() {
        return remainder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double remainder(double __x, double __y)
     * }
     */
    public static MemorySegment remainder$address() {
        return remainder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double remainder(double __x, double __y)
     * }
     */
    public static double remainder(double __x, double __y) {
        var mh$ = remainder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remainder", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __remainder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__remainder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __remainder(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __remainder$descriptor() {
        return __remainder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __remainder(double __x, double __y)
     * }
     */
    public static MethodHandle __remainder$handle() {
        return __remainder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __remainder(double __x, double __y)
     * }
     */
    public static MemorySegment __remainder$address() {
        return __remainder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __remainder(double __x, double __y)
     * }
     */
    public static double __remainder(double __x, double __y) {
        var mh$ = __remainder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__remainder", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalbn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalbn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double scalbn(double __x, int __n)
     * }
     */
    public static FunctionDescriptor scalbn$descriptor() {
        return scalbn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double scalbn(double __x, int __n)
     * }
     */
    public static MethodHandle scalbn$handle() {
        return scalbn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double scalbn(double __x, int __n)
     * }
     */
    public static MemorySegment scalbn$address() {
        return scalbn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double scalbn(double __x, int __n)
     * }
     */
    public static double scalbn(double __x, int __n) {
        var mh$ = scalbn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalbn", __x, __n);
            }
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __scalbn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__scalbn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __scalbn(double __x, int __n)
     * }
     */
    public static FunctionDescriptor __scalbn$descriptor() {
        return __scalbn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __scalbn(double __x, int __n)
     * }
     */
    public static MethodHandle __scalbn$handle() {
        return __scalbn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __scalbn(double __x, int __n)
     * }
     */
    public static MemorySegment __scalbn$address() {
        return __scalbn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __scalbn(double __x, int __n)
     * }
     */
    public static double __scalbn(double __x, int __n) {
        var mh$ = __scalbn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__scalbn", __x, __n);
            }
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ilogb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ilogb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ilogb(double __x)
     * }
     */
    public static FunctionDescriptor ilogb$descriptor() {
        return ilogb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ilogb(double __x)
     * }
     */
    public static MethodHandle ilogb$handle() {
        return ilogb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ilogb(double __x)
     * }
     */
    public static MemorySegment ilogb$address() {
        return ilogb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ilogb(double __x)
     * }
     */
    public static int ilogb(double __x) {
        var mh$ = ilogb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ilogb", __x);
            }
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __ilogb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__ilogb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __ilogb(double __x)
     * }
     */
    public static FunctionDescriptor __ilogb$descriptor() {
        return __ilogb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __ilogb(double __x)
     * }
     */
    public static MethodHandle __ilogb$handle() {
        return __ilogb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __ilogb(double __x)
     * }
     */
    public static MemorySegment __ilogb$address() {
        return __ilogb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __ilogb(double __x)
     * }
     */
    public static int __ilogb(double __x) {
        var mh$ = __ilogb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__ilogb", __x);
            }
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalbln {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalbln");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double scalbln(double __x, long __n)
     * }
     */
    public static FunctionDescriptor scalbln$descriptor() {
        return scalbln.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double scalbln(double __x, long __n)
     * }
     */
    public static MethodHandle scalbln$handle() {
        return scalbln.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double scalbln(double __x, long __n)
     * }
     */
    public static MemorySegment scalbln$address() {
        return scalbln.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double scalbln(double __x, long __n)
     * }
     */
    public static double scalbln(double __x, long __n) {
        var mh$ = scalbln.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalbln", __x, __n);
            }
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __scalbln {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__scalbln");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __scalbln(double __x, long __n)
     * }
     */
    public static FunctionDescriptor __scalbln$descriptor() {
        return __scalbln.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __scalbln(double __x, long __n)
     * }
     */
    public static MethodHandle __scalbln$handle() {
        return __scalbln.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __scalbln(double __x, long __n)
     * }
     */
    public static MemorySegment __scalbln$address() {
        return __scalbln.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __scalbln(double __x, long __n)
     * }
     */
    public static double __scalbln(double __x, long __n) {
        var mh$ = __scalbln.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__scalbln", __x, __n);
            }
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nearbyint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nearbyint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double nearbyint(double __x)
     * }
     */
    public static FunctionDescriptor nearbyint$descriptor() {
        return nearbyint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double nearbyint(double __x)
     * }
     */
    public static MethodHandle nearbyint$handle() {
        return nearbyint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double nearbyint(double __x)
     * }
     */
    public static MemorySegment nearbyint$address() {
        return nearbyint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double nearbyint(double __x)
     * }
     */
    public static double nearbyint(double __x) {
        var mh$ = nearbyint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nearbyint", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __nearbyint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__nearbyint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __nearbyint(double __x)
     * }
     */
    public static FunctionDescriptor __nearbyint$descriptor() {
        return __nearbyint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __nearbyint(double __x)
     * }
     */
    public static MethodHandle __nearbyint$handle() {
        return __nearbyint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __nearbyint(double __x)
     * }
     */
    public static MemorySegment __nearbyint$address() {
        return __nearbyint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __nearbyint(double __x)
     * }
     */
    public static double __nearbyint(double __x) {
        var mh$ = __nearbyint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__nearbyint", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("round");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double round(double __x)
     * }
     */
    public static FunctionDescriptor round$descriptor() {
        return round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double round(double __x)
     * }
     */
    public static MethodHandle round$handle() {
        return round.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double round(double __x)
     * }
     */
    public static MemorySegment round$address() {
        return round.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double round(double __x)
     * }
     */
    public static double round(double __x) {
        var mh$ = round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("round", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__round");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __round(double __x)
     * }
     */
    public static FunctionDescriptor __round$descriptor() {
        return __round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __round(double __x)
     * }
     */
    public static MethodHandle __round$handle() {
        return __round.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __round(double __x)
     * }
     */
    public static MemorySegment __round$address() {
        return __round.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __round(double __x)
     * }
     */
    public static double __round(double __x) {
        var mh$ = __round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__round", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class trunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("trunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double trunc(double __x)
     * }
     */
    public static FunctionDescriptor trunc$descriptor() {
        return trunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double trunc(double __x)
     * }
     */
    public static MethodHandle trunc$handle() {
        return trunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double trunc(double __x)
     * }
     */
    public static MemorySegment trunc$address() {
        return trunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double trunc(double __x)
     * }
     */
    public static double trunc(double __x) {
        var mh$ = trunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("trunc", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __trunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__trunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __trunc(double __x)
     * }
     */
    public static FunctionDescriptor __trunc$descriptor() {
        return __trunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __trunc(double __x)
     * }
     */
    public static MethodHandle __trunc$handle() {
        return __trunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __trunc(double __x)
     * }
     */
    public static MemorySegment __trunc$address() {
        return __trunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __trunc(double __x)
     * }
     */
    public static double __trunc(double __x) {
        var mh$ = __trunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__trunc", __x);
            }
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remquo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("remquo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double remquo(double __x, double __y, int *__quo)
     * }
     */
    public static FunctionDescriptor remquo$descriptor() {
        return remquo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double remquo(double __x, double __y, int *__quo)
     * }
     */
    public static MethodHandle remquo$handle() {
        return remquo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double remquo(double __x, double __y, int *__quo)
     * }
     */
    public static MemorySegment remquo$address() {
        return remquo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double remquo(double __x, double __y, int *__quo)
     * }
     */
    public static double remquo(double __x, double __y, MemorySegment __quo) {
        var mh$ = remquo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remquo", __x, __y, __quo);
            }
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __remquo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__remquo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __remquo(double __x, double __y, int *__quo)
     * }
     */
    public static FunctionDescriptor __remquo$descriptor() {
        return __remquo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __remquo(double __x, double __y, int *__quo)
     * }
     */
    public static MethodHandle __remquo$handle() {
        return __remquo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __remquo(double __x, double __y, int *__quo)
     * }
     */
    public static MemorySegment __remquo$address() {
        return __remquo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __remquo(double __x, double __y, int *__quo)
     * }
     */
    public static double __remquo(double __x, double __y, MemorySegment __quo) {
        var mh$ = __remquo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__remquo", __x, __y, __quo);
            }
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lrint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lrint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long lrint(double __x)
     * }
     */
    public static FunctionDescriptor lrint$descriptor() {
        return lrint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long lrint(double __x)
     * }
     */
    public static MethodHandle lrint$handle() {
        return lrint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long lrint(double __x)
     * }
     */
    public static MemorySegment lrint$address() {
        return lrint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long lrint(double __x)
     * }
     */
    public static long lrint(double __x) {
        var mh$ = lrint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lrint", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __lrint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__lrint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long __lrint(double __x)
     * }
     */
    public static FunctionDescriptor __lrint$descriptor() {
        return __lrint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long __lrint(double __x)
     * }
     */
    public static MethodHandle __lrint$handle() {
        return __lrint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long __lrint(double __x)
     * }
     */
    public static MemorySegment __lrint$address() {
        return __lrint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long __lrint(double __x)
     * }
     */
    public static long __lrint(double __x) {
        var mh$ = __lrint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__lrint", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llrint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG_LONG,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("llrint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long llrint(double __x)
     * }
     */
    public static FunctionDescriptor llrint$descriptor() {
        return llrint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long llrint(double __x)
     * }
     */
    public static MethodHandle llrint$handle() {
        return llrint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long llrint(double __x)
     * }
     */
    public static MemorySegment llrint$address() {
        return llrint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long llrint(double __x)
     * }
     */
    public static long llrint(double __x) {
        var mh$ = llrint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llrint", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __llrint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG_LONG,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__llrint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long __llrint(double __x)
     * }
     */
    public static FunctionDescriptor __llrint$descriptor() {
        return __llrint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long __llrint(double __x)
     * }
     */
    public static MethodHandle __llrint$handle() {
        return __llrint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long __llrint(double __x)
     * }
     */
    public static MemorySegment __llrint$address() {
        return __llrint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long __llrint(double __x)
     * }
     */
    public static long __llrint(double __x) {
        var mh$ = __llrint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__llrint", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lround {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lround");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long lround(double __x)
     * }
     */
    public static FunctionDescriptor lround$descriptor() {
        return lround.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long lround(double __x)
     * }
     */
    public static MethodHandle lround$handle() {
        return lround.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long lround(double __x)
     * }
     */
    public static MemorySegment lround$address() {
        return lround.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long lround(double __x)
     * }
     */
    public static long lround(double __x) {
        var mh$ = lround.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lround", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __lround {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__lround");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long __lround(double __x)
     * }
     */
    public static FunctionDescriptor __lround$descriptor() {
        return __lround.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long __lround(double __x)
     * }
     */
    public static MethodHandle __lround$handle() {
        return __lround.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long __lround(double __x)
     * }
     */
    public static MemorySegment __lround$address() {
        return __lround.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long __lround(double __x)
     * }
     */
    public static long __lround(double __x) {
        var mh$ = __lround.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__lround", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llround {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG_LONG,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("llround");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long llround(double __x)
     * }
     */
    public static FunctionDescriptor llround$descriptor() {
        return llround.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long llround(double __x)
     * }
     */
    public static MethodHandle llround$handle() {
        return llround.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long llround(double __x)
     * }
     */
    public static MemorySegment llround$address() {
        return llround.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long llround(double __x)
     * }
     */
    public static long llround(double __x) {
        var mh$ = llround.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llround", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __llround {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG_LONG,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__llround");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long __llround(double __x)
     * }
     */
    public static FunctionDescriptor __llround$descriptor() {
        return __llround.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long __llround(double __x)
     * }
     */
    public static MethodHandle __llround$handle() {
        return __llround.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long __llround(double __x)
     * }
     */
    public static MemorySegment __llround$address() {
        return __llround.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long __llround(double __x)
     * }
     */
    public static long __llround(double __x) {
        var mh$ = __llround.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__llround", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fdim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double fdim(double __x, double __y)
     * }
     */
    public static FunctionDescriptor fdim$descriptor() {
        return fdim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double fdim(double __x, double __y)
     * }
     */
    public static MethodHandle fdim$handle() {
        return fdim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double fdim(double __x, double __y)
     * }
     */
    public static MemorySegment fdim$address() {
        return fdim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double fdim(double __x, double __y)
     * }
     */
    public static double fdim(double __x, double __y) {
        var mh$ = fdim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdim", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fdim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fdim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __fdim(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __fdim$descriptor() {
        return __fdim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __fdim(double __x, double __y)
     * }
     */
    public static MethodHandle __fdim$handle() {
        return __fdim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __fdim(double __x, double __y)
     * }
     */
    public static MemorySegment __fdim$address() {
        return __fdim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __fdim(double __x, double __y)
     * }
     */
    public static double __fdim(double __x, double __y) {
        var mh$ = __fdim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fdim", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double fmax(double __x, double __y)
     * }
     */
    public static FunctionDescriptor fmax$descriptor() {
        return fmax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double fmax(double __x, double __y)
     * }
     */
    public static MethodHandle fmax$handle() {
        return fmax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double fmax(double __x, double __y)
     * }
     */
    public static MemorySegment fmax$address() {
        return fmax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double fmax(double __x, double __y)
     * }
     */
    public static double fmax(double __x, double __y) {
        var mh$ = fmax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmax", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fmax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fmax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __fmax(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __fmax$descriptor() {
        return __fmax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __fmax(double __x, double __y)
     * }
     */
    public static MethodHandle __fmax$handle() {
        return __fmax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __fmax(double __x, double __y)
     * }
     */
    public static MemorySegment __fmax$address() {
        return __fmax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __fmax(double __x, double __y)
     * }
     */
    public static double __fmax(double __x, double __y) {
        var mh$ = __fmax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fmax", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double fmin(double __x, double __y)
     * }
     */
    public static FunctionDescriptor fmin$descriptor() {
        return fmin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double fmin(double __x, double __y)
     * }
     */
    public static MethodHandle fmin$handle() {
        return fmin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double fmin(double __x, double __y)
     * }
     */
    public static MemorySegment fmin$address() {
        return fmin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double fmin(double __x, double __y)
     * }
     */
    public static double fmin(double __x, double __y) {
        var mh$ = fmin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmin", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fmin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fmin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __fmin(double __x, double __y)
     * }
     */
    public static FunctionDescriptor __fmin$descriptor() {
        return __fmin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __fmin(double __x, double __y)
     * }
     */
    public static MethodHandle __fmin$handle() {
        return __fmin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __fmin(double __x, double __y)
     * }
     */
    public static MemorySegment __fmin$address() {
        return __fmin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __fmin(double __x, double __y)
     * }
     */
    public static double __fmin(double __x, double __y) {
        var mh$ = __fmin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fmin", __x, __y);
            }
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double fma(double __x, double __y, double __z)
     * }
     */
    public static FunctionDescriptor fma$descriptor() {
        return fma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double fma(double __x, double __y, double __z)
     * }
     */
    public static MethodHandle fma$handle() {
        return fma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double fma(double __x, double __y, double __z)
     * }
     */
    public static MemorySegment fma$address() {
        return fma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double fma(double __x, double __y, double __z)
     * }
     */
    public static double fma(double __x, double __y, double __z) {
        var mh$ = fma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fma", __x, __y, __z);
            }
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __fma(double __x, double __y, double __z)
     * }
     */
    public static FunctionDescriptor __fma$descriptor() {
        return __fma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __fma(double __x, double __y, double __z)
     * }
     */
    public static MethodHandle __fma$handle() {
        return __fma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __fma(double __x, double __y, double __z)
     * }
     */
    public static MemorySegment __fma$address() {
        return __fma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __fma(double __x, double __y, double __z)
     * }
     */
    public static double __fma(double __x, double __y, double __z) {
        var mh$ = __fma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fma", __x, __y, __z);
            }
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double scalb(double __x, double __n)
     * }
     */
    public static FunctionDescriptor scalb$descriptor() {
        return scalb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double scalb(double __x, double __n)
     * }
     */
    public static MethodHandle scalb$handle() {
        return scalb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double scalb(double __x, double __n)
     * }
     */
    public static MemorySegment scalb$address() {
        return scalb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double scalb(double __x, double __n)
     * }
     */
    public static double scalb(double __x, double __n) {
        var mh$ = scalb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalb", __x, __n);
            }
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __scalb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE,
            webgpu_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__scalb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double __scalb(double __x, double __n)
     * }
     */
    public static FunctionDescriptor __scalb$descriptor() {
        return __scalb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double __scalb(double __x, double __n)
     * }
     */
    public static MethodHandle __scalb$handle() {
        return __scalb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double __scalb(double __x, double __n)
     * }
     */
    public static MemorySegment __scalb$address() {
        return __scalb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double __scalb(double __x, double __n)
     * }
     */
    public static double __scalb(double __x, double __n) {
        var mh$ = __scalb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__scalb", __x, __n);
            }
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fpclassifyf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fpclassifyf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __fpclassifyf(float __value)
     * }
     */
    public static FunctionDescriptor __fpclassifyf$descriptor() {
        return __fpclassifyf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __fpclassifyf(float __value)
     * }
     */
    public static MethodHandle __fpclassifyf$handle() {
        return __fpclassifyf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __fpclassifyf(float __value)
     * }
     */
    public static MemorySegment __fpclassifyf$address() {
        return __fpclassifyf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __fpclassifyf(float __value)
     * }
     */
    public static int __fpclassifyf(float __value) {
        var mh$ = __fpclassifyf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fpclassifyf", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __signbitf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__signbitf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __signbitf(float __value)
     * }
     */
    public static FunctionDescriptor __signbitf$descriptor() {
        return __signbitf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __signbitf(float __value)
     * }
     */
    public static MethodHandle __signbitf$handle() {
        return __signbitf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __signbitf(float __value)
     * }
     */
    public static MemorySegment __signbitf$address() {
        return __signbitf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __signbitf(float __value)
     * }
     */
    public static int __signbitf(float __value) {
        var mh$ = __signbitf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__signbitf", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __isinff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__isinff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __isinff(float __value)
     * }
     */
    public static FunctionDescriptor __isinff$descriptor() {
        return __isinff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __isinff(float __value)
     * }
     */
    public static MethodHandle __isinff$handle() {
        return __isinff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __isinff(float __value)
     * }
     */
    public static MemorySegment __isinff$address() {
        return __isinff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __isinff(float __value)
     * }
     */
    public static int __isinff(float __value) {
        var mh$ = __isinff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__isinff", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __finitef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__finitef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __finitef(float __value)
     * }
     */
    public static FunctionDescriptor __finitef$descriptor() {
        return __finitef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __finitef(float __value)
     * }
     */
    public static MethodHandle __finitef$handle() {
        return __finitef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __finitef(float __value)
     * }
     */
    public static MemorySegment __finitef$address() {
        return __finitef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __finitef(float __value)
     * }
     */
    public static int __finitef(float __value) {
        var mh$ = __finitef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__finitef", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __isnanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__isnanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __isnanf(float __value)
     * }
     */
    public static FunctionDescriptor __isnanf$descriptor() {
        return __isnanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __isnanf(float __value)
     * }
     */
    public static MethodHandle __isnanf$handle() {
        return __isnanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __isnanf(float __value)
     * }
     */
    public static MemorySegment __isnanf$address() {
        return __isnanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __isnanf(float __value)
     * }
     */
    public static int __isnanf(float __value) {
        var mh$ = __isnanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__isnanf", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __iseqsigf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__iseqsigf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __iseqsigf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __iseqsigf$descriptor() {
        return __iseqsigf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __iseqsigf(float __x, float __y)
     * }
     */
    public static MethodHandle __iseqsigf$handle() {
        return __iseqsigf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __iseqsigf(float __x, float __y)
     * }
     */
    public static MemorySegment __iseqsigf$address() {
        return __iseqsigf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __iseqsigf(float __x, float __y)
     * }
     */
    public static int __iseqsigf(float __x, float __y) {
        var mh$ = __iseqsigf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__iseqsigf", __x, __y);
            }
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __issignalingf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__issignalingf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __issignalingf(float __value)
     * }
     */
    public static FunctionDescriptor __issignalingf$descriptor() {
        return __issignalingf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __issignalingf(float __value)
     * }
     */
    public static MethodHandle __issignalingf$handle() {
        return __issignalingf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __issignalingf(float __value)
     * }
     */
    public static MemorySegment __issignalingf$address() {
        return __issignalingf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __issignalingf(float __value)
     * }
     */
    public static int __issignalingf(float __value) {
        var mh$ = __issignalingf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__issignalingf", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class acosf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("acosf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float acosf(float __x)
     * }
     */
    public static FunctionDescriptor acosf$descriptor() {
        return acosf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float acosf(float __x)
     * }
     */
    public static MethodHandle acosf$handle() {
        return acosf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float acosf(float __x)
     * }
     */
    public static MemorySegment acosf$address() {
        return acosf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float acosf(float __x)
     * }
     */
    public static float acosf(float __x) {
        var mh$ = acosf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("acosf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __acosf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__acosf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __acosf(float __x)
     * }
     */
    public static FunctionDescriptor __acosf$descriptor() {
        return __acosf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __acosf(float __x)
     * }
     */
    public static MethodHandle __acosf$handle() {
        return __acosf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __acosf(float __x)
     * }
     */
    public static MemorySegment __acosf$address() {
        return __acosf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __acosf(float __x)
     * }
     */
    public static float __acosf(float __x) {
        var mh$ = __acosf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__acosf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asinf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("asinf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float asinf(float __x)
     * }
     */
    public static FunctionDescriptor asinf$descriptor() {
        return asinf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float asinf(float __x)
     * }
     */
    public static MethodHandle asinf$handle() {
        return asinf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float asinf(float __x)
     * }
     */
    public static MemorySegment asinf$address() {
        return asinf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float asinf(float __x)
     * }
     */
    public static float asinf(float __x) {
        var mh$ = asinf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asinf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __asinf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__asinf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __asinf(float __x)
     * }
     */
    public static FunctionDescriptor __asinf$descriptor() {
        return __asinf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __asinf(float __x)
     * }
     */
    public static MethodHandle __asinf$handle() {
        return __asinf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __asinf(float __x)
     * }
     */
    public static MemorySegment __asinf$address() {
        return __asinf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __asinf(float __x)
     * }
     */
    public static float __asinf(float __x) {
        var mh$ = __asinf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__asinf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float atanf(float __x)
     * }
     */
    public static FunctionDescriptor atanf$descriptor() {
        return atanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float atanf(float __x)
     * }
     */
    public static MethodHandle atanf$handle() {
        return atanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float atanf(float __x)
     * }
     */
    public static MemorySegment atanf$address() {
        return atanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float atanf(float __x)
     * }
     */
    public static float atanf(float __x) {
        var mh$ = atanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atanf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __atanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__atanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __atanf(float __x)
     * }
     */
    public static FunctionDescriptor __atanf$descriptor() {
        return __atanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __atanf(float __x)
     * }
     */
    public static MethodHandle __atanf$handle() {
        return __atanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __atanf(float __x)
     * }
     */
    public static MemorySegment __atanf$address() {
        return __atanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __atanf(float __x)
     * }
     */
    public static float __atanf(float __x) {
        var mh$ = __atanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__atanf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atan2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atan2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float atan2f(float __y, float __x)
     * }
     */
    public static FunctionDescriptor atan2f$descriptor() {
        return atan2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float atan2f(float __y, float __x)
     * }
     */
    public static MethodHandle atan2f$handle() {
        return atan2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float atan2f(float __y, float __x)
     * }
     */
    public static MemorySegment atan2f$address() {
        return atan2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float atan2f(float __y, float __x)
     * }
     */
    public static float atan2f(float __y, float __x) {
        var mh$ = atan2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atan2f", __y, __x);
            }
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __atan2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__atan2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __atan2f(float __y, float __x)
     * }
     */
    public static FunctionDescriptor __atan2f$descriptor() {
        return __atan2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __atan2f(float __y, float __x)
     * }
     */
    public static MethodHandle __atan2f$handle() {
        return __atan2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __atan2f(float __y, float __x)
     * }
     */
    public static MemorySegment __atan2f$address() {
        return __atan2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __atan2f(float __y, float __x)
     * }
     */
    public static float __atan2f(float __y, float __x) {
        var mh$ = __atan2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__atan2f", __y, __x);
            }
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cosf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cosf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float cosf(float __x)
     * }
     */
    public static FunctionDescriptor cosf$descriptor() {
        return cosf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float cosf(float __x)
     * }
     */
    public static MethodHandle cosf$handle() {
        return cosf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float cosf(float __x)
     * }
     */
    public static MemorySegment cosf$address() {
        return cosf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float cosf(float __x)
     * }
     */
    public static float cosf(float __x) {
        var mh$ = cosf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cosf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __cosf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__cosf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __cosf(float __x)
     * }
     */
    public static FunctionDescriptor __cosf$descriptor() {
        return __cosf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __cosf(float __x)
     * }
     */
    public static MethodHandle __cosf$handle() {
        return __cosf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __cosf(float __x)
     * }
     */
    public static MemorySegment __cosf$address() {
        return __cosf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __cosf(float __x)
     * }
     */
    public static float __cosf(float __x) {
        var mh$ = __cosf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__cosf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sinf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sinf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float sinf(float __x)
     * }
     */
    public static FunctionDescriptor sinf$descriptor() {
        return sinf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float sinf(float __x)
     * }
     */
    public static MethodHandle sinf$handle() {
        return sinf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float sinf(float __x)
     * }
     */
    public static MemorySegment sinf$address() {
        return sinf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float sinf(float __x)
     * }
     */
    public static float sinf(float __x) {
        var mh$ = sinf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sinf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sinf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__sinf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __sinf(float __x)
     * }
     */
    public static FunctionDescriptor __sinf$descriptor() {
        return __sinf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __sinf(float __x)
     * }
     */
    public static MethodHandle __sinf$handle() {
        return __sinf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __sinf(float __x)
     * }
     */
    public static MemorySegment __sinf$address() {
        return __sinf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __sinf(float __x)
     * }
     */
    public static float __sinf(float __x) {
        var mh$ = __sinf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sinf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float tanf(float __x)
     * }
     */
    public static FunctionDescriptor tanf$descriptor() {
        return tanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float tanf(float __x)
     * }
     */
    public static MethodHandle tanf$handle() {
        return tanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float tanf(float __x)
     * }
     */
    public static MemorySegment tanf$address() {
        return tanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float tanf(float __x)
     * }
     */
    public static float tanf(float __x) {
        var mh$ = tanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tanf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __tanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__tanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __tanf(float __x)
     * }
     */
    public static FunctionDescriptor __tanf$descriptor() {
        return __tanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __tanf(float __x)
     * }
     */
    public static MethodHandle __tanf$handle() {
        return __tanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __tanf(float __x)
     * }
     */
    public static MemorySegment __tanf$address() {
        return __tanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __tanf(float __x)
     * }
     */
    public static float __tanf(float __x) {
        var mh$ = __tanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__tanf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class coshf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("coshf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float coshf(float __x)
     * }
     */
    public static FunctionDescriptor coshf$descriptor() {
        return coshf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float coshf(float __x)
     * }
     */
    public static MethodHandle coshf$handle() {
        return coshf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float coshf(float __x)
     * }
     */
    public static MemorySegment coshf$address() {
        return coshf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float coshf(float __x)
     * }
     */
    public static float coshf(float __x) {
        var mh$ = coshf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("coshf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __coshf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__coshf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __coshf(float __x)
     * }
     */
    public static FunctionDescriptor __coshf$descriptor() {
        return __coshf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __coshf(float __x)
     * }
     */
    public static MethodHandle __coshf$handle() {
        return __coshf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __coshf(float __x)
     * }
     */
    public static MemorySegment __coshf$address() {
        return __coshf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __coshf(float __x)
     * }
     */
    public static float __coshf(float __x) {
        var mh$ = __coshf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__coshf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sinhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sinhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float sinhf(float __x)
     * }
     */
    public static FunctionDescriptor sinhf$descriptor() {
        return sinhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float sinhf(float __x)
     * }
     */
    public static MethodHandle sinhf$handle() {
        return sinhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float sinhf(float __x)
     * }
     */
    public static MemorySegment sinhf$address() {
        return sinhf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float sinhf(float __x)
     * }
     */
    public static float sinhf(float __x) {
        var mh$ = sinhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sinhf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sinhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__sinhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __sinhf(float __x)
     * }
     */
    public static FunctionDescriptor __sinhf$descriptor() {
        return __sinhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __sinhf(float __x)
     * }
     */
    public static MethodHandle __sinhf$handle() {
        return __sinhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __sinhf(float __x)
     * }
     */
    public static MemorySegment __sinhf$address() {
        return __sinhf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __sinhf(float __x)
     * }
     */
    public static float __sinhf(float __x) {
        var mh$ = __sinhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sinhf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tanhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tanhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float tanhf(float __x)
     * }
     */
    public static FunctionDescriptor tanhf$descriptor() {
        return tanhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float tanhf(float __x)
     * }
     */
    public static MethodHandle tanhf$handle() {
        return tanhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float tanhf(float __x)
     * }
     */
    public static MemorySegment tanhf$address() {
        return tanhf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float tanhf(float __x)
     * }
     */
    public static float tanhf(float __x) {
        var mh$ = tanhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tanhf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __tanhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__tanhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __tanhf(float __x)
     * }
     */
    public static FunctionDescriptor __tanhf$descriptor() {
        return __tanhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __tanhf(float __x)
     * }
     */
    public static MethodHandle __tanhf$handle() {
        return __tanhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __tanhf(float __x)
     * }
     */
    public static MemorySegment __tanhf$address() {
        return __tanhf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __tanhf(float __x)
     * }
     */
    public static float __tanhf(float __x) {
        var mh$ = __tanhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__tanhf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class acoshf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("acoshf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float acoshf(float __x)
     * }
     */
    public static FunctionDescriptor acoshf$descriptor() {
        return acoshf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float acoshf(float __x)
     * }
     */
    public static MethodHandle acoshf$handle() {
        return acoshf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float acoshf(float __x)
     * }
     */
    public static MemorySegment acoshf$address() {
        return acoshf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float acoshf(float __x)
     * }
     */
    public static float acoshf(float __x) {
        var mh$ = acoshf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("acoshf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __acoshf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__acoshf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __acoshf(float __x)
     * }
     */
    public static FunctionDescriptor __acoshf$descriptor() {
        return __acoshf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __acoshf(float __x)
     * }
     */
    public static MethodHandle __acoshf$handle() {
        return __acoshf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __acoshf(float __x)
     * }
     */
    public static MemorySegment __acoshf$address() {
        return __acoshf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __acoshf(float __x)
     * }
     */
    public static float __acoshf(float __x) {
        var mh$ = __acoshf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__acoshf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asinhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("asinhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float asinhf(float __x)
     * }
     */
    public static FunctionDescriptor asinhf$descriptor() {
        return asinhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float asinhf(float __x)
     * }
     */
    public static MethodHandle asinhf$handle() {
        return asinhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float asinhf(float __x)
     * }
     */
    public static MemorySegment asinhf$address() {
        return asinhf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float asinhf(float __x)
     * }
     */
    public static float asinhf(float __x) {
        var mh$ = asinhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asinhf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __asinhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__asinhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __asinhf(float __x)
     * }
     */
    public static FunctionDescriptor __asinhf$descriptor() {
        return __asinhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __asinhf(float __x)
     * }
     */
    public static MethodHandle __asinhf$handle() {
        return __asinhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __asinhf(float __x)
     * }
     */
    public static MemorySegment __asinhf$address() {
        return __asinhf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __asinhf(float __x)
     * }
     */
    public static float __asinhf(float __x) {
        var mh$ = __asinhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__asinhf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atanhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atanhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float atanhf(float __x)
     * }
     */
    public static FunctionDescriptor atanhf$descriptor() {
        return atanhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float atanhf(float __x)
     * }
     */
    public static MethodHandle atanhf$handle() {
        return atanhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float atanhf(float __x)
     * }
     */
    public static MemorySegment atanhf$address() {
        return atanhf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float atanhf(float __x)
     * }
     */
    public static float atanhf(float __x) {
        var mh$ = atanhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atanhf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __atanhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__atanhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __atanhf(float __x)
     * }
     */
    public static FunctionDescriptor __atanhf$descriptor() {
        return __atanhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __atanhf(float __x)
     * }
     */
    public static MethodHandle __atanhf$handle() {
        return __atanhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __atanhf(float __x)
     * }
     */
    public static MemorySegment __atanhf$address() {
        return __atanhf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __atanhf(float __x)
     * }
     */
    public static float __atanhf(float __x) {
        var mh$ = __atanhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__atanhf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class expf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("expf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float expf(float __x)
     * }
     */
    public static FunctionDescriptor expf$descriptor() {
        return expf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float expf(float __x)
     * }
     */
    public static MethodHandle expf$handle() {
        return expf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float expf(float __x)
     * }
     */
    public static MemorySegment expf$address() {
        return expf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float expf(float __x)
     * }
     */
    public static float expf(float __x) {
        var mh$ = expf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("expf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __expf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__expf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __expf(float __x)
     * }
     */
    public static FunctionDescriptor __expf$descriptor() {
        return __expf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __expf(float __x)
     * }
     */
    public static MethodHandle __expf$handle() {
        return __expf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __expf(float __x)
     * }
     */
    public static MemorySegment __expf$address() {
        return __expf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __expf(float __x)
     * }
     */
    public static float __expf(float __x) {
        var mh$ = __expf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__expf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class frexpf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("frexpf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float frexpf(float __x, int *__exponent)
     * }
     */
    public static FunctionDescriptor frexpf$descriptor() {
        return frexpf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float frexpf(float __x, int *__exponent)
     * }
     */
    public static MethodHandle frexpf$handle() {
        return frexpf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float frexpf(float __x, int *__exponent)
     * }
     */
    public static MemorySegment frexpf$address() {
        return frexpf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float frexpf(float __x, int *__exponent)
     * }
     */
    public static float frexpf(float __x, MemorySegment __exponent) {
        var mh$ = frexpf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("frexpf", __x, __exponent);
            }
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __frexpf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__frexpf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __frexpf(float __x, int *__exponent)
     * }
     */
    public static FunctionDescriptor __frexpf$descriptor() {
        return __frexpf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __frexpf(float __x, int *__exponent)
     * }
     */
    public static MethodHandle __frexpf$handle() {
        return __frexpf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __frexpf(float __x, int *__exponent)
     * }
     */
    public static MemorySegment __frexpf$address() {
        return __frexpf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __frexpf(float __x, int *__exponent)
     * }
     */
    public static float __frexpf(float __x, MemorySegment __exponent) {
        var mh$ = __frexpf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__frexpf", __x, __exponent);
            }
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ldexpf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ldexpf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ldexpf(float __x, int __exponent)
     * }
     */
    public static FunctionDescriptor ldexpf$descriptor() {
        return ldexpf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ldexpf(float __x, int __exponent)
     * }
     */
    public static MethodHandle ldexpf$handle() {
        return ldexpf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ldexpf(float __x, int __exponent)
     * }
     */
    public static MemorySegment ldexpf$address() {
        return ldexpf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ldexpf(float __x, int __exponent)
     * }
     */
    public static float ldexpf(float __x, int __exponent) {
        var mh$ = ldexpf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ldexpf", __x, __exponent);
            }
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __ldexpf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__ldexpf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __ldexpf(float __x, int __exponent)
     * }
     */
    public static FunctionDescriptor __ldexpf$descriptor() {
        return __ldexpf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __ldexpf(float __x, int __exponent)
     * }
     */
    public static MethodHandle __ldexpf$handle() {
        return __ldexpf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __ldexpf(float __x, int __exponent)
     * }
     */
    public static MemorySegment __ldexpf$address() {
        return __ldexpf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __ldexpf(float __x, int __exponent)
     * }
     */
    public static float __ldexpf(float __x, int __exponent) {
        var mh$ = __ldexpf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__ldexpf", __x, __exponent);
            }
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class logf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("logf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float logf(float __x)
     * }
     */
    public static FunctionDescriptor logf$descriptor() {
        return logf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float logf(float __x)
     * }
     */
    public static MethodHandle logf$handle() {
        return logf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float logf(float __x)
     * }
     */
    public static MemorySegment logf$address() {
        return logf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float logf(float __x)
     * }
     */
    public static float logf(float __x) {
        var mh$ = logf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("logf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __logf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__logf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __logf(float __x)
     * }
     */
    public static FunctionDescriptor __logf$descriptor() {
        return __logf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __logf(float __x)
     * }
     */
    public static MethodHandle __logf$handle() {
        return __logf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __logf(float __x)
     * }
     */
    public static MemorySegment __logf$address() {
        return __logf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __logf(float __x)
     * }
     */
    public static float __logf(float __x) {
        var mh$ = __logf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__logf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log10f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log10f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float log10f(float __x)
     * }
     */
    public static FunctionDescriptor log10f$descriptor() {
        return log10f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float log10f(float __x)
     * }
     */
    public static MethodHandle log10f$handle() {
        return log10f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float log10f(float __x)
     * }
     */
    public static MemorySegment log10f$address() {
        return log10f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float log10f(float __x)
     * }
     */
    public static float log10f(float __x) {
        var mh$ = log10f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log10f", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __log10f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__log10f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __log10f(float __x)
     * }
     */
    public static FunctionDescriptor __log10f$descriptor() {
        return __log10f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __log10f(float __x)
     * }
     */
    public static MethodHandle __log10f$handle() {
        return __log10f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __log10f(float __x)
     * }
     */
    public static MemorySegment __log10f$address() {
        return __log10f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __log10f(float __x)
     * }
     */
    public static float __log10f(float __x) {
        var mh$ = __log10f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__log10f", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class modff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("modff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float modff(float __x, float *__iptr)
     * }
     */
    public static FunctionDescriptor modff$descriptor() {
        return modff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float modff(float __x, float *__iptr)
     * }
     */
    public static MethodHandle modff$handle() {
        return modff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float modff(float __x, float *__iptr)
     * }
     */
    public static MemorySegment modff$address() {
        return modff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float modff(float __x, float *__iptr)
     * }
     */
    public static float modff(float __x, MemorySegment __iptr) {
        var mh$ = modff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("modff", __x, __iptr);
            }
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __modff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__modff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __modff(float __x, float *__iptr)
     * }
     */
    public static FunctionDescriptor __modff$descriptor() {
        return __modff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __modff(float __x, float *__iptr)
     * }
     */
    public static MethodHandle __modff$handle() {
        return __modff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __modff(float __x, float *__iptr)
     * }
     */
    public static MemorySegment __modff$address() {
        return __modff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __modff(float __x, float *__iptr)
     * }
     */
    public static float __modff(float __x, MemorySegment __iptr) {
        var mh$ = __modff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__modff", __x, __iptr);
            }
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class expm1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("expm1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float expm1f(float __x)
     * }
     */
    public static FunctionDescriptor expm1f$descriptor() {
        return expm1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float expm1f(float __x)
     * }
     */
    public static MethodHandle expm1f$handle() {
        return expm1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float expm1f(float __x)
     * }
     */
    public static MemorySegment expm1f$address() {
        return expm1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float expm1f(float __x)
     * }
     */
    public static float expm1f(float __x) {
        var mh$ = expm1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("expm1f", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __expm1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__expm1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __expm1f(float __x)
     * }
     */
    public static FunctionDescriptor __expm1f$descriptor() {
        return __expm1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __expm1f(float __x)
     * }
     */
    public static MethodHandle __expm1f$handle() {
        return __expm1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __expm1f(float __x)
     * }
     */
    public static MemorySegment __expm1f$address() {
        return __expm1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __expm1f(float __x)
     * }
     */
    public static float __expm1f(float __x) {
        var mh$ = __expm1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__expm1f", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log1pf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log1pf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float log1pf(float __x)
     * }
     */
    public static FunctionDescriptor log1pf$descriptor() {
        return log1pf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float log1pf(float __x)
     * }
     */
    public static MethodHandle log1pf$handle() {
        return log1pf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float log1pf(float __x)
     * }
     */
    public static MemorySegment log1pf$address() {
        return log1pf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float log1pf(float __x)
     * }
     */
    public static float log1pf(float __x) {
        var mh$ = log1pf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log1pf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __log1pf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__log1pf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __log1pf(float __x)
     * }
     */
    public static FunctionDescriptor __log1pf$descriptor() {
        return __log1pf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __log1pf(float __x)
     * }
     */
    public static MethodHandle __log1pf$handle() {
        return __log1pf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __log1pf(float __x)
     * }
     */
    public static MemorySegment __log1pf$address() {
        return __log1pf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __log1pf(float __x)
     * }
     */
    public static float __log1pf(float __x) {
        var mh$ = __log1pf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__log1pf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class logbf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("logbf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float logbf(float __x)
     * }
     */
    public static FunctionDescriptor logbf$descriptor() {
        return logbf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float logbf(float __x)
     * }
     */
    public static MethodHandle logbf$handle() {
        return logbf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float logbf(float __x)
     * }
     */
    public static MemorySegment logbf$address() {
        return logbf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float logbf(float __x)
     * }
     */
    public static float logbf(float __x) {
        var mh$ = logbf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("logbf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __logbf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__logbf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __logbf(float __x)
     * }
     */
    public static FunctionDescriptor __logbf$descriptor() {
        return __logbf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __logbf(float __x)
     * }
     */
    public static MethodHandle __logbf$handle() {
        return __logbf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __logbf(float __x)
     * }
     */
    public static MemorySegment __logbf$address() {
        return __logbf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __logbf(float __x)
     * }
     */
    public static float __logbf(float __x) {
        var mh$ = __logbf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__logbf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exp2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("exp2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float exp2f(float __x)
     * }
     */
    public static FunctionDescriptor exp2f$descriptor() {
        return exp2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float exp2f(float __x)
     * }
     */
    public static MethodHandle exp2f$handle() {
        return exp2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float exp2f(float __x)
     * }
     */
    public static MemorySegment exp2f$address() {
        return exp2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float exp2f(float __x)
     * }
     */
    public static float exp2f(float __x) {
        var mh$ = exp2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exp2f", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __exp2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__exp2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __exp2f(float __x)
     * }
     */
    public static FunctionDescriptor __exp2f$descriptor() {
        return __exp2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __exp2f(float __x)
     * }
     */
    public static MethodHandle __exp2f$handle() {
        return __exp2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __exp2f(float __x)
     * }
     */
    public static MemorySegment __exp2f$address() {
        return __exp2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __exp2f(float __x)
     * }
     */
    public static float __exp2f(float __x) {
        var mh$ = __exp2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__exp2f", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float log2f(float __x)
     * }
     */
    public static FunctionDescriptor log2f$descriptor() {
        return log2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float log2f(float __x)
     * }
     */
    public static MethodHandle log2f$handle() {
        return log2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float log2f(float __x)
     * }
     */
    public static MemorySegment log2f$address() {
        return log2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float log2f(float __x)
     * }
     */
    public static float log2f(float __x) {
        var mh$ = log2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log2f", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __log2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__log2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __log2f(float __x)
     * }
     */
    public static FunctionDescriptor __log2f$descriptor() {
        return __log2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __log2f(float __x)
     * }
     */
    public static MethodHandle __log2f$handle() {
        return __log2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __log2f(float __x)
     * }
     */
    public static MemorySegment __log2f$address() {
        return __log2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __log2f(float __x)
     * }
     */
    public static float __log2f(float __x) {
        var mh$ = __log2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__log2f", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class powf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("powf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float powf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor powf$descriptor() {
        return powf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float powf(float __x, float __y)
     * }
     */
    public static MethodHandle powf$handle() {
        return powf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float powf(float __x, float __y)
     * }
     */
    public static MemorySegment powf$address() {
        return powf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float powf(float __x, float __y)
     * }
     */
    public static float powf(float __x, float __y) {
        var mh$ = powf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("powf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __powf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__powf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __powf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __powf$descriptor() {
        return __powf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __powf(float __x, float __y)
     * }
     */
    public static MethodHandle __powf$handle() {
        return __powf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __powf(float __x, float __y)
     * }
     */
    public static MemorySegment __powf$address() {
        return __powf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __powf(float __x, float __y)
     * }
     */
    public static float __powf(float __x, float __y) {
        var mh$ = __powf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__powf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqrtf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sqrtf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float sqrtf(float __x)
     * }
     */
    public static FunctionDescriptor sqrtf$descriptor() {
        return sqrtf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float sqrtf(float __x)
     * }
     */
    public static MethodHandle sqrtf$handle() {
        return sqrtf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float sqrtf(float __x)
     * }
     */
    public static MemorySegment sqrtf$address() {
        return sqrtf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float sqrtf(float __x)
     * }
     */
    public static float sqrtf(float __x) {
        var mh$ = sqrtf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqrtf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sqrtf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__sqrtf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __sqrtf(float __x)
     * }
     */
    public static FunctionDescriptor __sqrtf$descriptor() {
        return __sqrtf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __sqrtf(float __x)
     * }
     */
    public static MethodHandle __sqrtf$handle() {
        return __sqrtf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __sqrtf(float __x)
     * }
     */
    public static MemorySegment __sqrtf$address() {
        return __sqrtf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __sqrtf(float __x)
     * }
     */
    public static float __sqrtf(float __x) {
        var mh$ = __sqrtf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sqrtf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hypotf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("hypotf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float hypotf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor hypotf$descriptor() {
        return hypotf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float hypotf(float __x, float __y)
     * }
     */
    public static MethodHandle hypotf$handle() {
        return hypotf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float hypotf(float __x, float __y)
     * }
     */
    public static MemorySegment hypotf$address() {
        return hypotf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float hypotf(float __x, float __y)
     * }
     */
    public static float hypotf(float __x, float __y) {
        var mh$ = hypotf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hypotf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __hypotf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__hypotf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __hypotf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __hypotf$descriptor() {
        return __hypotf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __hypotf(float __x, float __y)
     * }
     */
    public static MethodHandle __hypotf$handle() {
        return __hypotf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __hypotf(float __x, float __y)
     * }
     */
    public static MemorySegment __hypotf$address() {
        return __hypotf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __hypotf(float __x, float __y)
     * }
     */
    public static float __hypotf(float __x, float __y) {
        var mh$ = __hypotf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__hypotf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cbrtf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cbrtf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float cbrtf(float __x)
     * }
     */
    public static FunctionDescriptor cbrtf$descriptor() {
        return cbrtf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float cbrtf(float __x)
     * }
     */
    public static MethodHandle cbrtf$handle() {
        return cbrtf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float cbrtf(float __x)
     * }
     */
    public static MemorySegment cbrtf$address() {
        return cbrtf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float cbrtf(float __x)
     * }
     */
    public static float cbrtf(float __x) {
        var mh$ = cbrtf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cbrtf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __cbrtf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__cbrtf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __cbrtf(float __x)
     * }
     */
    public static FunctionDescriptor __cbrtf$descriptor() {
        return __cbrtf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __cbrtf(float __x)
     * }
     */
    public static MethodHandle __cbrtf$handle() {
        return __cbrtf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __cbrtf(float __x)
     * }
     */
    public static MemorySegment __cbrtf$address() {
        return __cbrtf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __cbrtf(float __x)
     * }
     */
    public static float __cbrtf(float __x) {
        var mh$ = __cbrtf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__cbrtf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ceilf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ceilf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ceilf(float __x)
     * }
     */
    public static FunctionDescriptor ceilf$descriptor() {
        return ceilf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ceilf(float __x)
     * }
     */
    public static MethodHandle ceilf$handle() {
        return ceilf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ceilf(float __x)
     * }
     */
    public static MemorySegment ceilf$address() {
        return ceilf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ceilf(float __x)
     * }
     */
    public static float ceilf(float __x) {
        var mh$ = ceilf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ceilf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __ceilf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__ceilf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __ceilf(float __x)
     * }
     */
    public static FunctionDescriptor __ceilf$descriptor() {
        return __ceilf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __ceilf(float __x)
     * }
     */
    public static MethodHandle __ceilf$handle() {
        return __ceilf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __ceilf(float __x)
     * }
     */
    public static MemorySegment __ceilf$address() {
        return __ceilf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __ceilf(float __x)
     * }
     */
    public static float __ceilf(float __x) {
        var mh$ = __ceilf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__ceilf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fabsf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fabsf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float fabsf(float __x)
     * }
     */
    public static FunctionDescriptor fabsf$descriptor() {
        return fabsf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float fabsf(float __x)
     * }
     */
    public static MethodHandle fabsf$handle() {
        return fabsf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float fabsf(float __x)
     * }
     */
    public static MemorySegment fabsf$address() {
        return fabsf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float fabsf(float __x)
     * }
     */
    public static float fabsf(float __x) {
        var mh$ = fabsf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fabsf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fabsf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fabsf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __fabsf(float __x)
     * }
     */
    public static FunctionDescriptor __fabsf$descriptor() {
        return __fabsf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __fabsf(float __x)
     * }
     */
    public static MethodHandle __fabsf$handle() {
        return __fabsf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __fabsf(float __x)
     * }
     */
    public static MemorySegment __fabsf$address() {
        return __fabsf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __fabsf(float __x)
     * }
     */
    public static float __fabsf(float __x) {
        var mh$ = __fabsf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fabsf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class floorf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("floorf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float floorf(float __x)
     * }
     */
    public static FunctionDescriptor floorf$descriptor() {
        return floorf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float floorf(float __x)
     * }
     */
    public static MethodHandle floorf$handle() {
        return floorf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float floorf(float __x)
     * }
     */
    public static MemorySegment floorf$address() {
        return floorf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float floorf(float __x)
     * }
     */
    public static float floorf(float __x) {
        var mh$ = floorf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("floorf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __floorf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__floorf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __floorf(float __x)
     * }
     */
    public static FunctionDescriptor __floorf$descriptor() {
        return __floorf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __floorf(float __x)
     * }
     */
    public static MethodHandle __floorf$handle() {
        return __floorf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __floorf(float __x)
     * }
     */
    public static MemorySegment __floorf$address() {
        return __floorf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __floorf(float __x)
     * }
     */
    public static float __floorf(float __x) {
        var mh$ = __floorf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__floorf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmodf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmodf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float fmodf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor fmodf$descriptor() {
        return fmodf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float fmodf(float __x, float __y)
     * }
     */
    public static MethodHandle fmodf$handle() {
        return fmodf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float fmodf(float __x, float __y)
     * }
     */
    public static MemorySegment fmodf$address() {
        return fmodf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float fmodf(float __x, float __y)
     * }
     */
    public static float fmodf(float __x, float __y) {
        var mh$ = fmodf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmodf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fmodf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fmodf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __fmodf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __fmodf$descriptor() {
        return __fmodf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __fmodf(float __x, float __y)
     * }
     */
    public static MethodHandle __fmodf$handle() {
        return __fmodf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __fmodf(float __x, float __y)
     * }
     */
    public static MemorySegment __fmodf$address() {
        return __fmodf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __fmodf(float __x, float __y)
     * }
     */
    public static float __fmodf(float __x, float __y) {
        var mh$ = __fmodf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fmodf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isinff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("isinff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int isinff(float __value)
     * }
     */
    public static FunctionDescriptor isinff$descriptor() {
        return isinff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int isinff(float __value)
     * }
     */
    public static MethodHandle isinff$handle() {
        return isinff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int isinff(float __value)
     * }
     */
    public static MemorySegment isinff$address() {
        return isinff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int isinff(float __value)
     * }
     */
    public static int isinff(float __value) {
        var mh$ = isinff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isinff", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class finitef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("finitef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int finitef(float __value)
     * }
     */
    public static FunctionDescriptor finitef$descriptor() {
        return finitef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int finitef(float __value)
     * }
     */
    public static MethodHandle finitef$handle() {
        return finitef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int finitef(float __value)
     * }
     */
    public static MemorySegment finitef$address() {
        return finitef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int finitef(float __value)
     * }
     */
    public static int finitef(float __value) {
        var mh$ = finitef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("finitef", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class dremf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("dremf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float dremf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor dremf$descriptor() {
        return dremf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float dremf(float __x, float __y)
     * }
     */
    public static MethodHandle dremf$handle() {
        return dremf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float dremf(float __x, float __y)
     * }
     */
    public static MemorySegment dremf$address() {
        return dremf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float dremf(float __x, float __y)
     * }
     */
    public static float dremf(float __x, float __y) {
        var mh$ = dremf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dremf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __dremf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__dremf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __dremf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __dremf$descriptor() {
        return __dremf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __dremf(float __x, float __y)
     * }
     */
    public static MethodHandle __dremf$handle() {
        return __dremf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __dremf(float __x, float __y)
     * }
     */
    public static MemorySegment __dremf$address() {
        return __dremf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __dremf(float __x, float __y)
     * }
     */
    public static float __dremf(float __x, float __y) {
        var mh$ = __dremf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__dremf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class significandf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("significandf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float significandf(float __x)
     * }
     */
    public static FunctionDescriptor significandf$descriptor() {
        return significandf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float significandf(float __x)
     * }
     */
    public static MethodHandle significandf$handle() {
        return significandf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float significandf(float __x)
     * }
     */
    public static MemorySegment significandf$address() {
        return significandf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float significandf(float __x)
     * }
     */
    public static float significandf(float __x) {
        var mh$ = significandf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("significandf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __significandf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__significandf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __significandf(float __x)
     * }
     */
    public static FunctionDescriptor __significandf$descriptor() {
        return __significandf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __significandf(float __x)
     * }
     */
    public static MethodHandle __significandf$handle() {
        return __significandf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __significandf(float __x)
     * }
     */
    public static MemorySegment __significandf$address() {
        return __significandf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __significandf(float __x)
     * }
     */
    public static float __significandf(float __x) {
        var mh$ = __significandf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__significandf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class copysignf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("copysignf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float copysignf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor copysignf$descriptor() {
        return copysignf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float copysignf(float __x, float __y)
     * }
     */
    public static MethodHandle copysignf$handle() {
        return copysignf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float copysignf(float __x, float __y)
     * }
     */
    public static MemorySegment copysignf$address() {
        return copysignf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float copysignf(float __x, float __y)
     * }
     */
    public static float copysignf(float __x, float __y) {
        var mh$ = copysignf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("copysignf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __copysignf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__copysignf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __copysignf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __copysignf$descriptor() {
        return __copysignf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __copysignf(float __x, float __y)
     * }
     */
    public static MethodHandle __copysignf$handle() {
        return __copysignf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __copysignf(float __x, float __y)
     * }
     */
    public static MemorySegment __copysignf$address() {
        return __copysignf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __copysignf(float __x, float __y)
     * }
     */
    public static float __copysignf(float __x, float __y) {
        var mh$ = __copysignf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__copysignf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float nanf(const char *__tagb)
     * }
     */
    public static FunctionDescriptor nanf$descriptor() {
        return nanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float nanf(const char *__tagb)
     * }
     */
    public static MethodHandle nanf$handle() {
        return nanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float nanf(const char *__tagb)
     * }
     */
    public static MemorySegment nanf$address() {
        return nanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float nanf(const char *__tagb)
     * }
     */
    public static float nanf(MemorySegment __tagb) {
        var mh$ = nanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nanf", __tagb);
            }
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __nanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__nanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __nanf(const char *__tagb)
     * }
     */
    public static FunctionDescriptor __nanf$descriptor() {
        return __nanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __nanf(const char *__tagb)
     * }
     */
    public static MethodHandle __nanf$handle() {
        return __nanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __nanf(const char *__tagb)
     * }
     */
    public static MemorySegment __nanf$address() {
        return __nanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __nanf(const char *__tagb)
     * }
     */
    public static float __nanf(MemorySegment __tagb) {
        var mh$ = __nanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__nanf", __tagb);
            }
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isnanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("isnanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int isnanf(float __value)
     * }
     */
    public static FunctionDescriptor isnanf$descriptor() {
        return isnanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int isnanf(float __value)
     * }
     */
    public static MethodHandle isnanf$handle() {
        return isnanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int isnanf(float __value)
     * }
     */
    public static MemorySegment isnanf$address() {
        return isnanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int isnanf(float __value)
     * }
     */
    public static int isnanf(float __value) {
        var mh$ = isnanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isnanf", __value);
            }
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class j0f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("j0f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float j0f(float)
     * }
     */
    public static FunctionDescriptor j0f$descriptor() {
        return j0f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float j0f(float)
     * }
     */
    public static MethodHandle j0f$handle() {
        return j0f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float j0f(float)
     * }
     */
    public static MemorySegment j0f$address() {
        return j0f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float j0f(float)
     * }
     */
    public static float j0f(float x0) {
        var mh$ = j0f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("j0f", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __j0f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__j0f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __j0f(float)
     * }
     */
    public static FunctionDescriptor __j0f$descriptor() {
        return __j0f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __j0f(float)
     * }
     */
    public static MethodHandle __j0f$handle() {
        return __j0f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __j0f(float)
     * }
     */
    public static MemorySegment __j0f$address() {
        return __j0f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __j0f(float)
     * }
     */
    public static float __j0f(float x0) {
        var mh$ = __j0f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__j0f", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class j1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("j1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float j1f(float)
     * }
     */
    public static FunctionDescriptor j1f$descriptor() {
        return j1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float j1f(float)
     * }
     */
    public static MethodHandle j1f$handle() {
        return j1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float j1f(float)
     * }
     */
    public static MemorySegment j1f$address() {
        return j1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float j1f(float)
     * }
     */
    public static float j1f(float x0) {
        var mh$ = j1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("j1f", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __j1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__j1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __j1f(float)
     * }
     */
    public static FunctionDescriptor __j1f$descriptor() {
        return __j1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __j1f(float)
     * }
     */
    public static MethodHandle __j1f$handle() {
        return __j1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __j1f(float)
     * }
     */
    public static MemorySegment __j1f$address() {
        return __j1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __j1f(float)
     * }
     */
    public static float __j1f(float x0) {
        var mh$ = __j1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__j1f", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class jnf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("jnf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float jnf(int, float)
     * }
     */
    public static FunctionDescriptor jnf$descriptor() {
        return jnf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float jnf(int, float)
     * }
     */
    public static MethodHandle jnf$handle() {
        return jnf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float jnf(int, float)
     * }
     */
    public static MemorySegment jnf$address() {
        return jnf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float jnf(int, float)
     * }
     */
    public static float jnf(int x0, float x1) {
        var mh$ = jnf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("jnf", x0, x1);
            }
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __jnf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__jnf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __jnf(int, float)
     * }
     */
    public static FunctionDescriptor __jnf$descriptor() {
        return __jnf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __jnf(int, float)
     * }
     */
    public static MethodHandle __jnf$handle() {
        return __jnf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __jnf(int, float)
     * }
     */
    public static MemorySegment __jnf$address() {
        return __jnf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __jnf(int, float)
     * }
     */
    public static float __jnf(int x0, float x1) {
        var mh$ = __jnf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__jnf", x0, x1);
            }
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class y0f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("y0f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float y0f(float)
     * }
     */
    public static FunctionDescriptor y0f$descriptor() {
        return y0f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float y0f(float)
     * }
     */
    public static MethodHandle y0f$handle() {
        return y0f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float y0f(float)
     * }
     */
    public static MemorySegment y0f$address() {
        return y0f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float y0f(float)
     * }
     */
    public static float y0f(float x0) {
        var mh$ = y0f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("y0f", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __y0f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__y0f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __y0f(float)
     * }
     */
    public static FunctionDescriptor __y0f$descriptor() {
        return __y0f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __y0f(float)
     * }
     */
    public static MethodHandle __y0f$handle() {
        return __y0f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __y0f(float)
     * }
     */
    public static MemorySegment __y0f$address() {
        return __y0f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __y0f(float)
     * }
     */
    public static float __y0f(float x0) {
        var mh$ = __y0f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__y0f", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class y1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("y1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float y1f(float)
     * }
     */
    public static FunctionDescriptor y1f$descriptor() {
        return y1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float y1f(float)
     * }
     */
    public static MethodHandle y1f$handle() {
        return y1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float y1f(float)
     * }
     */
    public static MemorySegment y1f$address() {
        return y1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float y1f(float)
     * }
     */
    public static float y1f(float x0) {
        var mh$ = y1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("y1f", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __y1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__y1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __y1f(float)
     * }
     */
    public static FunctionDescriptor __y1f$descriptor() {
        return __y1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __y1f(float)
     * }
     */
    public static MethodHandle __y1f$handle() {
        return __y1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __y1f(float)
     * }
     */
    public static MemorySegment __y1f$address() {
        return __y1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __y1f(float)
     * }
     */
    public static float __y1f(float x0) {
        var mh$ = __y1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__y1f", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ynf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ynf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ynf(int, float)
     * }
     */
    public static FunctionDescriptor ynf$descriptor() {
        return ynf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ynf(int, float)
     * }
     */
    public static MethodHandle ynf$handle() {
        return ynf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ynf(int, float)
     * }
     */
    public static MemorySegment ynf$address() {
        return ynf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ynf(int, float)
     * }
     */
    public static float ynf(int x0, float x1) {
        var mh$ = ynf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ynf", x0, x1);
            }
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __ynf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__ynf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __ynf(int, float)
     * }
     */
    public static FunctionDescriptor __ynf$descriptor() {
        return __ynf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __ynf(int, float)
     * }
     */
    public static MethodHandle __ynf$handle() {
        return __ynf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __ynf(int, float)
     * }
     */
    public static MemorySegment __ynf$address() {
        return __ynf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __ynf(int, float)
     * }
     */
    public static float __ynf(int x0, float x1) {
        var mh$ = __ynf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__ynf", x0, x1);
            }
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("erff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float erff(float)
     * }
     */
    public static FunctionDescriptor erff$descriptor() {
        return erff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float erff(float)
     * }
     */
    public static MethodHandle erff$handle() {
        return erff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float erff(float)
     * }
     */
    public static MemorySegment erff$address() {
        return erff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float erff(float)
     * }
     */
    public static float erff(float x0) {
        var mh$ = erff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erff", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __erff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__erff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __erff(float)
     * }
     */
    public static FunctionDescriptor __erff$descriptor() {
        return __erff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __erff(float)
     * }
     */
    public static MethodHandle __erff$handle() {
        return __erff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __erff(float)
     * }
     */
    public static MemorySegment __erff$address() {
        return __erff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __erff(float)
     * }
     */
    public static float __erff(float x0) {
        var mh$ = __erff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__erff", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erfcf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("erfcf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float erfcf(float)
     * }
     */
    public static FunctionDescriptor erfcf$descriptor() {
        return erfcf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float erfcf(float)
     * }
     */
    public static MethodHandle erfcf$handle() {
        return erfcf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float erfcf(float)
     * }
     */
    public static MemorySegment erfcf$address() {
        return erfcf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float erfcf(float)
     * }
     */
    public static float erfcf(float x0) {
        var mh$ = erfcf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erfcf", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __erfcf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__erfcf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __erfcf(float)
     * }
     */
    public static FunctionDescriptor __erfcf$descriptor() {
        return __erfcf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __erfcf(float)
     * }
     */
    public static MethodHandle __erfcf$handle() {
        return __erfcf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __erfcf(float)
     * }
     */
    public static MemorySegment __erfcf$address() {
        return __erfcf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __erfcf(float)
     * }
     */
    public static float __erfcf(float x0) {
        var mh$ = __erfcf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__erfcf", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lgammaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lgammaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float lgammaf(float)
     * }
     */
    public static FunctionDescriptor lgammaf$descriptor() {
        return lgammaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float lgammaf(float)
     * }
     */
    public static MethodHandle lgammaf$handle() {
        return lgammaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float lgammaf(float)
     * }
     */
    public static MemorySegment lgammaf$address() {
        return lgammaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float lgammaf(float)
     * }
     */
    public static float lgammaf(float x0) {
        var mh$ = lgammaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lgammaf", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __lgammaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__lgammaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __lgammaf(float)
     * }
     */
    public static FunctionDescriptor __lgammaf$descriptor() {
        return __lgammaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __lgammaf(float)
     * }
     */
    public static MethodHandle __lgammaf$handle() {
        return __lgammaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __lgammaf(float)
     * }
     */
    public static MemorySegment __lgammaf$address() {
        return __lgammaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __lgammaf(float)
     * }
     */
    public static float __lgammaf(float x0) {
        var mh$ = __lgammaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__lgammaf", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tgammaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tgammaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float tgammaf(float)
     * }
     */
    public static FunctionDescriptor tgammaf$descriptor() {
        return tgammaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float tgammaf(float)
     * }
     */
    public static MethodHandle tgammaf$handle() {
        return tgammaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float tgammaf(float)
     * }
     */
    public static MemorySegment tgammaf$address() {
        return tgammaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float tgammaf(float)
     * }
     */
    public static float tgammaf(float x0) {
        var mh$ = tgammaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tgammaf", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __tgammaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__tgammaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __tgammaf(float)
     * }
     */
    public static FunctionDescriptor __tgammaf$descriptor() {
        return __tgammaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __tgammaf(float)
     * }
     */
    public static MethodHandle __tgammaf$handle() {
        return __tgammaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __tgammaf(float)
     * }
     */
    public static MemorySegment __tgammaf$address() {
        return __tgammaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __tgammaf(float)
     * }
     */
    public static float __tgammaf(float x0) {
        var mh$ = __tgammaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__tgammaf", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gammaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("gammaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float gammaf(float)
     * }
     */
    public static FunctionDescriptor gammaf$descriptor() {
        return gammaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float gammaf(float)
     * }
     */
    public static MethodHandle gammaf$handle() {
        return gammaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float gammaf(float)
     * }
     */
    public static MemorySegment gammaf$address() {
        return gammaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float gammaf(float)
     * }
     */
    public static float gammaf(float x0) {
        var mh$ = gammaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gammaf", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __gammaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__gammaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __gammaf(float)
     * }
     */
    public static FunctionDescriptor __gammaf$descriptor() {
        return __gammaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __gammaf(float)
     * }
     */
    public static MethodHandle __gammaf$handle() {
        return __gammaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __gammaf(float)
     * }
     */
    public static MemorySegment __gammaf$address() {
        return __gammaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __gammaf(float)
     * }
     */
    public static float __gammaf(float x0) {
        var mh$ = __gammaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__gammaf", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lgammaf_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lgammaf_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float lgammaf_r(float, int *__signgamp)
     * }
     */
    public static FunctionDescriptor lgammaf_r$descriptor() {
        return lgammaf_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float lgammaf_r(float, int *__signgamp)
     * }
     */
    public static MethodHandle lgammaf_r$handle() {
        return lgammaf_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float lgammaf_r(float, int *__signgamp)
     * }
     */
    public static MemorySegment lgammaf_r$address() {
        return lgammaf_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float lgammaf_r(float, int *__signgamp)
     * }
     */
    public static float lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = lgammaf_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lgammaf_r", x0, __signgamp);
            }
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __lgammaf_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__lgammaf_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __lgammaf_r(float, int *__signgamp)
     * }
     */
    public static FunctionDescriptor __lgammaf_r$descriptor() {
        return __lgammaf_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __lgammaf_r(float, int *__signgamp)
     * }
     */
    public static MethodHandle __lgammaf_r$handle() {
        return __lgammaf_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __lgammaf_r(float, int *__signgamp)
     * }
     */
    public static MemorySegment __lgammaf_r$address() {
        return __lgammaf_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __lgammaf_r(float, int *__signgamp)
     * }
     */
    public static float __lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = __lgammaf_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__lgammaf_r", x0, __signgamp);
            }
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("rintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float rintf(float __x)
     * }
     */
    public static FunctionDescriptor rintf$descriptor() {
        return rintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float rintf(float __x)
     * }
     */
    public static MethodHandle rintf$handle() {
        return rintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float rintf(float __x)
     * }
     */
    public static MemorySegment rintf$address() {
        return rintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float rintf(float __x)
     * }
     */
    public static float rintf(float __x) {
        var mh$ = rintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rintf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __rintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__rintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __rintf(float __x)
     * }
     */
    public static FunctionDescriptor __rintf$descriptor() {
        return __rintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __rintf(float __x)
     * }
     */
    public static MethodHandle __rintf$handle() {
        return __rintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __rintf(float __x)
     * }
     */
    public static MemorySegment __rintf$address() {
        return __rintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __rintf(float __x)
     * }
     */
    public static float __rintf(float __x) {
        var mh$ = __rintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__rintf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nextafterf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nextafterf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float nextafterf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor nextafterf$descriptor() {
        return nextafterf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float nextafterf(float __x, float __y)
     * }
     */
    public static MethodHandle nextafterf$handle() {
        return nextafterf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float nextafterf(float __x, float __y)
     * }
     */
    public static MemorySegment nextafterf$address() {
        return nextafterf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float nextafterf(float __x, float __y)
     * }
     */
    public static float nextafterf(float __x, float __y) {
        var mh$ = nextafterf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nextafterf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __nextafterf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__nextafterf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __nextafterf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __nextafterf$descriptor() {
        return __nextafterf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __nextafterf(float __x, float __y)
     * }
     */
    public static MethodHandle __nextafterf$handle() {
        return __nextafterf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __nextafterf(float __x, float __y)
     * }
     */
    public static MemorySegment __nextafterf$address() {
        return __nextafterf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __nextafterf(float __x, float __y)
     * }
     */
    public static float __nextafterf(float __x, float __y) {
        var mh$ = __nextafterf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__nextafterf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remainderf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("remainderf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float remainderf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor remainderf$descriptor() {
        return remainderf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float remainderf(float __x, float __y)
     * }
     */
    public static MethodHandle remainderf$handle() {
        return remainderf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float remainderf(float __x, float __y)
     * }
     */
    public static MemorySegment remainderf$address() {
        return remainderf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float remainderf(float __x, float __y)
     * }
     */
    public static float remainderf(float __x, float __y) {
        var mh$ = remainderf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remainderf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __remainderf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__remainderf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __remainderf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __remainderf$descriptor() {
        return __remainderf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __remainderf(float __x, float __y)
     * }
     */
    public static MethodHandle __remainderf$handle() {
        return __remainderf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __remainderf(float __x, float __y)
     * }
     */
    public static MemorySegment __remainderf$address() {
        return __remainderf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __remainderf(float __x, float __y)
     * }
     */
    public static float __remainderf(float __x, float __y) {
        var mh$ = __remainderf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__remainderf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalbnf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalbnf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float scalbnf(float __x, int __n)
     * }
     */
    public static FunctionDescriptor scalbnf$descriptor() {
        return scalbnf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float scalbnf(float __x, int __n)
     * }
     */
    public static MethodHandle scalbnf$handle() {
        return scalbnf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float scalbnf(float __x, int __n)
     * }
     */
    public static MemorySegment scalbnf$address() {
        return scalbnf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float scalbnf(float __x, int __n)
     * }
     */
    public static float scalbnf(float __x, int __n) {
        var mh$ = scalbnf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalbnf", __x, __n);
            }
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __scalbnf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__scalbnf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __scalbnf(float __x, int __n)
     * }
     */
    public static FunctionDescriptor __scalbnf$descriptor() {
        return __scalbnf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __scalbnf(float __x, int __n)
     * }
     */
    public static MethodHandle __scalbnf$handle() {
        return __scalbnf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __scalbnf(float __x, int __n)
     * }
     */
    public static MemorySegment __scalbnf$address() {
        return __scalbnf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __scalbnf(float __x, int __n)
     * }
     */
    public static float __scalbnf(float __x, int __n) {
        var mh$ = __scalbnf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__scalbnf", __x, __n);
            }
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ilogbf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ilogbf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ilogbf(float __x)
     * }
     */
    public static FunctionDescriptor ilogbf$descriptor() {
        return ilogbf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ilogbf(float __x)
     * }
     */
    public static MethodHandle ilogbf$handle() {
        return ilogbf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ilogbf(float __x)
     * }
     */
    public static MemorySegment ilogbf$address() {
        return ilogbf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ilogbf(float __x)
     * }
     */
    public static int ilogbf(float __x) {
        var mh$ = ilogbf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ilogbf", __x);
            }
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __ilogbf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__ilogbf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __ilogbf(float __x)
     * }
     */
    public static FunctionDescriptor __ilogbf$descriptor() {
        return __ilogbf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __ilogbf(float __x)
     * }
     */
    public static MethodHandle __ilogbf$handle() {
        return __ilogbf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __ilogbf(float __x)
     * }
     */
    public static MemorySegment __ilogbf$address() {
        return __ilogbf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __ilogbf(float __x)
     * }
     */
    public static int __ilogbf(float __x) {
        var mh$ = __ilogbf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__ilogbf", __x);
            }
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalblnf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalblnf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float scalblnf(float __x, long __n)
     * }
     */
    public static FunctionDescriptor scalblnf$descriptor() {
        return scalblnf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float scalblnf(float __x, long __n)
     * }
     */
    public static MethodHandle scalblnf$handle() {
        return scalblnf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float scalblnf(float __x, long __n)
     * }
     */
    public static MemorySegment scalblnf$address() {
        return scalblnf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float scalblnf(float __x, long __n)
     * }
     */
    public static float scalblnf(float __x, long __n) {
        var mh$ = scalblnf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalblnf", __x, __n);
            }
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __scalblnf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__scalblnf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __scalblnf(float __x, long __n)
     * }
     */
    public static FunctionDescriptor __scalblnf$descriptor() {
        return __scalblnf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __scalblnf(float __x, long __n)
     * }
     */
    public static MethodHandle __scalblnf$handle() {
        return __scalblnf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __scalblnf(float __x, long __n)
     * }
     */
    public static MemorySegment __scalblnf$address() {
        return __scalblnf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __scalblnf(float __x, long __n)
     * }
     */
    public static float __scalblnf(float __x, long __n) {
        var mh$ = __scalblnf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__scalblnf", __x, __n);
            }
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nearbyintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nearbyintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float nearbyintf(float __x)
     * }
     */
    public static FunctionDescriptor nearbyintf$descriptor() {
        return nearbyintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float nearbyintf(float __x)
     * }
     */
    public static MethodHandle nearbyintf$handle() {
        return nearbyintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float nearbyintf(float __x)
     * }
     */
    public static MemorySegment nearbyintf$address() {
        return nearbyintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float nearbyintf(float __x)
     * }
     */
    public static float nearbyintf(float __x) {
        var mh$ = nearbyintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nearbyintf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __nearbyintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__nearbyintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __nearbyintf(float __x)
     * }
     */
    public static FunctionDescriptor __nearbyintf$descriptor() {
        return __nearbyintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __nearbyintf(float __x)
     * }
     */
    public static MethodHandle __nearbyintf$handle() {
        return __nearbyintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __nearbyintf(float __x)
     * }
     */
    public static MemorySegment __nearbyintf$address() {
        return __nearbyintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __nearbyintf(float __x)
     * }
     */
    public static float __nearbyintf(float __x) {
        var mh$ = __nearbyintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__nearbyintf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class roundf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("roundf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float roundf(float __x)
     * }
     */
    public static FunctionDescriptor roundf$descriptor() {
        return roundf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float roundf(float __x)
     * }
     */
    public static MethodHandle roundf$handle() {
        return roundf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float roundf(float __x)
     * }
     */
    public static MemorySegment roundf$address() {
        return roundf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float roundf(float __x)
     * }
     */
    public static float roundf(float __x) {
        var mh$ = roundf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("roundf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __roundf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__roundf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __roundf(float __x)
     * }
     */
    public static FunctionDescriptor __roundf$descriptor() {
        return __roundf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __roundf(float __x)
     * }
     */
    public static MethodHandle __roundf$handle() {
        return __roundf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __roundf(float __x)
     * }
     */
    public static MemorySegment __roundf$address() {
        return __roundf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __roundf(float __x)
     * }
     */
    public static float __roundf(float __x) {
        var mh$ = __roundf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__roundf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class truncf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("truncf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float truncf(float __x)
     * }
     */
    public static FunctionDescriptor truncf$descriptor() {
        return truncf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float truncf(float __x)
     * }
     */
    public static MethodHandle truncf$handle() {
        return truncf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float truncf(float __x)
     * }
     */
    public static MemorySegment truncf$address() {
        return truncf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float truncf(float __x)
     * }
     */
    public static float truncf(float __x) {
        var mh$ = truncf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("truncf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __truncf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__truncf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __truncf(float __x)
     * }
     */
    public static FunctionDescriptor __truncf$descriptor() {
        return __truncf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __truncf(float __x)
     * }
     */
    public static MethodHandle __truncf$handle() {
        return __truncf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __truncf(float __x)
     * }
     */
    public static MemorySegment __truncf$address() {
        return __truncf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __truncf(float __x)
     * }
     */
    public static float __truncf(float __x) {
        var mh$ = __truncf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__truncf", __x);
            }
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remquof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("remquof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float remquof(float __x, float __y, int *__quo)
     * }
     */
    public static FunctionDescriptor remquof$descriptor() {
        return remquof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float remquof(float __x, float __y, int *__quo)
     * }
     */
    public static MethodHandle remquof$handle() {
        return remquof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float remquof(float __x, float __y, int *__quo)
     * }
     */
    public static MemorySegment remquof$address() {
        return remquof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float remquof(float __x, float __y, int *__quo)
     * }
     */
    public static float remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = remquof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remquof", __x, __y, __quo);
            }
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __remquof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__remquof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __remquof(float __x, float __y, int *__quo)
     * }
     */
    public static FunctionDescriptor __remquof$descriptor() {
        return __remquof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __remquof(float __x, float __y, int *__quo)
     * }
     */
    public static MethodHandle __remquof$handle() {
        return __remquof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __remquof(float __x, float __y, int *__quo)
     * }
     */
    public static MemorySegment __remquof$address() {
        return __remquof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __remquof(float __x, float __y, int *__quo)
     * }
     */
    public static float __remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = __remquof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__remquof", __x, __y, __quo);
            }
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lrintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lrintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long lrintf(float __x)
     * }
     */
    public static FunctionDescriptor lrintf$descriptor() {
        return lrintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long lrintf(float __x)
     * }
     */
    public static MethodHandle lrintf$handle() {
        return lrintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long lrintf(float __x)
     * }
     */
    public static MemorySegment lrintf$address() {
        return lrintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long lrintf(float __x)
     * }
     */
    public static long lrintf(float __x) {
        var mh$ = lrintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lrintf", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __lrintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__lrintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long __lrintf(float __x)
     * }
     */
    public static FunctionDescriptor __lrintf$descriptor() {
        return __lrintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long __lrintf(float __x)
     * }
     */
    public static MethodHandle __lrintf$handle() {
        return __lrintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long __lrintf(float __x)
     * }
     */
    public static MemorySegment __lrintf$address() {
        return __lrintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long __lrintf(float __x)
     * }
     */
    public static long __lrintf(float __x) {
        var mh$ = __lrintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__lrintf", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llrintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG_LONG,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("llrintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long llrintf(float __x)
     * }
     */
    public static FunctionDescriptor llrintf$descriptor() {
        return llrintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long llrintf(float __x)
     * }
     */
    public static MethodHandle llrintf$handle() {
        return llrintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long llrintf(float __x)
     * }
     */
    public static MemorySegment llrintf$address() {
        return llrintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long llrintf(float __x)
     * }
     */
    public static long llrintf(float __x) {
        var mh$ = llrintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llrintf", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __llrintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG_LONG,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__llrintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long __llrintf(float __x)
     * }
     */
    public static FunctionDescriptor __llrintf$descriptor() {
        return __llrintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long __llrintf(float __x)
     * }
     */
    public static MethodHandle __llrintf$handle() {
        return __llrintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long __llrintf(float __x)
     * }
     */
    public static MemorySegment __llrintf$address() {
        return __llrintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long __llrintf(float __x)
     * }
     */
    public static long __llrintf(float __x) {
        var mh$ = __llrintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__llrintf", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lroundf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lroundf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long lroundf(float __x)
     * }
     */
    public static FunctionDescriptor lroundf$descriptor() {
        return lroundf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long lroundf(float __x)
     * }
     */
    public static MethodHandle lroundf$handle() {
        return lroundf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long lroundf(float __x)
     * }
     */
    public static MemorySegment lroundf$address() {
        return lroundf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long lroundf(float __x)
     * }
     */
    public static long lroundf(float __x) {
        var mh$ = lroundf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lroundf", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __lroundf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__lroundf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long __lroundf(float __x)
     * }
     */
    public static FunctionDescriptor __lroundf$descriptor() {
        return __lroundf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long __lroundf(float __x)
     * }
     */
    public static MethodHandle __lroundf$handle() {
        return __lroundf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long __lroundf(float __x)
     * }
     */
    public static MemorySegment __lroundf$address() {
        return __lroundf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long __lroundf(float __x)
     * }
     */
    public static long __lroundf(float __x) {
        var mh$ = __lroundf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__lroundf", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llroundf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG_LONG,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("llroundf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long llroundf(float __x)
     * }
     */
    public static FunctionDescriptor llroundf$descriptor() {
        return llroundf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long llroundf(float __x)
     * }
     */
    public static MethodHandle llroundf$handle() {
        return llroundf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long llroundf(float __x)
     * }
     */
    public static MemorySegment llroundf$address() {
        return llroundf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long llroundf(float __x)
     * }
     */
    public static long llroundf(float __x) {
        var mh$ = llroundf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llroundf", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __llroundf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG_LONG,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__llroundf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long __llroundf(float __x)
     * }
     */
    public static FunctionDescriptor __llroundf$descriptor() {
        return __llroundf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long __llroundf(float __x)
     * }
     */
    public static MethodHandle __llroundf$handle() {
        return __llroundf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long long __llroundf(float __x)
     * }
     */
    public static MemorySegment __llroundf$address() {
        return __llroundf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long long __llroundf(float __x)
     * }
     */
    public static long __llroundf(float __x) {
        var mh$ = __llroundf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__llroundf", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdimf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fdimf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float fdimf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor fdimf$descriptor() {
        return fdimf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float fdimf(float __x, float __y)
     * }
     */
    public static MethodHandle fdimf$handle() {
        return fdimf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float fdimf(float __x, float __y)
     * }
     */
    public static MemorySegment fdimf$address() {
        return fdimf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float fdimf(float __x, float __y)
     * }
     */
    public static float fdimf(float __x, float __y) {
        var mh$ = fdimf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdimf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fdimf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fdimf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __fdimf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __fdimf$descriptor() {
        return __fdimf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __fdimf(float __x, float __y)
     * }
     */
    public static MethodHandle __fdimf$handle() {
        return __fdimf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __fdimf(float __x, float __y)
     * }
     */
    public static MemorySegment __fdimf$address() {
        return __fdimf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __fdimf(float __x, float __y)
     * }
     */
    public static float __fdimf(float __x, float __y) {
        var mh$ = __fdimf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fdimf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmaxf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmaxf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float fmaxf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor fmaxf$descriptor() {
        return fmaxf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float fmaxf(float __x, float __y)
     * }
     */
    public static MethodHandle fmaxf$handle() {
        return fmaxf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float fmaxf(float __x, float __y)
     * }
     */
    public static MemorySegment fmaxf$address() {
        return fmaxf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float fmaxf(float __x, float __y)
     * }
     */
    public static float fmaxf(float __x, float __y) {
        var mh$ = fmaxf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmaxf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fmaxf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fmaxf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __fmaxf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __fmaxf$descriptor() {
        return __fmaxf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __fmaxf(float __x, float __y)
     * }
     */
    public static MethodHandle __fmaxf$handle() {
        return __fmaxf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __fmaxf(float __x, float __y)
     * }
     */
    public static MemorySegment __fmaxf$address() {
        return __fmaxf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __fmaxf(float __x, float __y)
     * }
     */
    public static float __fmaxf(float __x, float __y) {
        var mh$ = __fmaxf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fmaxf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fminf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fminf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float fminf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor fminf$descriptor() {
        return fminf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float fminf(float __x, float __y)
     * }
     */
    public static MethodHandle fminf$handle() {
        return fminf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float fminf(float __x, float __y)
     * }
     */
    public static MemorySegment fminf$address() {
        return fminf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float fminf(float __x, float __y)
     * }
     */
    public static float fminf(float __x, float __y) {
        var mh$ = fminf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fminf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fminf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fminf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __fminf(float __x, float __y)
     * }
     */
    public static FunctionDescriptor __fminf$descriptor() {
        return __fminf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __fminf(float __x, float __y)
     * }
     */
    public static MethodHandle __fminf$handle() {
        return __fminf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __fminf(float __x, float __y)
     * }
     */
    public static MemorySegment __fminf$address() {
        return __fminf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __fminf(float __x, float __y)
     * }
     */
    public static float __fminf(float __x, float __y) {
        var mh$ = __fminf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fminf", __x, __y);
            }
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float fmaf(float __x, float __y, float __z)
     * }
     */
    public static FunctionDescriptor fmaf$descriptor() {
        return fmaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float fmaf(float __x, float __y, float __z)
     * }
     */
    public static MethodHandle fmaf$handle() {
        return fmaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float fmaf(float __x, float __y, float __z)
     * }
     */
    public static MemorySegment fmaf$address() {
        return fmaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float fmaf(float __x, float __y, float __z)
     * }
     */
    public static float fmaf(float __x, float __y, float __z) {
        var mh$ = fmaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmaf", __x, __y, __z);
            }
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fmaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fmaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __fmaf(float __x, float __y, float __z)
     * }
     */
    public static FunctionDescriptor __fmaf$descriptor() {
        return __fmaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __fmaf(float __x, float __y, float __z)
     * }
     */
    public static MethodHandle __fmaf$handle() {
        return __fmaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __fmaf(float __x, float __y, float __z)
     * }
     */
    public static MemorySegment __fmaf$address() {
        return __fmaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __fmaf(float __x, float __y, float __z)
     * }
     */
    public static float __fmaf(float __x, float __y, float __z) {
        var mh$ = __fmaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fmaf", __x, __y, __z);
            }
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalbf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalbf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float scalbf(float __x, float __n)
     * }
     */
    public static FunctionDescriptor scalbf$descriptor() {
        return scalbf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float scalbf(float __x, float __n)
     * }
     */
    public static MethodHandle scalbf$handle() {
        return scalbf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float scalbf(float __x, float __n)
     * }
     */
    public static MemorySegment scalbf$address() {
        return scalbf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float scalbf(float __x, float __n)
     * }
     */
    public static float scalbf(float __x, float __n) {
        var mh$ = scalbf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalbf", __x, __n);
            }
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __scalbf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT,
            webgpu_h.C_FLOAT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__scalbf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float __scalbf(float __x, float __n)
     * }
     */
    public static FunctionDescriptor __scalbf$descriptor() {
        return __scalbf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float __scalbf(float __x, float __n)
     * }
     */
    public static MethodHandle __scalbf$handle() {
        return __scalbf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float __scalbf(float __x, float __n)
     * }
     */
    public static MemorySegment __scalbf$address() {
        return __scalbf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float __scalbf(float __x, float __n)
     * }
     */
    public static float __scalbf(float __x, float __n) {
        var mh$ = __scalbf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__scalbf", __x, __n);
            }
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class signgam$constants {
        public static final OfInt LAYOUT = webgpu_h.C_INT;
        public static final MemorySegment SEGMENT = webgpu_h.findOrThrow("signgam").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int signgam
     * }
     */
    public static OfInt signgam$layout() {
        return signgam$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int signgam
     * }
     */
    public static MemorySegment signgam$segment() {
        return signgam$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int signgam
     * }
     */
    public static int signgam() {
        return signgam$constants.SEGMENT.get(signgam$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int signgam
     * }
     */
    public static void signgam(int varValue) {
        signgam$constants.SEGMENT.set(signgam$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef uint64_t WGPUFlags
     * }
     */
    public static final OfLong WGPUFlags = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint32_t WGPUBool
     * }
     */
    public static final OfInt WGPUBool = webgpu_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUAdapterImpl *WGPUAdapter
     * }
     */
    public static final AddressLayout WGPUAdapter = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUBindGroupImpl *WGPUBindGroup
     * }
     */
    public static final AddressLayout WGPUBindGroup = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUBindGroupLayoutImpl *WGPUBindGroupLayout
     * }
     */
    public static final AddressLayout WGPUBindGroupLayout = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUBufferImpl *WGPUBuffer
     * }
     */
    public static final AddressLayout WGPUBuffer = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUCommandBufferImpl *WGPUCommandBuffer
     * }
     */
    public static final AddressLayout WGPUCommandBuffer = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUCommandEncoderImpl *WGPUCommandEncoder
     * }
     */
    public static final AddressLayout WGPUCommandEncoder = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUComputePassEncoderImpl *WGPUComputePassEncoder
     * }
     */
    public static final AddressLayout WGPUComputePassEncoder = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUComputePipelineImpl *WGPUComputePipeline
     * }
     */
    public static final AddressLayout WGPUComputePipeline = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUDeviceImpl *WGPUDevice
     * }
     */
    public static final AddressLayout WGPUDevice = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUInstanceImpl *WGPUInstance
     * }
     */
    public static final AddressLayout WGPUInstance = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUPipelineLayoutImpl *WGPUPipelineLayout
     * }
     */
    public static final AddressLayout WGPUPipelineLayout = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUQuerySetImpl *WGPUQuerySet
     * }
     */
    public static final AddressLayout WGPUQuerySet = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUQueueImpl *WGPUQueue
     * }
     */
    public static final AddressLayout WGPUQueue = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPURenderBundleImpl *WGPURenderBundle
     * }
     */
    public static final AddressLayout WGPURenderBundle = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPURenderBundleEncoderImpl *WGPURenderBundleEncoder
     * }
     */
    public static final AddressLayout WGPURenderBundleEncoder = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPURenderPassEncoderImpl *WGPURenderPassEncoder
     * }
     */
    public static final AddressLayout WGPURenderPassEncoder = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPURenderPipelineImpl *WGPURenderPipeline
     * }
     */
    public static final AddressLayout WGPURenderPipeline = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUSamplerImpl *WGPUSampler
     * }
     */
    public static final AddressLayout WGPUSampler = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUShaderModuleImpl *WGPUShaderModule
     * }
     */
    public static final AddressLayout WGPUShaderModule = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUSurfaceImpl *WGPUSurface
     * }
     */
    public static final AddressLayout WGPUSurface = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUTextureImpl *WGPUTexture
     * }
     */
    public static final AddressLayout WGPUTexture = webgpu_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct WGPUTextureViewImpl *WGPUTextureView
     * }
     */
    public static final AddressLayout WGPUTextureView = webgpu_h.C_POINTER;
    private static final int WGPUAdapterType_DiscreteGPU = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUAdapterType.WGPUAdapterType_DiscreteGPU = 1
     * }
     */
    public static int WGPUAdapterType_DiscreteGPU() {
        return WGPUAdapterType_DiscreteGPU;
    }
    private static final int WGPUAdapterType_IntegratedGPU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUAdapterType.WGPUAdapterType_IntegratedGPU = 2
     * }
     */
    public static int WGPUAdapterType_IntegratedGPU() {
        return WGPUAdapterType_IntegratedGPU;
    }
    private static final int WGPUAdapterType_CPU = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUAdapterType.WGPUAdapterType_CPU = 3
     * }
     */
    public static int WGPUAdapterType_CPU() {
        return WGPUAdapterType_CPU;
    }
    private static final int WGPUAdapterType_Unknown = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUAdapterType.WGPUAdapterType_Unknown = 4
     * }
     */
    public static int WGPUAdapterType_Unknown() {
        return WGPUAdapterType_Unknown;
    }
    private static final int WGPUAdapterType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUAdapterType.WGPUAdapterType_Force32 = 2147483647
     * }
     */
    public static int WGPUAdapterType_Force32() {
        return WGPUAdapterType_Force32;
    }
    private static final int WGPUAddressMode_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUAddressMode.WGPUAddressMode_Undefined = 0
     * }
     */
    public static int WGPUAddressMode_Undefined() {
        return WGPUAddressMode_Undefined;
    }
    private static final int WGPUAddressMode_ClampToEdge = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUAddressMode.WGPUAddressMode_ClampToEdge = 1
     * }
     */
    public static int WGPUAddressMode_ClampToEdge() {
        return WGPUAddressMode_ClampToEdge;
    }
    private static final int WGPUAddressMode_Repeat = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUAddressMode.WGPUAddressMode_Repeat = 2
     * }
     */
    public static int WGPUAddressMode_Repeat() {
        return WGPUAddressMode_Repeat;
    }
    private static final int WGPUAddressMode_MirrorRepeat = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUAddressMode.WGPUAddressMode_MirrorRepeat = 3
     * }
     */
    public static int WGPUAddressMode_MirrorRepeat() {
        return WGPUAddressMode_MirrorRepeat;
    }
    private static final int WGPUAddressMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUAddressMode.WGPUAddressMode_Force32 = 2147483647
     * }
     */
    public static int WGPUAddressMode_Force32() {
        return WGPUAddressMode_Force32;
    }
    private static final int WGPUBackendType_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_Undefined = 0
     * }
     */
    public static int WGPUBackendType_Undefined() {
        return WGPUBackendType_Undefined;
    }
    private static final int WGPUBackendType_Null = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_Null = 1
     * }
     */
    public static int WGPUBackendType_Null() {
        return WGPUBackendType_Null;
    }
    private static final int WGPUBackendType_WebGPU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_WebGPU = 2
     * }
     */
    public static int WGPUBackendType_WebGPU() {
        return WGPUBackendType_WebGPU;
    }
    private static final int WGPUBackendType_D3D11 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_D3D11 = 3
     * }
     */
    public static int WGPUBackendType_D3D11() {
        return WGPUBackendType_D3D11;
    }
    private static final int WGPUBackendType_D3D12 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_D3D12 = 4
     * }
     */
    public static int WGPUBackendType_D3D12() {
        return WGPUBackendType_D3D12;
    }
    private static final int WGPUBackendType_Metal = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_Metal = 5
     * }
     */
    public static int WGPUBackendType_Metal() {
        return WGPUBackendType_Metal;
    }
    private static final int WGPUBackendType_Vulkan = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_Vulkan = 6
     * }
     */
    public static int WGPUBackendType_Vulkan() {
        return WGPUBackendType_Vulkan;
    }
    private static final int WGPUBackendType_OpenGL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_OpenGL = 7
     * }
     */
    public static int WGPUBackendType_OpenGL() {
        return WGPUBackendType_OpenGL;
    }
    private static final int WGPUBackendType_OpenGLES = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_OpenGLES = 8
     * }
     */
    public static int WGPUBackendType_OpenGLES() {
        return WGPUBackendType_OpenGLES;
    }
    private static final int WGPUBackendType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUBackendType.WGPUBackendType_Force32 = 2147483647
     * }
     */
    public static int WGPUBackendType_Force32() {
        return WGPUBackendType_Force32;
    }
    private static final int WGPUBlendFactor_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_Undefined = 0
     * }
     */
    public static int WGPUBlendFactor_Undefined() {
        return WGPUBlendFactor_Undefined;
    }
    private static final int WGPUBlendFactor_Zero = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_Zero = 1
     * }
     */
    public static int WGPUBlendFactor_Zero() {
        return WGPUBlendFactor_Zero;
    }
    private static final int WGPUBlendFactor_One = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_One = 2
     * }
     */
    public static int WGPUBlendFactor_One() {
        return WGPUBlendFactor_One;
    }
    private static final int WGPUBlendFactor_Src = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_Src = 3
     * }
     */
    public static int WGPUBlendFactor_Src() {
        return WGPUBlendFactor_Src;
    }
    private static final int WGPUBlendFactor_OneMinusSrc = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusSrc = 4
     * }
     */
    public static int WGPUBlendFactor_OneMinusSrc() {
        return WGPUBlendFactor_OneMinusSrc;
    }
    private static final int WGPUBlendFactor_SrcAlpha = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_SrcAlpha = 5
     * }
     */
    public static int WGPUBlendFactor_SrcAlpha() {
        return WGPUBlendFactor_SrcAlpha;
    }
    private static final int WGPUBlendFactor_OneMinusSrcAlpha = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusSrcAlpha = 6
     * }
     */
    public static int WGPUBlendFactor_OneMinusSrcAlpha() {
        return WGPUBlendFactor_OneMinusSrcAlpha;
    }
    private static final int WGPUBlendFactor_Dst = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_Dst = 7
     * }
     */
    public static int WGPUBlendFactor_Dst() {
        return WGPUBlendFactor_Dst;
    }
    private static final int WGPUBlendFactor_OneMinusDst = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusDst = 8
     * }
     */
    public static int WGPUBlendFactor_OneMinusDst() {
        return WGPUBlendFactor_OneMinusDst;
    }
    private static final int WGPUBlendFactor_DstAlpha = (int)9L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_DstAlpha = 9
     * }
     */
    public static int WGPUBlendFactor_DstAlpha() {
        return WGPUBlendFactor_DstAlpha;
    }
    private static final int WGPUBlendFactor_OneMinusDstAlpha = (int)10L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusDstAlpha = 10
     * }
     */
    public static int WGPUBlendFactor_OneMinusDstAlpha() {
        return WGPUBlendFactor_OneMinusDstAlpha;
    }
    private static final int WGPUBlendFactor_SrcAlphaSaturated = (int)11L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_SrcAlphaSaturated = 11
     * }
     */
    public static int WGPUBlendFactor_SrcAlphaSaturated() {
        return WGPUBlendFactor_SrcAlphaSaturated;
    }
    private static final int WGPUBlendFactor_Constant = (int)12L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_Constant = 12
     * }
     */
    public static int WGPUBlendFactor_Constant() {
        return WGPUBlendFactor_Constant;
    }
    private static final int WGPUBlendFactor_OneMinusConstant = (int)13L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusConstant = 13
     * }
     */
    public static int WGPUBlendFactor_OneMinusConstant() {
        return WGPUBlendFactor_OneMinusConstant;
    }
    private static final int WGPUBlendFactor_Src1 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_Src1 = 14
     * }
     */
    public static int WGPUBlendFactor_Src1() {
        return WGPUBlendFactor_Src1;
    }
    private static final int WGPUBlendFactor_OneMinusSrc1 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusSrc1 = 15
     * }
     */
    public static int WGPUBlendFactor_OneMinusSrc1() {
        return WGPUBlendFactor_OneMinusSrc1;
    }
    private static final int WGPUBlendFactor_Src1Alpha = (int)16L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_Src1Alpha = 16
     * }
     */
    public static int WGPUBlendFactor_Src1Alpha() {
        return WGPUBlendFactor_Src1Alpha;
    }
    private static final int WGPUBlendFactor_OneMinusSrc1Alpha = (int)17L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusSrc1Alpha = 17
     * }
     */
    public static int WGPUBlendFactor_OneMinusSrc1Alpha() {
        return WGPUBlendFactor_OneMinusSrc1Alpha;
    }
    private static final int WGPUBlendFactor_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendFactor.WGPUBlendFactor_Force32 = 2147483647
     * }
     */
    public static int WGPUBlendFactor_Force32() {
        return WGPUBlendFactor_Force32;
    }
    private static final int WGPUBlendOperation_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendOperation.WGPUBlendOperation_Undefined = 0
     * }
     */
    public static int WGPUBlendOperation_Undefined() {
        return WGPUBlendOperation_Undefined;
    }
    private static final int WGPUBlendOperation_Add = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendOperation.WGPUBlendOperation_Add = 1
     * }
     */
    public static int WGPUBlendOperation_Add() {
        return WGPUBlendOperation_Add;
    }
    private static final int WGPUBlendOperation_Subtract = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendOperation.WGPUBlendOperation_Subtract = 2
     * }
     */
    public static int WGPUBlendOperation_Subtract() {
        return WGPUBlendOperation_Subtract;
    }
    private static final int WGPUBlendOperation_ReverseSubtract = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendOperation.WGPUBlendOperation_ReverseSubtract = 3
     * }
     */
    public static int WGPUBlendOperation_ReverseSubtract() {
        return WGPUBlendOperation_ReverseSubtract;
    }
    private static final int WGPUBlendOperation_Min = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendOperation.WGPUBlendOperation_Min = 4
     * }
     */
    public static int WGPUBlendOperation_Min() {
        return WGPUBlendOperation_Min;
    }
    private static final int WGPUBlendOperation_Max = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendOperation.WGPUBlendOperation_Max = 5
     * }
     */
    public static int WGPUBlendOperation_Max() {
        return WGPUBlendOperation_Max;
    }
    private static final int WGPUBlendOperation_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUBlendOperation.WGPUBlendOperation_Force32 = 2147483647
     * }
     */
    public static int WGPUBlendOperation_Force32() {
        return WGPUBlendOperation_Force32;
    }
    private static final int WGPUBufferBindingType_BindingNotUsed = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferBindingType.WGPUBufferBindingType_BindingNotUsed = 0
     * }
     */
    public static int WGPUBufferBindingType_BindingNotUsed() {
        return WGPUBufferBindingType_BindingNotUsed;
    }
    private static final int WGPUBufferBindingType_Undefined = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferBindingType.WGPUBufferBindingType_Undefined = 1
     * }
     */
    public static int WGPUBufferBindingType_Undefined() {
        return WGPUBufferBindingType_Undefined;
    }
    private static final int WGPUBufferBindingType_Uniform = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferBindingType.WGPUBufferBindingType_Uniform = 2
     * }
     */
    public static int WGPUBufferBindingType_Uniform() {
        return WGPUBufferBindingType_Uniform;
    }
    private static final int WGPUBufferBindingType_Storage = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferBindingType.WGPUBufferBindingType_Storage = 3
     * }
     */
    public static int WGPUBufferBindingType_Storage() {
        return WGPUBufferBindingType_Storage;
    }
    private static final int WGPUBufferBindingType_ReadOnlyStorage = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferBindingType.WGPUBufferBindingType_ReadOnlyStorage = 4
     * }
     */
    public static int WGPUBufferBindingType_ReadOnlyStorage() {
        return WGPUBufferBindingType_ReadOnlyStorage;
    }
    private static final int WGPUBufferBindingType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferBindingType.WGPUBufferBindingType_Force32 = 2147483647
     * }
     */
    public static int WGPUBufferBindingType_Force32() {
        return WGPUBufferBindingType_Force32;
    }
    private static final int WGPUBufferMapState_Unmapped = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferMapState.WGPUBufferMapState_Unmapped = 1
     * }
     */
    public static int WGPUBufferMapState_Unmapped() {
        return WGPUBufferMapState_Unmapped;
    }
    private static final int WGPUBufferMapState_Pending = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferMapState.WGPUBufferMapState_Pending = 2
     * }
     */
    public static int WGPUBufferMapState_Pending() {
        return WGPUBufferMapState_Pending;
    }
    private static final int WGPUBufferMapState_Mapped = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferMapState.WGPUBufferMapState_Mapped = 3
     * }
     */
    public static int WGPUBufferMapState_Mapped() {
        return WGPUBufferMapState_Mapped;
    }
    private static final int WGPUBufferMapState_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUBufferMapState.WGPUBufferMapState_Force32 = 2147483647
     * }
     */
    public static int WGPUBufferMapState_Force32() {
        return WGPUBufferMapState_Force32;
    }
    private static final int WGPUCallbackMode_WaitAnyOnly = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUCallbackMode.WGPUCallbackMode_WaitAnyOnly = 1
     * }
     */
    public static int WGPUCallbackMode_WaitAnyOnly() {
        return WGPUCallbackMode_WaitAnyOnly;
    }
    private static final int WGPUCallbackMode_AllowProcessEvents = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUCallbackMode.WGPUCallbackMode_AllowProcessEvents = 2
     * }
     */
    public static int WGPUCallbackMode_AllowProcessEvents() {
        return WGPUCallbackMode_AllowProcessEvents;
    }
    private static final int WGPUCallbackMode_AllowSpontaneous = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUCallbackMode.WGPUCallbackMode_AllowSpontaneous = 3
     * }
     */
    public static int WGPUCallbackMode_AllowSpontaneous() {
        return WGPUCallbackMode_AllowSpontaneous;
    }
    private static final int WGPUCallbackMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUCallbackMode.WGPUCallbackMode_Force32 = 2147483647
     * }
     */
    public static int WGPUCallbackMode_Force32() {
        return WGPUCallbackMode_Force32;
    }
    private static final int WGPUCompareFunction_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_Undefined = 0
     * }
     */
    public static int WGPUCompareFunction_Undefined() {
        return WGPUCompareFunction_Undefined;
    }
    private static final int WGPUCompareFunction_Never = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_Never = 1
     * }
     */
    public static int WGPUCompareFunction_Never() {
        return WGPUCompareFunction_Never;
    }
    private static final int WGPUCompareFunction_Less = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_Less = 2
     * }
     */
    public static int WGPUCompareFunction_Less() {
        return WGPUCompareFunction_Less;
    }
    private static final int WGPUCompareFunction_Equal = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_Equal = 3
     * }
     */
    public static int WGPUCompareFunction_Equal() {
        return WGPUCompareFunction_Equal;
    }
    private static final int WGPUCompareFunction_LessEqual = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_LessEqual = 4
     * }
     */
    public static int WGPUCompareFunction_LessEqual() {
        return WGPUCompareFunction_LessEqual;
    }
    private static final int WGPUCompareFunction_Greater = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_Greater = 5
     * }
     */
    public static int WGPUCompareFunction_Greater() {
        return WGPUCompareFunction_Greater;
    }
    private static final int WGPUCompareFunction_NotEqual = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_NotEqual = 6
     * }
     */
    public static int WGPUCompareFunction_NotEqual() {
        return WGPUCompareFunction_NotEqual;
    }
    private static final int WGPUCompareFunction_GreaterEqual = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_GreaterEqual = 7
     * }
     */
    public static int WGPUCompareFunction_GreaterEqual() {
        return WGPUCompareFunction_GreaterEqual;
    }
    private static final int WGPUCompareFunction_Always = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_Always = 8
     * }
     */
    public static int WGPUCompareFunction_Always() {
        return WGPUCompareFunction_Always;
    }
    private static final int WGPUCompareFunction_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompareFunction.WGPUCompareFunction_Force32 = 2147483647
     * }
     */
    public static int WGPUCompareFunction_Force32() {
        return WGPUCompareFunction_Force32;
    }
    private static final int WGPUCompilationInfoRequestStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompilationInfoRequestStatus.WGPUCompilationInfoRequestStatus_Success = 1
     * }
     */
    public static int WGPUCompilationInfoRequestStatus_Success() {
        return WGPUCompilationInfoRequestStatus_Success;
    }
    private static final int WGPUCompilationInfoRequestStatus_CallbackCancelled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompilationInfoRequestStatus.WGPUCompilationInfoRequestStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUCompilationInfoRequestStatus_CallbackCancelled() {
        return WGPUCompilationInfoRequestStatus_CallbackCancelled;
    }
    private static final int WGPUCompilationInfoRequestStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompilationInfoRequestStatus.WGPUCompilationInfoRequestStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUCompilationInfoRequestStatus_Force32() {
        return WGPUCompilationInfoRequestStatus_Force32;
    }
    private static final int WGPUCompilationMessageType_Error = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompilationMessageType.WGPUCompilationMessageType_Error = 1
     * }
     */
    public static int WGPUCompilationMessageType_Error() {
        return WGPUCompilationMessageType_Error;
    }
    private static final int WGPUCompilationMessageType_Warning = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompilationMessageType.WGPUCompilationMessageType_Warning = 2
     * }
     */
    public static int WGPUCompilationMessageType_Warning() {
        return WGPUCompilationMessageType_Warning;
    }
    private static final int WGPUCompilationMessageType_Info = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompilationMessageType.WGPUCompilationMessageType_Info = 3
     * }
     */
    public static int WGPUCompilationMessageType_Info() {
        return WGPUCompilationMessageType_Info;
    }
    private static final int WGPUCompilationMessageType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompilationMessageType.WGPUCompilationMessageType_Force32 = 2147483647
     * }
     */
    public static int WGPUCompilationMessageType_Force32() {
        return WGPUCompilationMessageType_Force32;
    }
    private static final int WGPUCompositeAlphaMode_Auto = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Auto = 0
     * }
     */
    public static int WGPUCompositeAlphaMode_Auto() {
        return WGPUCompositeAlphaMode_Auto;
    }
    private static final int WGPUCompositeAlphaMode_Opaque = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Opaque = 1
     * }
     */
    public static int WGPUCompositeAlphaMode_Opaque() {
        return WGPUCompositeAlphaMode_Opaque;
    }
    private static final int WGPUCompositeAlphaMode_Premultiplied = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Premultiplied = 2
     * }
     */
    public static int WGPUCompositeAlphaMode_Premultiplied() {
        return WGPUCompositeAlphaMode_Premultiplied;
    }
    private static final int WGPUCompositeAlphaMode_Unpremultiplied = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Unpremultiplied = 3
     * }
     */
    public static int WGPUCompositeAlphaMode_Unpremultiplied() {
        return WGPUCompositeAlphaMode_Unpremultiplied;
    }
    private static final int WGPUCompositeAlphaMode_Inherit = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Inherit = 4
     * }
     */
    public static int WGPUCompositeAlphaMode_Inherit() {
        return WGPUCompositeAlphaMode_Inherit;
    }
    private static final int WGPUCompositeAlphaMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Force32 = 2147483647
     * }
     */
    public static int WGPUCompositeAlphaMode_Force32() {
        return WGPUCompositeAlphaMode_Force32;
    }
    private static final int WGPUCreatePipelineAsyncStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_Success = 1
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_Success() {
        return WGPUCreatePipelineAsyncStatus_Success;
    }
    private static final int WGPUCreatePipelineAsyncStatus_CallbackCancelled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_CallbackCancelled() {
        return WGPUCreatePipelineAsyncStatus_CallbackCancelled;
    }
    private static final int WGPUCreatePipelineAsyncStatus_ValidationError = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_ValidationError = 3
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_ValidationError() {
        return WGPUCreatePipelineAsyncStatus_ValidationError;
    }
    private static final int WGPUCreatePipelineAsyncStatus_InternalError = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_InternalError = 4
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_InternalError() {
        return WGPUCreatePipelineAsyncStatus_InternalError;
    }
    private static final int WGPUCreatePipelineAsyncStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_Force32() {
        return WGPUCreatePipelineAsyncStatus_Force32;
    }
    private static final int WGPUCullMode_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUCullMode.WGPUCullMode_Undefined = 0
     * }
     */
    public static int WGPUCullMode_Undefined() {
        return WGPUCullMode_Undefined;
    }
    private static final int WGPUCullMode_None = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUCullMode.WGPUCullMode_None = 1
     * }
     */
    public static int WGPUCullMode_None() {
        return WGPUCullMode_None;
    }
    private static final int WGPUCullMode_Front = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUCullMode.WGPUCullMode_Front = 2
     * }
     */
    public static int WGPUCullMode_Front() {
        return WGPUCullMode_Front;
    }
    private static final int WGPUCullMode_Back = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUCullMode.WGPUCullMode_Back = 3
     * }
     */
    public static int WGPUCullMode_Back() {
        return WGPUCullMode_Back;
    }
    private static final int WGPUCullMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUCullMode.WGPUCullMode_Force32 = 2147483647
     * }
     */
    public static int WGPUCullMode_Force32() {
        return WGPUCullMode_Force32;
    }
    private static final int WGPUDeviceLostReason_Unknown = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUDeviceLostReason.WGPUDeviceLostReason_Unknown = 1
     * }
     */
    public static int WGPUDeviceLostReason_Unknown() {
        return WGPUDeviceLostReason_Unknown;
    }
    private static final int WGPUDeviceLostReason_Destroyed = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUDeviceLostReason.WGPUDeviceLostReason_Destroyed = 2
     * }
     */
    public static int WGPUDeviceLostReason_Destroyed() {
        return WGPUDeviceLostReason_Destroyed;
    }
    private static final int WGPUDeviceLostReason_CallbackCancelled = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUDeviceLostReason.WGPUDeviceLostReason_CallbackCancelled = 3
     * }
     */
    public static int WGPUDeviceLostReason_CallbackCancelled() {
        return WGPUDeviceLostReason_CallbackCancelled;
    }
    private static final int WGPUDeviceLostReason_FailedCreation = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUDeviceLostReason.WGPUDeviceLostReason_FailedCreation = 4
     * }
     */
    public static int WGPUDeviceLostReason_FailedCreation() {
        return WGPUDeviceLostReason_FailedCreation;
    }
    private static final int WGPUDeviceLostReason_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUDeviceLostReason.WGPUDeviceLostReason_Force32 = 2147483647
     * }
     */
    public static int WGPUDeviceLostReason_Force32() {
        return WGPUDeviceLostReason_Force32;
    }
    private static final int WGPUErrorFilter_Validation = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorFilter.WGPUErrorFilter_Validation = 1
     * }
     */
    public static int WGPUErrorFilter_Validation() {
        return WGPUErrorFilter_Validation;
    }
    private static final int WGPUErrorFilter_OutOfMemory = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorFilter.WGPUErrorFilter_OutOfMemory = 2
     * }
     */
    public static int WGPUErrorFilter_OutOfMemory() {
        return WGPUErrorFilter_OutOfMemory;
    }
    private static final int WGPUErrorFilter_Internal = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorFilter.WGPUErrorFilter_Internal = 3
     * }
     */
    public static int WGPUErrorFilter_Internal() {
        return WGPUErrorFilter_Internal;
    }
    private static final int WGPUErrorFilter_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorFilter.WGPUErrorFilter_Force32 = 2147483647
     * }
     */
    public static int WGPUErrorFilter_Force32() {
        return WGPUErrorFilter_Force32;
    }
    private static final int WGPUErrorType_NoError = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorType.WGPUErrorType_NoError = 1
     * }
     */
    public static int WGPUErrorType_NoError() {
        return WGPUErrorType_NoError;
    }
    private static final int WGPUErrorType_Validation = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorType.WGPUErrorType_Validation = 2
     * }
     */
    public static int WGPUErrorType_Validation() {
        return WGPUErrorType_Validation;
    }
    private static final int WGPUErrorType_OutOfMemory = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorType.WGPUErrorType_OutOfMemory = 3
     * }
     */
    public static int WGPUErrorType_OutOfMemory() {
        return WGPUErrorType_OutOfMemory;
    }
    private static final int WGPUErrorType_Internal = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorType.WGPUErrorType_Internal = 4
     * }
     */
    public static int WGPUErrorType_Internal() {
        return WGPUErrorType_Internal;
    }
    private static final int WGPUErrorType_Unknown = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorType.WGPUErrorType_Unknown = 5
     * }
     */
    public static int WGPUErrorType_Unknown() {
        return WGPUErrorType_Unknown;
    }
    private static final int WGPUErrorType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUErrorType.WGPUErrorType_Force32 = 2147483647
     * }
     */
    public static int WGPUErrorType_Force32() {
        return WGPUErrorType_Force32;
    }
    private static final int WGPUFeatureLevel_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureLevel.WGPUFeatureLevel_Undefined = 0
     * }
     */
    public static int WGPUFeatureLevel_Undefined() {
        return WGPUFeatureLevel_Undefined;
    }
    private static final int WGPUFeatureLevel_Compatibility = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureLevel.WGPUFeatureLevel_Compatibility = 1
     * }
     */
    public static int WGPUFeatureLevel_Compatibility() {
        return WGPUFeatureLevel_Compatibility;
    }
    private static final int WGPUFeatureLevel_Core = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureLevel.WGPUFeatureLevel_Core = 2
     * }
     */
    public static int WGPUFeatureLevel_Core() {
        return WGPUFeatureLevel_Core;
    }
    private static final int WGPUFeatureLevel_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureLevel.WGPUFeatureLevel_Force32 = 2147483647
     * }
     */
    public static int WGPUFeatureLevel_Force32() {
        return WGPUFeatureLevel_Force32;
    }
    private static final int WGPUFeatureName_CoreFeaturesAndLimits = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_CoreFeaturesAndLimits = 1
     * }
     */
    public static int WGPUFeatureName_CoreFeaturesAndLimits() {
        return WGPUFeatureName_CoreFeaturesAndLimits;
    }
    private static final int WGPUFeatureName_DepthClipControl = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_DepthClipControl = 2
     * }
     */
    public static int WGPUFeatureName_DepthClipControl() {
        return WGPUFeatureName_DepthClipControl;
    }
    private static final int WGPUFeatureName_Depth32FloatStencil8 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_Depth32FloatStencil8 = 3
     * }
     */
    public static int WGPUFeatureName_Depth32FloatStencil8() {
        return WGPUFeatureName_Depth32FloatStencil8;
    }
    private static final int WGPUFeatureName_TextureCompressionBC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionBC = 4
     * }
     */
    public static int WGPUFeatureName_TextureCompressionBC() {
        return WGPUFeatureName_TextureCompressionBC;
    }
    private static final int WGPUFeatureName_TextureCompressionBCSliced3D = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionBCSliced3D = 5
     * }
     */
    public static int WGPUFeatureName_TextureCompressionBCSliced3D() {
        return WGPUFeatureName_TextureCompressionBCSliced3D;
    }
    private static final int WGPUFeatureName_TextureCompressionETC2 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionETC2 = 6
     * }
     */
    public static int WGPUFeatureName_TextureCompressionETC2() {
        return WGPUFeatureName_TextureCompressionETC2;
    }
    private static final int WGPUFeatureName_TextureCompressionASTC = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionASTC = 7
     * }
     */
    public static int WGPUFeatureName_TextureCompressionASTC() {
        return WGPUFeatureName_TextureCompressionASTC;
    }
    private static final int WGPUFeatureName_TextureCompressionASTCSliced3D = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionASTCSliced3D = 8
     * }
     */
    public static int WGPUFeatureName_TextureCompressionASTCSliced3D() {
        return WGPUFeatureName_TextureCompressionASTCSliced3D;
    }
    private static final int WGPUFeatureName_TimestampQuery = (int)9L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_TimestampQuery = 9
     * }
     */
    public static int WGPUFeatureName_TimestampQuery() {
        return WGPUFeatureName_TimestampQuery;
    }
    private static final int WGPUFeatureName_IndirectFirstInstance = (int)10L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_IndirectFirstInstance = 10
     * }
     */
    public static int WGPUFeatureName_IndirectFirstInstance() {
        return WGPUFeatureName_IndirectFirstInstance;
    }
    private static final int WGPUFeatureName_ShaderF16 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_ShaderF16 = 11
     * }
     */
    public static int WGPUFeatureName_ShaderF16() {
        return WGPUFeatureName_ShaderF16;
    }
    private static final int WGPUFeatureName_RG11B10UfloatRenderable = (int)12L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_RG11B10UfloatRenderable = 12
     * }
     */
    public static int WGPUFeatureName_RG11B10UfloatRenderable() {
        return WGPUFeatureName_RG11B10UfloatRenderable;
    }
    private static final int WGPUFeatureName_BGRA8UnormStorage = (int)13L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_BGRA8UnormStorage = 13
     * }
     */
    public static int WGPUFeatureName_BGRA8UnormStorage() {
        return WGPUFeatureName_BGRA8UnormStorage;
    }
    private static final int WGPUFeatureName_Float32Filterable = (int)14L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_Float32Filterable = 14
     * }
     */
    public static int WGPUFeatureName_Float32Filterable() {
        return WGPUFeatureName_Float32Filterable;
    }
    private static final int WGPUFeatureName_Float32Blendable = (int)15L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_Float32Blendable = 15
     * }
     */
    public static int WGPUFeatureName_Float32Blendable() {
        return WGPUFeatureName_Float32Blendable;
    }
    private static final int WGPUFeatureName_ClipDistances = (int)16L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_ClipDistances = 16
     * }
     */
    public static int WGPUFeatureName_ClipDistances() {
        return WGPUFeatureName_ClipDistances;
    }
    private static final int WGPUFeatureName_DualSourceBlending = (int)17L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_DualSourceBlending = 17
     * }
     */
    public static int WGPUFeatureName_DualSourceBlending() {
        return WGPUFeatureName_DualSourceBlending;
    }
    private static final int WGPUFeatureName_Subgroups = (int)18L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_Subgroups = 18
     * }
     */
    public static int WGPUFeatureName_Subgroups() {
        return WGPUFeatureName_Subgroups;
    }
    private static final int WGPUFeatureName_TextureFormatsTier1 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_TextureFormatsTier1 = 19
     * }
     */
    public static int WGPUFeatureName_TextureFormatsTier1() {
        return WGPUFeatureName_TextureFormatsTier1;
    }
    private static final int WGPUFeatureName_TextureFormatsTier2 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_TextureFormatsTier2 = 20
     * }
     */
    public static int WGPUFeatureName_TextureFormatsTier2() {
        return WGPUFeatureName_TextureFormatsTier2;
    }
    private static final int WGPUFeatureName_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUFeatureName.WGPUFeatureName_Force32 = 2147483647
     * }
     */
    public static int WGPUFeatureName_Force32() {
        return WGPUFeatureName_Force32;
    }
    private static final int WGPUFilterMode_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUFilterMode.WGPUFilterMode_Undefined = 0
     * }
     */
    public static int WGPUFilterMode_Undefined() {
        return WGPUFilterMode_Undefined;
    }
    private static final int WGPUFilterMode_Nearest = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUFilterMode.WGPUFilterMode_Nearest = 1
     * }
     */
    public static int WGPUFilterMode_Nearest() {
        return WGPUFilterMode_Nearest;
    }
    private static final int WGPUFilterMode_Linear = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUFilterMode.WGPUFilterMode_Linear = 2
     * }
     */
    public static int WGPUFilterMode_Linear() {
        return WGPUFilterMode_Linear;
    }
    private static final int WGPUFilterMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUFilterMode.WGPUFilterMode_Force32 = 2147483647
     * }
     */
    public static int WGPUFilterMode_Force32() {
        return WGPUFilterMode_Force32;
    }
    private static final int WGPUFrontFace_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUFrontFace.WGPUFrontFace_Undefined = 0
     * }
     */
    public static int WGPUFrontFace_Undefined() {
        return WGPUFrontFace_Undefined;
    }
    private static final int WGPUFrontFace_CCW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUFrontFace.WGPUFrontFace_CCW = 1
     * }
     */
    public static int WGPUFrontFace_CCW() {
        return WGPUFrontFace_CCW;
    }
    private static final int WGPUFrontFace_CW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUFrontFace.WGPUFrontFace_CW = 2
     * }
     */
    public static int WGPUFrontFace_CW() {
        return WGPUFrontFace_CW;
    }
    private static final int WGPUFrontFace_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUFrontFace.WGPUFrontFace_Force32 = 2147483647
     * }
     */
    public static int WGPUFrontFace_Force32() {
        return WGPUFrontFace_Force32;
    }
    private static final int WGPUIndexFormat_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUIndexFormat.WGPUIndexFormat_Undefined = 0
     * }
     */
    public static int WGPUIndexFormat_Undefined() {
        return WGPUIndexFormat_Undefined;
    }
    private static final int WGPUIndexFormat_Uint16 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUIndexFormat.WGPUIndexFormat_Uint16 = 1
     * }
     */
    public static int WGPUIndexFormat_Uint16() {
        return WGPUIndexFormat_Uint16;
    }
    private static final int WGPUIndexFormat_Uint32 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUIndexFormat.WGPUIndexFormat_Uint32 = 2
     * }
     */
    public static int WGPUIndexFormat_Uint32() {
        return WGPUIndexFormat_Uint32;
    }
    private static final int WGPUIndexFormat_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUIndexFormat.WGPUIndexFormat_Force32 = 2147483647
     * }
     */
    public static int WGPUIndexFormat_Force32() {
        return WGPUIndexFormat_Force32;
    }
    private static final int WGPUInstanceFeatureName_TimedWaitAny = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUInstanceFeatureName.WGPUInstanceFeatureName_TimedWaitAny = 1
     * }
     */
    public static int WGPUInstanceFeatureName_TimedWaitAny() {
        return WGPUInstanceFeatureName_TimedWaitAny;
    }
    private static final int WGPUInstanceFeatureName_ShaderSourceSPIRV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUInstanceFeatureName.WGPUInstanceFeatureName_ShaderSourceSPIRV = 2
     * }
     */
    public static int WGPUInstanceFeatureName_ShaderSourceSPIRV() {
        return WGPUInstanceFeatureName_ShaderSourceSPIRV;
    }
    private static final int WGPUInstanceFeatureName_MultipleDevicesPerAdapter = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUInstanceFeatureName.WGPUInstanceFeatureName_MultipleDevicesPerAdapter = 3
     * }
     */
    public static int WGPUInstanceFeatureName_MultipleDevicesPerAdapter() {
        return WGPUInstanceFeatureName_MultipleDevicesPerAdapter;
    }
    private static final int WGPUInstanceFeatureName_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUInstanceFeatureName.WGPUInstanceFeatureName_Force32 = 2147483647
     * }
     */
    public static int WGPUInstanceFeatureName_Force32() {
        return WGPUInstanceFeatureName_Force32;
    }
    private static final int WGPULoadOp_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPULoadOp.WGPULoadOp_Undefined = 0
     * }
     */
    public static int WGPULoadOp_Undefined() {
        return WGPULoadOp_Undefined;
    }
    private static final int WGPULoadOp_Load = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPULoadOp.WGPULoadOp_Load = 1
     * }
     */
    public static int WGPULoadOp_Load() {
        return WGPULoadOp_Load;
    }
    private static final int WGPULoadOp_Clear = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPULoadOp.WGPULoadOp_Clear = 2
     * }
     */
    public static int WGPULoadOp_Clear() {
        return WGPULoadOp_Clear;
    }
    private static final int WGPULoadOp_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPULoadOp.WGPULoadOp_Force32 = 2147483647
     * }
     */
    public static int WGPULoadOp_Force32() {
        return WGPULoadOp_Force32;
    }
    private static final int WGPUMapAsyncStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_Success = 1
     * }
     */
    public static int WGPUMapAsyncStatus_Success() {
        return WGPUMapAsyncStatus_Success;
    }
    private static final int WGPUMapAsyncStatus_CallbackCancelled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUMapAsyncStatus_CallbackCancelled() {
        return WGPUMapAsyncStatus_CallbackCancelled;
    }
    private static final int WGPUMapAsyncStatus_Error = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_Error = 3
     * }
     */
    public static int WGPUMapAsyncStatus_Error() {
        return WGPUMapAsyncStatus_Error;
    }
    private static final int WGPUMapAsyncStatus_Aborted = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_Aborted = 4
     * }
     */
    public static int WGPUMapAsyncStatus_Aborted() {
        return WGPUMapAsyncStatus_Aborted;
    }
    private static final int WGPUMapAsyncStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUMapAsyncStatus_Force32() {
        return WGPUMapAsyncStatus_Force32;
    }
    private static final int WGPUMipmapFilterMode_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUMipmapFilterMode.WGPUMipmapFilterMode_Undefined = 0
     * }
     */
    public static int WGPUMipmapFilterMode_Undefined() {
        return WGPUMipmapFilterMode_Undefined;
    }
    private static final int WGPUMipmapFilterMode_Nearest = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUMipmapFilterMode.WGPUMipmapFilterMode_Nearest = 1
     * }
     */
    public static int WGPUMipmapFilterMode_Nearest() {
        return WGPUMipmapFilterMode_Nearest;
    }
    private static final int WGPUMipmapFilterMode_Linear = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUMipmapFilterMode.WGPUMipmapFilterMode_Linear = 2
     * }
     */
    public static int WGPUMipmapFilterMode_Linear() {
        return WGPUMipmapFilterMode_Linear;
    }
    private static final int WGPUMipmapFilterMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUMipmapFilterMode.WGPUMipmapFilterMode_Force32 = 2147483647
     * }
     */
    public static int WGPUMipmapFilterMode_Force32() {
        return WGPUMipmapFilterMode_Force32;
    }
    private static final int WGPUOptionalBool_False = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUOptionalBool.WGPUOptionalBool_False = 0
     * }
     */
    public static int WGPUOptionalBool_False() {
        return WGPUOptionalBool_False;
    }
    private static final int WGPUOptionalBool_True = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUOptionalBool.WGPUOptionalBool_True = 1
     * }
     */
    public static int WGPUOptionalBool_True() {
        return WGPUOptionalBool_True;
    }
    private static final int WGPUOptionalBool_Undefined = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUOptionalBool.WGPUOptionalBool_Undefined = 2
     * }
     */
    public static int WGPUOptionalBool_Undefined() {
        return WGPUOptionalBool_Undefined;
    }
    private static final int WGPUOptionalBool_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUOptionalBool.WGPUOptionalBool_Force32 = 2147483647
     * }
     */
    public static int WGPUOptionalBool_Force32() {
        return WGPUOptionalBool_Force32;
    }
    private static final int WGPUPopErrorScopeStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUPopErrorScopeStatus.WGPUPopErrorScopeStatus_Success = 1
     * }
     */
    public static int WGPUPopErrorScopeStatus_Success() {
        return WGPUPopErrorScopeStatus_Success;
    }
    private static final int WGPUPopErrorScopeStatus_CallbackCancelled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUPopErrorScopeStatus.WGPUPopErrorScopeStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUPopErrorScopeStatus_CallbackCancelled() {
        return WGPUPopErrorScopeStatus_CallbackCancelled;
    }
    private static final int WGPUPopErrorScopeStatus_Error = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUPopErrorScopeStatus.WGPUPopErrorScopeStatus_Error = 3
     * }
     */
    public static int WGPUPopErrorScopeStatus_Error() {
        return WGPUPopErrorScopeStatus_Error;
    }
    private static final int WGPUPopErrorScopeStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUPopErrorScopeStatus.WGPUPopErrorScopeStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUPopErrorScopeStatus_Force32() {
        return WGPUPopErrorScopeStatus_Force32;
    }
    private static final int WGPUPowerPreference_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUPowerPreference.WGPUPowerPreference_Undefined = 0
     * }
     */
    public static int WGPUPowerPreference_Undefined() {
        return WGPUPowerPreference_Undefined;
    }
    private static final int WGPUPowerPreference_LowPower = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUPowerPreference.WGPUPowerPreference_LowPower = 1
     * }
     */
    public static int WGPUPowerPreference_LowPower() {
        return WGPUPowerPreference_LowPower;
    }
    private static final int WGPUPowerPreference_HighPerformance = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUPowerPreference.WGPUPowerPreference_HighPerformance = 2
     * }
     */
    public static int WGPUPowerPreference_HighPerformance() {
        return WGPUPowerPreference_HighPerformance;
    }
    private static final int WGPUPowerPreference_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUPowerPreference.WGPUPowerPreference_Force32 = 2147483647
     * }
     */
    public static int WGPUPowerPreference_Force32() {
        return WGPUPowerPreference_Force32;
    }
    private static final int WGPUPredefinedColorSpace_SRGB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUPredefinedColorSpace.WGPUPredefinedColorSpace_SRGB = 1
     * }
     */
    public static int WGPUPredefinedColorSpace_SRGB() {
        return WGPUPredefinedColorSpace_SRGB;
    }
    private static final int WGPUPredefinedColorSpace_DisplayP3 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUPredefinedColorSpace.WGPUPredefinedColorSpace_DisplayP3 = 2
     * }
     */
    public static int WGPUPredefinedColorSpace_DisplayP3() {
        return WGPUPredefinedColorSpace_DisplayP3;
    }
    private static final int WGPUPredefinedColorSpace_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUPredefinedColorSpace.WGPUPredefinedColorSpace_Force32 = 2147483647
     * }
     */
    public static int WGPUPredefinedColorSpace_Force32() {
        return WGPUPredefinedColorSpace_Force32;
    }
    private static final int WGPUPresentMode_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUPresentMode.WGPUPresentMode_Undefined = 0
     * }
     */
    public static int WGPUPresentMode_Undefined() {
        return WGPUPresentMode_Undefined;
    }
    private static final int WGPUPresentMode_Fifo = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUPresentMode.WGPUPresentMode_Fifo = 1
     * }
     */
    public static int WGPUPresentMode_Fifo() {
        return WGPUPresentMode_Fifo;
    }
    private static final int WGPUPresentMode_FifoRelaxed = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUPresentMode.WGPUPresentMode_FifoRelaxed = 2
     * }
     */
    public static int WGPUPresentMode_FifoRelaxed() {
        return WGPUPresentMode_FifoRelaxed;
    }
    private static final int WGPUPresentMode_Immediate = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUPresentMode.WGPUPresentMode_Immediate = 3
     * }
     */
    public static int WGPUPresentMode_Immediate() {
        return WGPUPresentMode_Immediate;
    }
    private static final int WGPUPresentMode_Mailbox = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUPresentMode.WGPUPresentMode_Mailbox = 4
     * }
     */
    public static int WGPUPresentMode_Mailbox() {
        return WGPUPresentMode_Mailbox;
    }
    private static final int WGPUPresentMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUPresentMode.WGPUPresentMode_Force32 = 2147483647
     * }
     */
    public static int WGPUPresentMode_Force32() {
        return WGPUPresentMode_Force32;
    }
    private static final int WGPUPrimitiveTopology_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_Undefined = 0
     * }
     */
    public static int WGPUPrimitiveTopology_Undefined() {
        return WGPUPrimitiveTopology_Undefined;
    }
    private static final int WGPUPrimitiveTopology_PointList = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_PointList = 1
     * }
     */
    public static int WGPUPrimitiveTopology_PointList() {
        return WGPUPrimitiveTopology_PointList;
    }
    private static final int WGPUPrimitiveTopology_LineList = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_LineList = 2
     * }
     */
    public static int WGPUPrimitiveTopology_LineList() {
        return WGPUPrimitiveTopology_LineList;
    }
    private static final int WGPUPrimitiveTopology_LineStrip = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_LineStrip = 3
     * }
     */
    public static int WGPUPrimitiveTopology_LineStrip() {
        return WGPUPrimitiveTopology_LineStrip;
    }
    private static final int WGPUPrimitiveTopology_TriangleList = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_TriangleList = 4
     * }
     */
    public static int WGPUPrimitiveTopology_TriangleList() {
        return WGPUPrimitiveTopology_TriangleList;
    }
    private static final int WGPUPrimitiveTopology_TriangleStrip = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_TriangleStrip = 5
     * }
     */
    public static int WGPUPrimitiveTopology_TriangleStrip() {
        return WGPUPrimitiveTopology_TriangleStrip;
    }
    private static final int WGPUPrimitiveTopology_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_Force32 = 2147483647
     * }
     */
    public static int WGPUPrimitiveTopology_Force32() {
        return WGPUPrimitiveTopology_Force32;
    }
    private static final int WGPUQueryType_Occlusion = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUQueryType.WGPUQueryType_Occlusion = 1
     * }
     */
    public static int WGPUQueryType_Occlusion() {
        return WGPUQueryType_Occlusion;
    }
    private static final int WGPUQueryType_Timestamp = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUQueryType.WGPUQueryType_Timestamp = 2
     * }
     */
    public static int WGPUQueryType_Timestamp() {
        return WGPUQueryType_Timestamp;
    }
    private static final int WGPUQueryType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUQueryType.WGPUQueryType_Force32 = 2147483647
     * }
     */
    public static int WGPUQueryType_Force32() {
        return WGPUQueryType_Force32;
    }
    private static final int WGPUQueueWorkDoneStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUQueueWorkDoneStatus.WGPUQueueWorkDoneStatus_Success = 1
     * }
     */
    public static int WGPUQueueWorkDoneStatus_Success() {
        return WGPUQueueWorkDoneStatus_Success;
    }
    private static final int WGPUQueueWorkDoneStatus_CallbackCancelled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUQueueWorkDoneStatus.WGPUQueueWorkDoneStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUQueueWorkDoneStatus_CallbackCancelled() {
        return WGPUQueueWorkDoneStatus_CallbackCancelled;
    }
    private static final int WGPUQueueWorkDoneStatus_Error = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUQueueWorkDoneStatus.WGPUQueueWorkDoneStatus_Error = 3
     * }
     */
    public static int WGPUQueueWorkDoneStatus_Error() {
        return WGPUQueueWorkDoneStatus_Error;
    }
    private static final int WGPUQueueWorkDoneStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUQueueWorkDoneStatus.WGPUQueueWorkDoneStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUQueueWorkDoneStatus_Force32() {
        return WGPUQueueWorkDoneStatus_Force32;
    }
    private static final int WGPURequestAdapterStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_Success = 1
     * }
     */
    public static int WGPURequestAdapterStatus_Success() {
        return WGPURequestAdapterStatus_Success;
    }
    private static final int WGPURequestAdapterStatus_CallbackCancelled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPURequestAdapterStatus_CallbackCancelled() {
        return WGPURequestAdapterStatus_CallbackCancelled;
    }
    private static final int WGPURequestAdapterStatus_Unavailable = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_Unavailable = 3
     * }
     */
    public static int WGPURequestAdapterStatus_Unavailable() {
        return WGPURequestAdapterStatus_Unavailable;
    }
    private static final int WGPURequestAdapterStatus_Error = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_Error = 4
     * }
     */
    public static int WGPURequestAdapterStatus_Error() {
        return WGPURequestAdapterStatus_Error;
    }
    private static final int WGPURequestAdapterStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_Force32 = 2147483647
     * }
     */
    public static int WGPURequestAdapterStatus_Force32() {
        return WGPURequestAdapterStatus_Force32;
    }
    private static final int WGPURequestDeviceStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPURequestDeviceStatus.WGPURequestDeviceStatus_Success = 1
     * }
     */
    public static int WGPURequestDeviceStatus_Success() {
        return WGPURequestDeviceStatus_Success;
    }
    private static final int WGPURequestDeviceStatus_CallbackCancelled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPURequestDeviceStatus.WGPURequestDeviceStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPURequestDeviceStatus_CallbackCancelled() {
        return WGPURequestDeviceStatus_CallbackCancelled;
    }
    private static final int WGPURequestDeviceStatus_Error = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPURequestDeviceStatus.WGPURequestDeviceStatus_Error = 3
     * }
     */
    public static int WGPURequestDeviceStatus_Error() {
        return WGPURequestDeviceStatus_Error;
    }
    private static final int WGPURequestDeviceStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPURequestDeviceStatus.WGPURequestDeviceStatus_Force32 = 2147483647
     * }
     */
    public static int WGPURequestDeviceStatus_Force32() {
        return WGPURequestDeviceStatus_Force32;
    }
    private static final int WGPUSamplerBindingType_BindingNotUsed = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUSamplerBindingType.WGPUSamplerBindingType_BindingNotUsed = 0
     * }
     */
    public static int WGPUSamplerBindingType_BindingNotUsed() {
        return WGPUSamplerBindingType_BindingNotUsed;
    }
    private static final int WGPUSamplerBindingType_Undefined = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUSamplerBindingType.WGPUSamplerBindingType_Undefined = 1
     * }
     */
    public static int WGPUSamplerBindingType_Undefined() {
        return WGPUSamplerBindingType_Undefined;
    }
    private static final int WGPUSamplerBindingType_Filtering = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUSamplerBindingType.WGPUSamplerBindingType_Filtering = 2
     * }
     */
    public static int WGPUSamplerBindingType_Filtering() {
        return WGPUSamplerBindingType_Filtering;
    }
    private static final int WGPUSamplerBindingType_NonFiltering = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUSamplerBindingType.WGPUSamplerBindingType_NonFiltering = 3
     * }
     */
    public static int WGPUSamplerBindingType_NonFiltering() {
        return WGPUSamplerBindingType_NonFiltering;
    }
    private static final int WGPUSamplerBindingType_Comparison = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUSamplerBindingType.WGPUSamplerBindingType_Comparison = 4
     * }
     */
    public static int WGPUSamplerBindingType_Comparison() {
        return WGPUSamplerBindingType_Comparison;
    }
    private static final int WGPUSamplerBindingType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUSamplerBindingType.WGPUSamplerBindingType_Force32 = 2147483647
     * }
     */
    public static int WGPUSamplerBindingType_Force32() {
        return WGPUSamplerBindingType_Force32;
    }
    private static final int WGPUStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUStatus.WGPUStatus_Success = 1
     * }
     */
    public static int WGPUStatus_Success() {
        return WGPUStatus_Success;
    }
    private static final int WGPUStatus_Error = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUStatus.WGPUStatus_Error = 2
     * }
     */
    public static int WGPUStatus_Error() {
        return WGPUStatus_Error;
    }
    private static final int WGPUStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUStatus.WGPUStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUStatus_Force32() {
        return WGPUStatus_Force32;
    }
    private static final int WGPUStencilOperation_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_Undefined = 0
     * }
     */
    public static int WGPUStencilOperation_Undefined() {
        return WGPUStencilOperation_Undefined;
    }
    private static final int WGPUStencilOperation_Keep = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_Keep = 1
     * }
     */
    public static int WGPUStencilOperation_Keep() {
        return WGPUStencilOperation_Keep;
    }
    private static final int WGPUStencilOperation_Zero = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_Zero = 2
     * }
     */
    public static int WGPUStencilOperation_Zero() {
        return WGPUStencilOperation_Zero;
    }
    private static final int WGPUStencilOperation_Replace = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_Replace = 3
     * }
     */
    public static int WGPUStencilOperation_Replace() {
        return WGPUStencilOperation_Replace;
    }
    private static final int WGPUStencilOperation_Invert = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_Invert = 4
     * }
     */
    public static int WGPUStencilOperation_Invert() {
        return WGPUStencilOperation_Invert;
    }
    private static final int WGPUStencilOperation_IncrementClamp = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_IncrementClamp = 5
     * }
     */
    public static int WGPUStencilOperation_IncrementClamp() {
        return WGPUStencilOperation_IncrementClamp;
    }
    private static final int WGPUStencilOperation_DecrementClamp = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_DecrementClamp = 6
     * }
     */
    public static int WGPUStencilOperation_DecrementClamp() {
        return WGPUStencilOperation_DecrementClamp;
    }
    private static final int WGPUStencilOperation_IncrementWrap = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_IncrementWrap = 7
     * }
     */
    public static int WGPUStencilOperation_IncrementWrap() {
        return WGPUStencilOperation_IncrementWrap;
    }
    private static final int WGPUStencilOperation_DecrementWrap = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_DecrementWrap = 8
     * }
     */
    public static int WGPUStencilOperation_DecrementWrap() {
        return WGPUStencilOperation_DecrementWrap;
    }
    private static final int WGPUStencilOperation_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUStencilOperation.WGPUStencilOperation_Force32 = 2147483647
     * }
     */
    public static int WGPUStencilOperation_Force32() {
        return WGPUStencilOperation_Force32;
    }
    private static final int WGPUStorageTextureAccess_BindingNotUsed = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_BindingNotUsed = 0
     * }
     */
    public static int WGPUStorageTextureAccess_BindingNotUsed() {
        return WGPUStorageTextureAccess_BindingNotUsed;
    }
    private static final int WGPUStorageTextureAccess_Undefined = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_Undefined = 1
     * }
     */
    public static int WGPUStorageTextureAccess_Undefined() {
        return WGPUStorageTextureAccess_Undefined;
    }
    private static final int WGPUStorageTextureAccess_WriteOnly = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_WriteOnly = 2
     * }
     */
    public static int WGPUStorageTextureAccess_WriteOnly() {
        return WGPUStorageTextureAccess_WriteOnly;
    }
    private static final int WGPUStorageTextureAccess_ReadOnly = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_ReadOnly = 3
     * }
     */
    public static int WGPUStorageTextureAccess_ReadOnly() {
        return WGPUStorageTextureAccess_ReadOnly;
    }
    private static final int WGPUStorageTextureAccess_ReadWrite = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_ReadWrite = 4
     * }
     */
    public static int WGPUStorageTextureAccess_ReadWrite() {
        return WGPUStorageTextureAccess_ReadWrite;
    }
    private static final int WGPUStorageTextureAccess_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_Force32 = 2147483647
     * }
     */
    public static int WGPUStorageTextureAccess_Force32() {
        return WGPUStorageTextureAccess_Force32;
    }
    private static final int WGPUStoreOp_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUStoreOp.WGPUStoreOp_Undefined = 0
     * }
     */
    public static int WGPUStoreOp_Undefined() {
        return WGPUStoreOp_Undefined;
    }
    private static final int WGPUStoreOp_Store = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUStoreOp.WGPUStoreOp_Store = 1
     * }
     */
    public static int WGPUStoreOp_Store() {
        return WGPUStoreOp_Store;
    }
    private static final int WGPUStoreOp_Discard = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUStoreOp.WGPUStoreOp_Discard = 2
     * }
     */
    public static int WGPUStoreOp_Discard() {
        return WGPUStoreOp_Discard;
    }
    private static final int WGPUStoreOp_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUStoreOp.WGPUStoreOp_Force32 = 2147483647
     * }
     */
    public static int WGPUStoreOp_Force32() {
        return WGPUStoreOp_Force32;
    }
    private static final int WGPUSType_ShaderSourceSPIRV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_ShaderSourceSPIRV = 1
     * }
     */
    public static int WGPUSType_ShaderSourceSPIRV() {
        return WGPUSType_ShaderSourceSPIRV;
    }
    private static final int WGPUSType_ShaderSourceWGSL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_ShaderSourceWGSL = 2
     * }
     */
    public static int WGPUSType_ShaderSourceWGSL() {
        return WGPUSType_ShaderSourceWGSL;
    }
    private static final int WGPUSType_RenderPassMaxDrawCount = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_RenderPassMaxDrawCount = 3
     * }
     */
    public static int WGPUSType_RenderPassMaxDrawCount() {
        return WGPUSType_RenderPassMaxDrawCount;
    }
    private static final int WGPUSType_SurfaceSourceMetalLayer = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_SurfaceSourceMetalLayer = 4
     * }
     */
    public static int WGPUSType_SurfaceSourceMetalLayer() {
        return WGPUSType_SurfaceSourceMetalLayer;
    }
    private static final int WGPUSType_SurfaceSourceWindowsHWND = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_SurfaceSourceWindowsHWND = 5
     * }
     */
    public static int WGPUSType_SurfaceSourceWindowsHWND() {
        return WGPUSType_SurfaceSourceWindowsHWND;
    }
    private static final int WGPUSType_SurfaceSourceXlibWindow = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_SurfaceSourceXlibWindow = 6
     * }
     */
    public static int WGPUSType_SurfaceSourceXlibWindow() {
        return WGPUSType_SurfaceSourceXlibWindow;
    }
    private static final int WGPUSType_SurfaceSourceWaylandSurface = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_SurfaceSourceWaylandSurface = 7
     * }
     */
    public static int WGPUSType_SurfaceSourceWaylandSurface() {
        return WGPUSType_SurfaceSourceWaylandSurface;
    }
    private static final int WGPUSType_SurfaceSourceAndroidNativeWindow = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_SurfaceSourceAndroidNativeWindow = 8
     * }
     */
    public static int WGPUSType_SurfaceSourceAndroidNativeWindow() {
        return WGPUSType_SurfaceSourceAndroidNativeWindow;
    }
    private static final int WGPUSType_SurfaceSourceXCBWindow = (int)9L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_SurfaceSourceXCBWindow = 9
     * }
     */
    public static int WGPUSType_SurfaceSourceXCBWindow() {
        return WGPUSType_SurfaceSourceXCBWindow;
    }
    private static final int WGPUSType_SurfaceColorManagement = (int)10L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_SurfaceColorManagement = 10
     * }
     */
    public static int WGPUSType_SurfaceColorManagement() {
        return WGPUSType_SurfaceColorManagement;
    }
    private static final int WGPUSType_RequestAdapterWebXROptions = (int)11L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_RequestAdapterWebXROptions = 11
     * }
     */
    public static int WGPUSType_RequestAdapterWebXROptions() {
        return WGPUSType_RequestAdapterWebXROptions;
    }
    private static final int WGPUSType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUSType.WGPUSType_Force32 = 2147483647
     * }
     */
    public static int WGPUSType_Force32() {
        return WGPUSType_Force32;
    }
    private static final int WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal = 1
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal() {
        return WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal;
    }
    private static final int WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal = 2
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal() {
        return WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal;
    }
    private static final int WGPUSurfaceGetCurrentTextureStatus_Timeout = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Timeout = 3
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Timeout() {
        return WGPUSurfaceGetCurrentTextureStatus_Timeout;
    }
    private static final int WGPUSurfaceGetCurrentTextureStatus_Outdated = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Outdated = 4
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Outdated() {
        return WGPUSurfaceGetCurrentTextureStatus_Outdated;
    }
    private static final int WGPUSurfaceGetCurrentTextureStatus_Lost = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Lost = 5
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Lost() {
        return WGPUSurfaceGetCurrentTextureStatus_Lost;
    }
    private static final int WGPUSurfaceGetCurrentTextureStatus_Error = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Error = 6
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Error() {
        return WGPUSurfaceGetCurrentTextureStatus_Error;
    }
    private static final int WGPUSurfaceGetCurrentTextureStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Force32() {
        return WGPUSurfaceGetCurrentTextureStatus_Force32;
    }
    private static final int WGPUTextureAspect_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureAspect.WGPUTextureAspect_Undefined = 0
     * }
     */
    public static int WGPUTextureAspect_Undefined() {
        return WGPUTextureAspect_Undefined;
    }
    private static final int WGPUTextureAspect_All = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureAspect.WGPUTextureAspect_All = 1
     * }
     */
    public static int WGPUTextureAspect_All() {
        return WGPUTextureAspect_All;
    }
    private static final int WGPUTextureAspect_StencilOnly = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureAspect.WGPUTextureAspect_StencilOnly = 2
     * }
     */
    public static int WGPUTextureAspect_StencilOnly() {
        return WGPUTextureAspect_StencilOnly;
    }
    private static final int WGPUTextureAspect_DepthOnly = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureAspect.WGPUTextureAspect_DepthOnly = 3
     * }
     */
    public static int WGPUTextureAspect_DepthOnly() {
        return WGPUTextureAspect_DepthOnly;
    }
    private static final int WGPUTextureAspect_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureAspect.WGPUTextureAspect_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureAspect_Force32() {
        return WGPUTextureAspect_Force32;
    }
    private static final int WGPUTextureDimension_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureDimension.WGPUTextureDimension_Undefined = 0
     * }
     */
    public static int WGPUTextureDimension_Undefined() {
        return WGPUTextureDimension_Undefined;
    }
    private static final int WGPUTextureDimension_1D = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureDimension.WGPUTextureDimension_1D = 1
     * }
     */
    public static int WGPUTextureDimension_1D() {
        return WGPUTextureDimension_1D;
    }
    private static final int WGPUTextureDimension_2D = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureDimension.WGPUTextureDimension_2D = 2
     * }
     */
    public static int WGPUTextureDimension_2D() {
        return WGPUTextureDimension_2D;
    }
    private static final int WGPUTextureDimension_3D = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureDimension.WGPUTextureDimension_3D = 3
     * }
     */
    public static int WGPUTextureDimension_3D() {
        return WGPUTextureDimension_3D;
    }
    private static final int WGPUTextureDimension_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureDimension.WGPUTextureDimension_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureDimension_Force32() {
        return WGPUTextureDimension_Force32;
    }
    private static final int WGPUTextureFormat_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_Undefined = 0
     * }
     */
    public static int WGPUTextureFormat_Undefined() {
        return WGPUTextureFormat_Undefined;
    }
    private static final int WGPUTextureFormat_R8Unorm = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R8Unorm = 1
     * }
     */
    public static int WGPUTextureFormat_R8Unorm() {
        return WGPUTextureFormat_R8Unorm;
    }
    private static final int WGPUTextureFormat_R8Snorm = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R8Snorm = 2
     * }
     */
    public static int WGPUTextureFormat_R8Snorm() {
        return WGPUTextureFormat_R8Snorm;
    }
    private static final int WGPUTextureFormat_R8Uint = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R8Uint = 3
     * }
     */
    public static int WGPUTextureFormat_R8Uint() {
        return WGPUTextureFormat_R8Uint;
    }
    private static final int WGPUTextureFormat_R8Sint = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R8Sint = 4
     * }
     */
    public static int WGPUTextureFormat_R8Sint() {
        return WGPUTextureFormat_R8Sint;
    }
    private static final int WGPUTextureFormat_R16Unorm = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R16Unorm = 5
     * }
     */
    public static int WGPUTextureFormat_R16Unorm() {
        return WGPUTextureFormat_R16Unorm;
    }
    private static final int WGPUTextureFormat_R16Snorm = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R16Snorm = 6
     * }
     */
    public static int WGPUTextureFormat_R16Snorm() {
        return WGPUTextureFormat_R16Snorm;
    }
    private static final int WGPUTextureFormat_R16Uint = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R16Uint = 7
     * }
     */
    public static int WGPUTextureFormat_R16Uint() {
        return WGPUTextureFormat_R16Uint;
    }
    private static final int WGPUTextureFormat_R16Sint = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R16Sint = 8
     * }
     */
    public static int WGPUTextureFormat_R16Sint() {
        return WGPUTextureFormat_R16Sint;
    }
    private static final int WGPUTextureFormat_R16Float = (int)9L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R16Float = 9
     * }
     */
    public static int WGPUTextureFormat_R16Float() {
        return WGPUTextureFormat_R16Float;
    }
    private static final int WGPUTextureFormat_RG8Unorm = (int)10L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG8Unorm = 10
     * }
     */
    public static int WGPUTextureFormat_RG8Unorm() {
        return WGPUTextureFormat_RG8Unorm;
    }
    private static final int WGPUTextureFormat_RG8Snorm = (int)11L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG8Snorm = 11
     * }
     */
    public static int WGPUTextureFormat_RG8Snorm() {
        return WGPUTextureFormat_RG8Snorm;
    }
    private static final int WGPUTextureFormat_RG8Uint = (int)12L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG8Uint = 12
     * }
     */
    public static int WGPUTextureFormat_RG8Uint() {
        return WGPUTextureFormat_RG8Uint;
    }
    private static final int WGPUTextureFormat_RG8Sint = (int)13L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG8Sint = 13
     * }
     */
    public static int WGPUTextureFormat_RG8Sint() {
        return WGPUTextureFormat_RG8Sint;
    }
    private static final int WGPUTextureFormat_R32Float = (int)14L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R32Float = 14
     * }
     */
    public static int WGPUTextureFormat_R32Float() {
        return WGPUTextureFormat_R32Float;
    }
    private static final int WGPUTextureFormat_R32Uint = (int)15L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R32Uint = 15
     * }
     */
    public static int WGPUTextureFormat_R32Uint() {
        return WGPUTextureFormat_R32Uint;
    }
    private static final int WGPUTextureFormat_R32Sint = (int)16L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_R32Sint = 16
     * }
     */
    public static int WGPUTextureFormat_R32Sint() {
        return WGPUTextureFormat_R32Sint;
    }
    private static final int WGPUTextureFormat_RG16Unorm = (int)17L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG16Unorm = 17
     * }
     */
    public static int WGPUTextureFormat_RG16Unorm() {
        return WGPUTextureFormat_RG16Unorm;
    }
    private static final int WGPUTextureFormat_RG16Snorm = (int)18L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG16Snorm = 18
     * }
     */
    public static int WGPUTextureFormat_RG16Snorm() {
        return WGPUTextureFormat_RG16Snorm;
    }
    private static final int WGPUTextureFormat_RG16Uint = (int)19L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG16Uint = 19
     * }
     */
    public static int WGPUTextureFormat_RG16Uint() {
        return WGPUTextureFormat_RG16Uint;
    }
    private static final int WGPUTextureFormat_RG16Sint = (int)20L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG16Sint = 20
     * }
     */
    public static int WGPUTextureFormat_RG16Sint() {
        return WGPUTextureFormat_RG16Sint;
    }
    private static final int WGPUTextureFormat_RG16Float = (int)21L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG16Float = 21
     * }
     */
    public static int WGPUTextureFormat_RG16Float() {
        return WGPUTextureFormat_RG16Float;
    }
    private static final int WGPUTextureFormat_RGBA8Unorm = (int)22L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8Unorm = 22
     * }
     */
    public static int WGPUTextureFormat_RGBA8Unorm() {
        return WGPUTextureFormat_RGBA8Unorm;
    }
    private static final int WGPUTextureFormat_RGBA8UnormSrgb = (int)23L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8UnormSrgb = 23
     * }
     */
    public static int WGPUTextureFormat_RGBA8UnormSrgb() {
        return WGPUTextureFormat_RGBA8UnormSrgb;
    }
    private static final int WGPUTextureFormat_RGBA8Snorm = (int)24L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8Snorm = 24
     * }
     */
    public static int WGPUTextureFormat_RGBA8Snorm() {
        return WGPUTextureFormat_RGBA8Snorm;
    }
    private static final int WGPUTextureFormat_RGBA8Uint = (int)25L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8Uint = 25
     * }
     */
    public static int WGPUTextureFormat_RGBA8Uint() {
        return WGPUTextureFormat_RGBA8Uint;
    }
    private static final int WGPUTextureFormat_RGBA8Sint = (int)26L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8Sint = 26
     * }
     */
    public static int WGPUTextureFormat_RGBA8Sint() {
        return WGPUTextureFormat_RGBA8Sint;
    }
    private static final int WGPUTextureFormat_BGRA8Unorm = (int)27L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BGRA8Unorm = 27
     * }
     */
    public static int WGPUTextureFormat_BGRA8Unorm() {
        return WGPUTextureFormat_BGRA8Unorm;
    }
    private static final int WGPUTextureFormat_BGRA8UnormSrgb = (int)28L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BGRA8UnormSrgb = 28
     * }
     */
    public static int WGPUTextureFormat_BGRA8UnormSrgb() {
        return WGPUTextureFormat_BGRA8UnormSrgb;
    }
    private static final int WGPUTextureFormat_RGB10A2Uint = (int)29L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGB10A2Uint = 29
     * }
     */
    public static int WGPUTextureFormat_RGB10A2Uint() {
        return WGPUTextureFormat_RGB10A2Uint;
    }
    private static final int WGPUTextureFormat_RGB10A2Unorm = (int)30L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGB10A2Unorm = 30
     * }
     */
    public static int WGPUTextureFormat_RGB10A2Unorm() {
        return WGPUTextureFormat_RGB10A2Unorm;
    }
    private static final int WGPUTextureFormat_RG11B10Ufloat = (int)31L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG11B10Ufloat = 31
     * }
     */
    public static int WGPUTextureFormat_RG11B10Ufloat() {
        return WGPUTextureFormat_RG11B10Ufloat;
    }
    private static final int WGPUTextureFormat_RGB9E5Ufloat = (int)32L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGB9E5Ufloat = 32
     * }
     */
    public static int WGPUTextureFormat_RGB9E5Ufloat() {
        return WGPUTextureFormat_RGB9E5Ufloat;
    }
    private static final int WGPUTextureFormat_RG32Float = (int)33L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG32Float = 33
     * }
     */
    public static int WGPUTextureFormat_RG32Float() {
        return WGPUTextureFormat_RG32Float;
    }
    private static final int WGPUTextureFormat_RG32Uint = (int)34L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG32Uint = 34
     * }
     */
    public static int WGPUTextureFormat_RG32Uint() {
        return WGPUTextureFormat_RG32Uint;
    }
    private static final int WGPUTextureFormat_RG32Sint = (int)35L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RG32Sint = 35
     * }
     */
    public static int WGPUTextureFormat_RG32Sint() {
        return WGPUTextureFormat_RG32Sint;
    }
    private static final int WGPUTextureFormat_RGBA16Unorm = (int)36L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA16Unorm = 36
     * }
     */
    public static int WGPUTextureFormat_RGBA16Unorm() {
        return WGPUTextureFormat_RGBA16Unorm;
    }
    private static final int WGPUTextureFormat_RGBA16Snorm = (int)37L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA16Snorm = 37
     * }
     */
    public static int WGPUTextureFormat_RGBA16Snorm() {
        return WGPUTextureFormat_RGBA16Snorm;
    }
    private static final int WGPUTextureFormat_RGBA16Uint = (int)38L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA16Uint = 38
     * }
     */
    public static int WGPUTextureFormat_RGBA16Uint() {
        return WGPUTextureFormat_RGBA16Uint;
    }
    private static final int WGPUTextureFormat_RGBA16Sint = (int)39L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA16Sint = 39
     * }
     */
    public static int WGPUTextureFormat_RGBA16Sint() {
        return WGPUTextureFormat_RGBA16Sint;
    }
    private static final int WGPUTextureFormat_RGBA16Float = (int)40L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA16Float = 40
     * }
     */
    public static int WGPUTextureFormat_RGBA16Float() {
        return WGPUTextureFormat_RGBA16Float;
    }
    private static final int WGPUTextureFormat_RGBA32Float = (int)41L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA32Float = 41
     * }
     */
    public static int WGPUTextureFormat_RGBA32Float() {
        return WGPUTextureFormat_RGBA32Float;
    }
    private static final int WGPUTextureFormat_RGBA32Uint = (int)42L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA32Uint = 42
     * }
     */
    public static int WGPUTextureFormat_RGBA32Uint() {
        return WGPUTextureFormat_RGBA32Uint;
    }
    private static final int WGPUTextureFormat_RGBA32Sint = (int)43L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_RGBA32Sint = 43
     * }
     */
    public static int WGPUTextureFormat_RGBA32Sint() {
        return WGPUTextureFormat_RGBA32Sint;
    }
    private static final int WGPUTextureFormat_Stencil8 = (int)44L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_Stencil8 = 44
     * }
     */
    public static int WGPUTextureFormat_Stencil8() {
        return WGPUTextureFormat_Stencil8;
    }
    private static final int WGPUTextureFormat_Depth16Unorm = (int)45L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_Depth16Unorm = 45
     * }
     */
    public static int WGPUTextureFormat_Depth16Unorm() {
        return WGPUTextureFormat_Depth16Unorm;
    }
    private static final int WGPUTextureFormat_Depth24Plus = (int)46L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_Depth24Plus = 46
     * }
     */
    public static int WGPUTextureFormat_Depth24Plus() {
        return WGPUTextureFormat_Depth24Plus;
    }
    private static final int WGPUTextureFormat_Depth24PlusStencil8 = (int)47L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_Depth24PlusStencil8 = 47
     * }
     */
    public static int WGPUTextureFormat_Depth24PlusStencil8() {
        return WGPUTextureFormat_Depth24PlusStencil8;
    }
    private static final int WGPUTextureFormat_Depth32Float = (int)48L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_Depth32Float = 48
     * }
     */
    public static int WGPUTextureFormat_Depth32Float() {
        return WGPUTextureFormat_Depth32Float;
    }
    private static final int WGPUTextureFormat_Depth32FloatStencil8 = (int)49L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_Depth32FloatStencil8 = 49
     * }
     */
    public static int WGPUTextureFormat_Depth32FloatStencil8() {
        return WGPUTextureFormat_Depth32FloatStencil8;
    }
    private static final int WGPUTextureFormat_BC1RGBAUnorm = (int)50L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC1RGBAUnorm = 50
     * }
     */
    public static int WGPUTextureFormat_BC1RGBAUnorm() {
        return WGPUTextureFormat_BC1RGBAUnorm;
    }
    private static final int WGPUTextureFormat_BC1RGBAUnormSrgb = (int)51L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC1RGBAUnormSrgb = 51
     * }
     */
    public static int WGPUTextureFormat_BC1RGBAUnormSrgb() {
        return WGPUTextureFormat_BC1RGBAUnormSrgb;
    }
    private static final int WGPUTextureFormat_BC2RGBAUnorm = (int)52L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC2RGBAUnorm = 52
     * }
     */
    public static int WGPUTextureFormat_BC2RGBAUnorm() {
        return WGPUTextureFormat_BC2RGBAUnorm;
    }
    private static final int WGPUTextureFormat_BC2RGBAUnormSrgb = (int)53L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC2RGBAUnormSrgb = 53
     * }
     */
    public static int WGPUTextureFormat_BC2RGBAUnormSrgb() {
        return WGPUTextureFormat_BC2RGBAUnormSrgb;
    }
    private static final int WGPUTextureFormat_BC3RGBAUnorm = (int)54L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC3RGBAUnorm = 54
     * }
     */
    public static int WGPUTextureFormat_BC3RGBAUnorm() {
        return WGPUTextureFormat_BC3RGBAUnorm;
    }
    private static final int WGPUTextureFormat_BC3RGBAUnormSrgb = (int)55L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC3RGBAUnormSrgb = 55
     * }
     */
    public static int WGPUTextureFormat_BC3RGBAUnormSrgb() {
        return WGPUTextureFormat_BC3RGBAUnormSrgb;
    }
    private static final int WGPUTextureFormat_BC4RUnorm = (int)56L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC4RUnorm = 56
     * }
     */
    public static int WGPUTextureFormat_BC4RUnorm() {
        return WGPUTextureFormat_BC4RUnorm;
    }
    private static final int WGPUTextureFormat_BC4RSnorm = (int)57L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC4RSnorm = 57
     * }
     */
    public static int WGPUTextureFormat_BC4RSnorm() {
        return WGPUTextureFormat_BC4RSnorm;
    }
    private static final int WGPUTextureFormat_BC5RGUnorm = (int)58L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC5RGUnorm = 58
     * }
     */
    public static int WGPUTextureFormat_BC5RGUnorm() {
        return WGPUTextureFormat_BC5RGUnorm;
    }
    private static final int WGPUTextureFormat_BC5RGSnorm = (int)59L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC5RGSnorm = 59
     * }
     */
    public static int WGPUTextureFormat_BC5RGSnorm() {
        return WGPUTextureFormat_BC5RGSnorm;
    }
    private static final int WGPUTextureFormat_BC6HRGBUfloat = (int)60L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC6HRGBUfloat = 60
     * }
     */
    public static int WGPUTextureFormat_BC6HRGBUfloat() {
        return WGPUTextureFormat_BC6HRGBUfloat;
    }
    private static final int WGPUTextureFormat_BC6HRGBFloat = (int)61L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC6HRGBFloat = 61
     * }
     */
    public static int WGPUTextureFormat_BC6HRGBFloat() {
        return WGPUTextureFormat_BC6HRGBFloat;
    }
    private static final int WGPUTextureFormat_BC7RGBAUnorm = (int)62L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC7RGBAUnorm = 62
     * }
     */
    public static int WGPUTextureFormat_BC7RGBAUnorm() {
        return WGPUTextureFormat_BC7RGBAUnorm;
    }
    private static final int WGPUTextureFormat_BC7RGBAUnormSrgb = (int)63L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_BC7RGBAUnormSrgb = 63
     * }
     */
    public static int WGPUTextureFormat_BC7RGBAUnormSrgb() {
        return WGPUTextureFormat_BC7RGBAUnormSrgb;
    }
    private static final int WGPUTextureFormat_ETC2RGB8Unorm = (int)64L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGB8Unorm = 64
     * }
     */
    public static int WGPUTextureFormat_ETC2RGB8Unorm() {
        return WGPUTextureFormat_ETC2RGB8Unorm;
    }
    private static final int WGPUTextureFormat_ETC2RGB8UnormSrgb = (int)65L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGB8UnormSrgb = 65
     * }
     */
    public static int WGPUTextureFormat_ETC2RGB8UnormSrgb() {
        return WGPUTextureFormat_ETC2RGB8UnormSrgb;
    }
    private static final int WGPUTextureFormat_ETC2RGB8A1Unorm = (int)66L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGB8A1Unorm = 66
     * }
     */
    public static int WGPUTextureFormat_ETC2RGB8A1Unorm() {
        return WGPUTextureFormat_ETC2RGB8A1Unorm;
    }
    private static final int WGPUTextureFormat_ETC2RGB8A1UnormSrgb = (int)67L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGB8A1UnormSrgb = 67
     * }
     */
    public static int WGPUTextureFormat_ETC2RGB8A1UnormSrgb() {
        return WGPUTextureFormat_ETC2RGB8A1UnormSrgb;
    }
    private static final int WGPUTextureFormat_ETC2RGBA8Unorm = (int)68L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGBA8Unorm = 68
     * }
     */
    public static int WGPUTextureFormat_ETC2RGBA8Unorm() {
        return WGPUTextureFormat_ETC2RGBA8Unorm;
    }
    private static final int WGPUTextureFormat_ETC2RGBA8UnormSrgb = (int)69L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGBA8UnormSrgb = 69
     * }
     */
    public static int WGPUTextureFormat_ETC2RGBA8UnormSrgb() {
        return WGPUTextureFormat_ETC2RGBA8UnormSrgb;
    }
    private static final int WGPUTextureFormat_EACR11Unorm = (int)70L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_EACR11Unorm = 70
     * }
     */
    public static int WGPUTextureFormat_EACR11Unorm() {
        return WGPUTextureFormat_EACR11Unorm;
    }
    private static final int WGPUTextureFormat_EACR11Snorm = (int)71L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_EACR11Snorm = 71
     * }
     */
    public static int WGPUTextureFormat_EACR11Snorm() {
        return WGPUTextureFormat_EACR11Snorm;
    }
    private static final int WGPUTextureFormat_EACRG11Unorm = (int)72L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_EACRG11Unorm = 72
     * }
     */
    public static int WGPUTextureFormat_EACRG11Unorm() {
        return WGPUTextureFormat_EACRG11Unorm;
    }
    private static final int WGPUTextureFormat_EACRG11Snorm = (int)73L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_EACRG11Snorm = 73
     * }
     */
    public static int WGPUTextureFormat_EACRG11Snorm() {
        return WGPUTextureFormat_EACRG11Snorm;
    }
    private static final int WGPUTextureFormat_ASTC4x4Unorm = (int)74L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC4x4Unorm = 74
     * }
     */
    public static int WGPUTextureFormat_ASTC4x4Unorm() {
        return WGPUTextureFormat_ASTC4x4Unorm;
    }
    private static final int WGPUTextureFormat_ASTC4x4UnormSrgb = (int)75L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC4x4UnormSrgb = 75
     * }
     */
    public static int WGPUTextureFormat_ASTC4x4UnormSrgb() {
        return WGPUTextureFormat_ASTC4x4UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC5x4Unorm = (int)76L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC5x4Unorm = 76
     * }
     */
    public static int WGPUTextureFormat_ASTC5x4Unorm() {
        return WGPUTextureFormat_ASTC5x4Unorm;
    }
    private static final int WGPUTextureFormat_ASTC5x4UnormSrgb = (int)77L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC5x4UnormSrgb = 77
     * }
     */
    public static int WGPUTextureFormat_ASTC5x4UnormSrgb() {
        return WGPUTextureFormat_ASTC5x4UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC5x5Unorm = (int)78L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC5x5Unorm = 78
     * }
     */
    public static int WGPUTextureFormat_ASTC5x5Unorm() {
        return WGPUTextureFormat_ASTC5x5Unorm;
    }
    private static final int WGPUTextureFormat_ASTC5x5UnormSrgb = (int)79L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC5x5UnormSrgb = 79
     * }
     */
    public static int WGPUTextureFormat_ASTC5x5UnormSrgb() {
        return WGPUTextureFormat_ASTC5x5UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC6x5Unorm = (int)80L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC6x5Unorm = 80
     * }
     */
    public static int WGPUTextureFormat_ASTC6x5Unorm() {
        return WGPUTextureFormat_ASTC6x5Unorm;
    }
    private static final int WGPUTextureFormat_ASTC6x5UnormSrgb = (int)81L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC6x5UnormSrgb = 81
     * }
     */
    public static int WGPUTextureFormat_ASTC6x5UnormSrgb() {
        return WGPUTextureFormat_ASTC6x5UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC6x6Unorm = (int)82L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC6x6Unorm = 82
     * }
     */
    public static int WGPUTextureFormat_ASTC6x6Unorm() {
        return WGPUTextureFormat_ASTC6x6Unorm;
    }
    private static final int WGPUTextureFormat_ASTC6x6UnormSrgb = (int)83L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC6x6UnormSrgb = 83
     * }
     */
    public static int WGPUTextureFormat_ASTC6x6UnormSrgb() {
        return WGPUTextureFormat_ASTC6x6UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC8x5Unorm = (int)84L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x5Unorm = 84
     * }
     */
    public static int WGPUTextureFormat_ASTC8x5Unorm() {
        return WGPUTextureFormat_ASTC8x5Unorm;
    }
    private static final int WGPUTextureFormat_ASTC8x5UnormSrgb = (int)85L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x5UnormSrgb = 85
     * }
     */
    public static int WGPUTextureFormat_ASTC8x5UnormSrgb() {
        return WGPUTextureFormat_ASTC8x5UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC8x6Unorm = (int)86L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x6Unorm = 86
     * }
     */
    public static int WGPUTextureFormat_ASTC8x6Unorm() {
        return WGPUTextureFormat_ASTC8x6Unorm;
    }
    private static final int WGPUTextureFormat_ASTC8x6UnormSrgb = (int)87L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x6UnormSrgb = 87
     * }
     */
    public static int WGPUTextureFormat_ASTC8x6UnormSrgb() {
        return WGPUTextureFormat_ASTC8x6UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC8x8Unorm = (int)88L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x8Unorm = 88
     * }
     */
    public static int WGPUTextureFormat_ASTC8x8Unorm() {
        return WGPUTextureFormat_ASTC8x8Unorm;
    }
    private static final int WGPUTextureFormat_ASTC8x8UnormSrgb = (int)89L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x8UnormSrgb = 89
     * }
     */
    public static int WGPUTextureFormat_ASTC8x8UnormSrgb() {
        return WGPUTextureFormat_ASTC8x8UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC10x5Unorm = (int)90L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x5Unorm = 90
     * }
     */
    public static int WGPUTextureFormat_ASTC10x5Unorm() {
        return WGPUTextureFormat_ASTC10x5Unorm;
    }
    private static final int WGPUTextureFormat_ASTC10x5UnormSrgb = (int)91L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x5UnormSrgb = 91
     * }
     */
    public static int WGPUTextureFormat_ASTC10x5UnormSrgb() {
        return WGPUTextureFormat_ASTC10x5UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC10x6Unorm = (int)92L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x6Unorm = 92
     * }
     */
    public static int WGPUTextureFormat_ASTC10x6Unorm() {
        return WGPUTextureFormat_ASTC10x6Unorm;
    }
    private static final int WGPUTextureFormat_ASTC10x6UnormSrgb = (int)93L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x6UnormSrgb = 93
     * }
     */
    public static int WGPUTextureFormat_ASTC10x6UnormSrgb() {
        return WGPUTextureFormat_ASTC10x6UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC10x8Unorm = (int)94L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x8Unorm = 94
     * }
     */
    public static int WGPUTextureFormat_ASTC10x8Unorm() {
        return WGPUTextureFormat_ASTC10x8Unorm;
    }
    private static final int WGPUTextureFormat_ASTC10x8UnormSrgb = (int)95L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x8UnormSrgb = 95
     * }
     */
    public static int WGPUTextureFormat_ASTC10x8UnormSrgb() {
        return WGPUTextureFormat_ASTC10x8UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC10x10Unorm = (int)96L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x10Unorm = 96
     * }
     */
    public static int WGPUTextureFormat_ASTC10x10Unorm() {
        return WGPUTextureFormat_ASTC10x10Unorm;
    }
    private static final int WGPUTextureFormat_ASTC10x10UnormSrgb = (int)97L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x10UnormSrgb = 97
     * }
     */
    public static int WGPUTextureFormat_ASTC10x10UnormSrgb() {
        return WGPUTextureFormat_ASTC10x10UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC12x10Unorm = (int)98L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC12x10Unorm = 98
     * }
     */
    public static int WGPUTextureFormat_ASTC12x10Unorm() {
        return WGPUTextureFormat_ASTC12x10Unorm;
    }
    private static final int WGPUTextureFormat_ASTC12x10UnormSrgb = (int)99L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC12x10UnormSrgb = 99
     * }
     */
    public static int WGPUTextureFormat_ASTC12x10UnormSrgb() {
        return WGPUTextureFormat_ASTC12x10UnormSrgb;
    }
    private static final int WGPUTextureFormat_ASTC12x12Unorm = (int)100L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC12x12Unorm = 100
     * }
     */
    public static int WGPUTextureFormat_ASTC12x12Unorm() {
        return WGPUTextureFormat_ASTC12x12Unorm;
    }
    private static final int WGPUTextureFormat_ASTC12x12UnormSrgb = (int)101L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_ASTC12x12UnormSrgb = 101
     * }
     */
    public static int WGPUTextureFormat_ASTC12x12UnormSrgb() {
        return WGPUTextureFormat_ASTC12x12UnormSrgb;
    }
    private static final int WGPUTextureFormat_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureFormat.WGPUTextureFormat_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureFormat_Force32() {
        return WGPUTextureFormat_Force32;
    }
    private static final int WGPUTextureSampleType_BindingNotUsed = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureSampleType.WGPUTextureSampleType_BindingNotUsed = 0
     * }
     */
    public static int WGPUTextureSampleType_BindingNotUsed() {
        return WGPUTextureSampleType_BindingNotUsed;
    }
    private static final int WGPUTextureSampleType_Undefined = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureSampleType.WGPUTextureSampleType_Undefined = 1
     * }
     */
    public static int WGPUTextureSampleType_Undefined() {
        return WGPUTextureSampleType_Undefined;
    }
    private static final int WGPUTextureSampleType_Float = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureSampleType.WGPUTextureSampleType_Float = 2
     * }
     */
    public static int WGPUTextureSampleType_Float() {
        return WGPUTextureSampleType_Float;
    }
    private static final int WGPUTextureSampleType_UnfilterableFloat = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureSampleType.WGPUTextureSampleType_UnfilterableFloat = 3
     * }
     */
    public static int WGPUTextureSampleType_UnfilterableFloat() {
        return WGPUTextureSampleType_UnfilterableFloat;
    }
    private static final int WGPUTextureSampleType_Depth = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureSampleType.WGPUTextureSampleType_Depth = 4
     * }
     */
    public static int WGPUTextureSampleType_Depth() {
        return WGPUTextureSampleType_Depth;
    }
    private static final int WGPUTextureSampleType_Sint = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureSampleType.WGPUTextureSampleType_Sint = 5
     * }
     */
    public static int WGPUTextureSampleType_Sint() {
        return WGPUTextureSampleType_Sint;
    }
    private static final int WGPUTextureSampleType_Uint = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureSampleType.WGPUTextureSampleType_Uint = 6
     * }
     */
    public static int WGPUTextureSampleType_Uint() {
        return WGPUTextureSampleType_Uint;
    }
    private static final int WGPUTextureSampleType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureSampleType.WGPUTextureSampleType_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureSampleType_Force32() {
        return WGPUTextureSampleType_Force32;
    }
    private static final int WGPUTextureViewDimension_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureViewDimension.WGPUTextureViewDimension_Undefined = 0
     * }
     */
    public static int WGPUTextureViewDimension_Undefined() {
        return WGPUTextureViewDimension_Undefined;
    }
    private static final int WGPUTextureViewDimension_1D = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureViewDimension.WGPUTextureViewDimension_1D = 1
     * }
     */
    public static int WGPUTextureViewDimension_1D() {
        return WGPUTextureViewDimension_1D;
    }
    private static final int WGPUTextureViewDimension_2D = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureViewDimension.WGPUTextureViewDimension_2D = 2
     * }
     */
    public static int WGPUTextureViewDimension_2D() {
        return WGPUTextureViewDimension_2D;
    }
    private static final int WGPUTextureViewDimension_2DArray = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureViewDimension.WGPUTextureViewDimension_2DArray = 3
     * }
     */
    public static int WGPUTextureViewDimension_2DArray() {
        return WGPUTextureViewDimension_2DArray;
    }
    private static final int WGPUTextureViewDimension_Cube = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureViewDimension.WGPUTextureViewDimension_Cube = 4
     * }
     */
    public static int WGPUTextureViewDimension_Cube() {
        return WGPUTextureViewDimension_Cube;
    }
    private static final int WGPUTextureViewDimension_CubeArray = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureViewDimension.WGPUTextureViewDimension_CubeArray = 5
     * }
     */
    public static int WGPUTextureViewDimension_CubeArray() {
        return WGPUTextureViewDimension_CubeArray;
    }
    private static final int WGPUTextureViewDimension_3D = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureViewDimension.WGPUTextureViewDimension_3D = 6
     * }
     */
    public static int WGPUTextureViewDimension_3D() {
        return WGPUTextureViewDimension_3D;
    }
    private static final int WGPUTextureViewDimension_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUTextureViewDimension.WGPUTextureViewDimension_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureViewDimension_Force32() {
        return WGPUTextureViewDimension_Force32;
    }
    private static final int WGPUToneMappingMode_Standard = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUToneMappingMode.WGPUToneMappingMode_Standard = 1
     * }
     */
    public static int WGPUToneMappingMode_Standard() {
        return WGPUToneMappingMode_Standard;
    }
    private static final int WGPUToneMappingMode_Extended = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUToneMappingMode.WGPUToneMappingMode_Extended = 2
     * }
     */
    public static int WGPUToneMappingMode_Extended() {
        return WGPUToneMappingMode_Extended;
    }
    private static final int WGPUToneMappingMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUToneMappingMode.WGPUToneMappingMode_Force32 = 2147483647
     * }
     */
    public static int WGPUToneMappingMode_Force32() {
        return WGPUToneMappingMode_Force32;
    }
    private static final int WGPUVertexFormat_Uint8 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint8 = 1
     * }
     */
    public static int WGPUVertexFormat_Uint8() {
        return WGPUVertexFormat_Uint8;
    }
    private static final int WGPUVertexFormat_Uint8x2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint8x2 = 2
     * }
     */
    public static int WGPUVertexFormat_Uint8x2() {
        return WGPUVertexFormat_Uint8x2;
    }
    private static final int WGPUVertexFormat_Uint8x4 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint8x4 = 3
     * }
     */
    public static int WGPUVertexFormat_Uint8x4() {
        return WGPUVertexFormat_Uint8x4;
    }
    private static final int WGPUVertexFormat_Sint8 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint8 = 4
     * }
     */
    public static int WGPUVertexFormat_Sint8() {
        return WGPUVertexFormat_Sint8;
    }
    private static final int WGPUVertexFormat_Sint8x2 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint8x2 = 5
     * }
     */
    public static int WGPUVertexFormat_Sint8x2() {
        return WGPUVertexFormat_Sint8x2;
    }
    private static final int WGPUVertexFormat_Sint8x4 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint8x4 = 6
     * }
     */
    public static int WGPUVertexFormat_Sint8x4() {
        return WGPUVertexFormat_Sint8x4;
    }
    private static final int WGPUVertexFormat_Unorm8 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Unorm8 = 7
     * }
     */
    public static int WGPUVertexFormat_Unorm8() {
        return WGPUVertexFormat_Unorm8;
    }
    private static final int WGPUVertexFormat_Unorm8x2 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Unorm8x2 = 8
     * }
     */
    public static int WGPUVertexFormat_Unorm8x2() {
        return WGPUVertexFormat_Unorm8x2;
    }
    private static final int WGPUVertexFormat_Unorm8x4 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Unorm8x4 = 9
     * }
     */
    public static int WGPUVertexFormat_Unorm8x4() {
        return WGPUVertexFormat_Unorm8x4;
    }
    private static final int WGPUVertexFormat_Snorm8 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Snorm8 = 10
     * }
     */
    public static int WGPUVertexFormat_Snorm8() {
        return WGPUVertexFormat_Snorm8;
    }
    private static final int WGPUVertexFormat_Snorm8x2 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Snorm8x2 = 11
     * }
     */
    public static int WGPUVertexFormat_Snorm8x2() {
        return WGPUVertexFormat_Snorm8x2;
    }
    private static final int WGPUVertexFormat_Snorm8x4 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Snorm8x4 = 12
     * }
     */
    public static int WGPUVertexFormat_Snorm8x4() {
        return WGPUVertexFormat_Snorm8x4;
    }
    private static final int WGPUVertexFormat_Uint16 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint16 = 13
     * }
     */
    public static int WGPUVertexFormat_Uint16() {
        return WGPUVertexFormat_Uint16;
    }
    private static final int WGPUVertexFormat_Uint16x2 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint16x2 = 14
     * }
     */
    public static int WGPUVertexFormat_Uint16x2() {
        return WGPUVertexFormat_Uint16x2;
    }
    private static final int WGPUVertexFormat_Uint16x4 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint16x4 = 15
     * }
     */
    public static int WGPUVertexFormat_Uint16x4() {
        return WGPUVertexFormat_Uint16x4;
    }
    private static final int WGPUVertexFormat_Sint16 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint16 = 16
     * }
     */
    public static int WGPUVertexFormat_Sint16() {
        return WGPUVertexFormat_Sint16;
    }
    private static final int WGPUVertexFormat_Sint16x2 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint16x2 = 17
     * }
     */
    public static int WGPUVertexFormat_Sint16x2() {
        return WGPUVertexFormat_Sint16x2;
    }
    private static final int WGPUVertexFormat_Sint16x4 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint16x4 = 18
     * }
     */
    public static int WGPUVertexFormat_Sint16x4() {
        return WGPUVertexFormat_Sint16x4;
    }
    private static final int WGPUVertexFormat_Unorm16 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Unorm16 = 19
     * }
     */
    public static int WGPUVertexFormat_Unorm16() {
        return WGPUVertexFormat_Unorm16;
    }
    private static final int WGPUVertexFormat_Unorm16x2 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Unorm16x2 = 20
     * }
     */
    public static int WGPUVertexFormat_Unorm16x2() {
        return WGPUVertexFormat_Unorm16x2;
    }
    private static final int WGPUVertexFormat_Unorm16x4 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Unorm16x4 = 21
     * }
     */
    public static int WGPUVertexFormat_Unorm16x4() {
        return WGPUVertexFormat_Unorm16x4;
    }
    private static final int WGPUVertexFormat_Snorm16 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Snorm16 = 22
     * }
     */
    public static int WGPUVertexFormat_Snorm16() {
        return WGPUVertexFormat_Snorm16;
    }
    private static final int WGPUVertexFormat_Snorm16x2 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Snorm16x2 = 23
     * }
     */
    public static int WGPUVertexFormat_Snorm16x2() {
        return WGPUVertexFormat_Snorm16x2;
    }
    private static final int WGPUVertexFormat_Snorm16x4 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Snorm16x4 = 24
     * }
     */
    public static int WGPUVertexFormat_Snorm16x4() {
        return WGPUVertexFormat_Snorm16x4;
    }
    private static final int WGPUVertexFormat_Float16 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Float16 = 25
     * }
     */
    public static int WGPUVertexFormat_Float16() {
        return WGPUVertexFormat_Float16;
    }
    private static final int WGPUVertexFormat_Float16x2 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Float16x2 = 26
     * }
     */
    public static int WGPUVertexFormat_Float16x2() {
        return WGPUVertexFormat_Float16x2;
    }
    private static final int WGPUVertexFormat_Float16x4 = (int)27L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Float16x4 = 27
     * }
     */
    public static int WGPUVertexFormat_Float16x4() {
        return WGPUVertexFormat_Float16x4;
    }
    private static final int WGPUVertexFormat_Float32 = (int)28L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Float32 = 28
     * }
     */
    public static int WGPUVertexFormat_Float32() {
        return WGPUVertexFormat_Float32;
    }
    private static final int WGPUVertexFormat_Float32x2 = (int)29L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Float32x2 = 29
     * }
     */
    public static int WGPUVertexFormat_Float32x2() {
        return WGPUVertexFormat_Float32x2;
    }
    private static final int WGPUVertexFormat_Float32x3 = (int)30L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Float32x3 = 30
     * }
     */
    public static int WGPUVertexFormat_Float32x3() {
        return WGPUVertexFormat_Float32x3;
    }
    private static final int WGPUVertexFormat_Float32x4 = (int)31L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Float32x4 = 31
     * }
     */
    public static int WGPUVertexFormat_Float32x4() {
        return WGPUVertexFormat_Float32x4;
    }
    private static final int WGPUVertexFormat_Uint32 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint32 = 32
     * }
     */
    public static int WGPUVertexFormat_Uint32() {
        return WGPUVertexFormat_Uint32;
    }
    private static final int WGPUVertexFormat_Uint32x2 = (int)33L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint32x2 = 33
     * }
     */
    public static int WGPUVertexFormat_Uint32x2() {
        return WGPUVertexFormat_Uint32x2;
    }
    private static final int WGPUVertexFormat_Uint32x3 = (int)34L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint32x3 = 34
     * }
     */
    public static int WGPUVertexFormat_Uint32x3() {
        return WGPUVertexFormat_Uint32x3;
    }
    private static final int WGPUVertexFormat_Uint32x4 = (int)35L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Uint32x4 = 35
     * }
     */
    public static int WGPUVertexFormat_Uint32x4() {
        return WGPUVertexFormat_Uint32x4;
    }
    private static final int WGPUVertexFormat_Sint32 = (int)36L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint32 = 36
     * }
     */
    public static int WGPUVertexFormat_Sint32() {
        return WGPUVertexFormat_Sint32;
    }
    private static final int WGPUVertexFormat_Sint32x2 = (int)37L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint32x2 = 37
     * }
     */
    public static int WGPUVertexFormat_Sint32x2() {
        return WGPUVertexFormat_Sint32x2;
    }
    private static final int WGPUVertexFormat_Sint32x3 = (int)38L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint32x3 = 38
     * }
     */
    public static int WGPUVertexFormat_Sint32x3() {
        return WGPUVertexFormat_Sint32x3;
    }
    private static final int WGPUVertexFormat_Sint32x4 = (int)39L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Sint32x4 = 39
     * }
     */
    public static int WGPUVertexFormat_Sint32x4() {
        return WGPUVertexFormat_Sint32x4;
    }
    private static final int WGPUVertexFormat_Unorm10_10_10_2 = (int)40L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Unorm10_10_10_2 = 40
     * }
     */
    public static int WGPUVertexFormat_Unorm10_10_10_2() {
        return WGPUVertexFormat_Unorm10_10_10_2;
    }
    private static final int WGPUVertexFormat_Unorm8x4BGRA = (int)41L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Unorm8x4BGRA = 41
     * }
     */
    public static int WGPUVertexFormat_Unorm8x4BGRA() {
        return WGPUVertexFormat_Unorm8x4BGRA;
    }
    private static final int WGPUVertexFormat_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexFormat.WGPUVertexFormat_Force32 = 2147483647
     * }
     */
    public static int WGPUVertexFormat_Force32() {
        return WGPUVertexFormat_Force32;
    }
    private static final int WGPUVertexStepMode_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexStepMode.WGPUVertexStepMode_Undefined = 0
     * }
     */
    public static int WGPUVertexStepMode_Undefined() {
        return WGPUVertexStepMode_Undefined;
    }
    private static final int WGPUVertexStepMode_Vertex = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexStepMode.WGPUVertexStepMode_Vertex = 1
     * }
     */
    public static int WGPUVertexStepMode_Vertex() {
        return WGPUVertexStepMode_Vertex;
    }
    private static final int WGPUVertexStepMode_Instance = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexStepMode.WGPUVertexStepMode_Instance = 2
     * }
     */
    public static int WGPUVertexStepMode_Instance() {
        return WGPUVertexStepMode_Instance;
    }
    private static final int WGPUVertexStepMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUVertexStepMode.WGPUVertexStepMode_Force32 = 2147483647
     * }
     */
    public static int WGPUVertexStepMode_Force32() {
        return WGPUVertexStepMode_Force32;
    }
    private static final int WGPUWaitStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUWaitStatus.WGPUWaitStatus_Success = 1
     * }
     */
    public static int WGPUWaitStatus_Success() {
        return WGPUWaitStatus_Success;
    }
    private static final int WGPUWaitStatus_TimedOut = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUWaitStatus.WGPUWaitStatus_TimedOut = 2
     * }
     */
    public static int WGPUWaitStatus_TimedOut() {
        return WGPUWaitStatus_TimedOut;
    }
    private static final int WGPUWaitStatus_Error = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUWaitStatus.WGPUWaitStatus_Error = 3
     * }
     */
    public static int WGPUWaitStatus_Error() {
        return WGPUWaitStatus_Error;
    }
    private static final int WGPUWaitStatus_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUWaitStatus.WGPUWaitStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUWaitStatus_Force32() {
        return WGPUWaitStatus_Force32;
    }
    private static final int WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures = 1
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures() {
        return WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures;
    }
    private static final int WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct = 2
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct() {
        return WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct;
    }
    private static final int WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters = 3
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters() {
        return WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters;
    }
    private static final int WGPUWGSLLanguageFeatureName_PointerCompositeAccess = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_PointerCompositeAccess = 4
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_PointerCompositeAccess() {
        return WGPUWGSLLanguageFeatureName_PointerCompositeAccess;
    }
    private static final int WGPUWGSLLanguageFeatureName_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_Force32 = 2147483647
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_Force32() {
        return WGPUWGSLLanguageFeatureName_Force32;
    }
    /**
     * {@snippet lang=c :
     * typedef WGPUFlags WGPUBufferUsage
     * }
     */
    public static final OfLong WGPUBufferUsage = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef WGPUFlags WGPUColorWriteMask
     * }
     */
    public static final OfLong WGPUColorWriteMask = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef WGPUFlags WGPUMapMode
     * }
     */
    public static final OfLong WGPUMapMode = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef WGPUFlags WGPUShaderStage
     * }
     */
    public static final OfLong WGPUShaderStage = webgpu_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef WGPUFlags WGPUTextureUsage
     * }
     */
    public static final OfLong WGPUTextureUsage = webgpu_h.C_LONG;

    private static class wgpuCreateInstance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCreateInstance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuCreateInstance$descriptor() {
        return wgpuCreateInstance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuCreateInstance$handle() {
        return wgpuCreateInstance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCreateInstance$address() {
        return wgpuCreateInstance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCreateInstance(MemorySegment descriptor) {
        var mh$ = wgpuCreateInstance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCreateInstance", descriptor);
            }
            return (MemorySegment)mh$.invokeExact(descriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuGetInstanceFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuGetInstanceFeatures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuGetInstanceFeatures(WGPUSupportedInstanceFeatures *features)
     * }
     */
    public static FunctionDescriptor wgpuGetInstanceFeatures$descriptor() {
        return wgpuGetInstanceFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuGetInstanceFeatures(WGPUSupportedInstanceFeatures *features)
     * }
     */
    public static MethodHandle wgpuGetInstanceFeatures$handle() {
        return wgpuGetInstanceFeatures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuGetInstanceFeatures(WGPUSupportedInstanceFeatures *features)
     * }
     */
    public static MemorySegment wgpuGetInstanceFeatures$address() {
        return wgpuGetInstanceFeatures.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuGetInstanceFeatures(WGPUSupportedInstanceFeatures *features)
     * }
     */
    public static void wgpuGetInstanceFeatures(MemorySegment features) {
        var mh$ = wgpuGetInstanceFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuGetInstanceFeatures", features);
            }
            mh$.invokeExact(features);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuGetInstanceLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuGetInstanceLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUStatus wgpuGetInstanceLimits(WGPUInstanceLimits *limits)
     * }
     */
    public static FunctionDescriptor wgpuGetInstanceLimits$descriptor() {
        return wgpuGetInstanceLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUStatus wgpuGetInstanceLimits(WGPUInstanceLimits *limits)
     * }
     */
    public static MethodHandle wgpuGetInstanceLimits$handle() {
        return wgpuGetInstanceLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUStatus wgpuGetInstanceLimits(WGPUInstanceLimits *limits)
     * }
     */
    public static MemorySegment wgpuGetInstanceLimits$address() {
        return wgpuGetInstanceLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUStatus wgpuGetInstanceLimits(WGPUInstanceLimits *limits)
     * }
     */
    public static int wgpuGetInstanceLimits(MemorySegment limits) {
        var mh$ = wgpuGetInstanceLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuGetInstanceLimits", limits);
            }
            return (int)mh$.invokeExact(limits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuHasInstanceFeature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuHasInstanceFeature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUBool wgpuHasInstanceFeature(WGPUInstanceFeatureName feature)
     * }
     */
    public static FunctionDescriptor wgpuHasInstanceFeature$descriptor() {
        return wgpuHasInstanceFeature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUBool wgpuHasInstanceFeature(WGPUInstanceFeatureName feature)
     * }
     */
    public static MethodHandle wgpuHasInstanceFeature$handle() {
        return wgpuHasInstanceFeature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUBool wgpuHasInstanceFeature(WGPUInstanceFeatureName feature)
     * }
     */
    public static MemorySegment wgpuHasInstanceFeature$address() {
        return wgpuHasInstanceFeature.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUBool wgpuHasInstanceFeature(WGPUInstanceFeatureName feature)
     * }
     */
    public static int wgpuHasInstanceFeature(int feature) {
        var mh$ = wgpuHasInstanceFeature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuHasInstanceFeature", feature);
            }
            return (int)mh$.invokeExact(feature);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuGetProcAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuGetProcAddress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUProc wgpuGetProcAddress(WGPUStringView procName)
     * }
     */
    public static FunctionDescriptor wgpuGetProcAddress$descriptor() {
        return wgpuGetProcAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUProc wgpuGetProcAddress(WGPUStringView procName)
     * }
     */
    public static MethodHandle wgpuGetProcAddress$handle() {
        return wgpuGetProcAddress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUProc wgpuGetProcAddress(WGPUStringView procName)
     * }
     */
    public static MemorySegment wgpuGetProcAddress$address() {
        return wgpuGetProcAddress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUProc wgpuGetProcAddress(WGPUStringView procName)
     * }
     */
    public static MemorySegment wgpuGetProcAddress(MemorySegment procName) {
        var mh$ = wgpuGetProcAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuGetProcAddress", procName);
            }
            return (MemorySegment)mh$.invokeExact(procName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterGetFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterGetFeatures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures *features)
     * }
     */
    public static FunctionDescriptor wgpuAdapterGetFeatures$descriptor() {
        return wgpuAdapterGetFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures *features)
     * }
     */
    public static MethodHandle wgpuAdapterGetFeatures$handle() {
        return wgpuAdapterGetFeatures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures *features)
     * }
     */
    public static MemorySegment wgpuAdapterGetFeatures$address() {
        return wgpuAdapterGetFeatures.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures *features)
     * }
     */
    public static void wgpuAdapterGetFeatures(MemorySegment adapter, MemorySegment features) {
        var mh$ = wgpuAdapterGetFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterGetFeatures", adapter, features);
            }
            mh$.invokeExact(adapter, features);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterGetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterGetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo *info)
     * }
     */
    public static FunctionDescriptor wgpuAdapterGetInfo$descriptor() {
        return wgpuAdapterGetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo *info)
     * }
     */
    public static MethodHandle wgpuAdapterGetInfo$handle() {
        return wgpuAdapterGetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo *info)
     * }
     */
    public static MemorySegment wgpuAdapterGetInfo$address() {
        return wgpuAdapterGetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo *info)
     * }
     */
    public static int wgpuAdapterGetInfo(MemorySegment adapter, MemorySegment info) {
        var mh$ = wgpuAdapterGetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterGetInfo", adapter, info);
            }
            return (int)mh$.invokeExact(adapter, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterGetLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterGetLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPULimits *limits)
     * }
     */
    public static FunctionDescriptor wgpuAdapterGetLimits$descriptor() {
        return wgpuAdapterGetLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPULimits *limits)
     * }
     */
    public static MethodHandle wgpuAdapterGetLimits$handle() {
        return wgpuAdapterGetLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPULimits *limits)
     * }
     */
    public static MemorySegment wgpuAdapterGetLimits$address() {
        return wgpuAdapterGetLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPULimits *limits)
     * }
     */
    public static int wgpuAdapterGetLimits(MemorySegment adapter, MemorySegment limits) {
        var mh$ = wgpuAdapterGetLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterGetLimits", adapter, limits);
            }
            return (int)mh$.invokeExact(adapter, limits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterHasFeature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_POINTER,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterHasFeature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature)
     * }
     */
    public static FunctionDescriptor wgpuAdapterHasFeature$descriptor() {
        return wgpuAdapterHasFeature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature)
     * }
     */
    public static MethodHandle wgpuAdapterHasFeature$handle() {
        return wgpuAdapterHasFeature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature)
     * }
     */
    public static MemorySegment wgpuAdapterHasFeature$address() {
        return wgpuAdapterHasFeature.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature)
     * }
     */
    public static int wgpuAdapterHasFeature(MemorySegment adapter, int feature) {
        var mh$ = wgpuAdapterHasFeature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterHasFeature", adapter, feature);
            }
            return (int)mh$.invokeExact(adapter, feature);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterRequestDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            WGPUFuture.layout(),
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            WGPURequestDeviceCallbackInfo.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterRequestDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUFuture wgpuAdapterRequestDevice(WGPUAdapter adapter, const WGPUDeviceDescriptor *descriptor, WGPURequestDeviceCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuAdapterRequestDevice$descriptor() {
        return wgpuAdapterRequestDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUFuture wgpuAdapterRequestDevice(WGPUAdapter adapter, const WGPUDeviceDescriptor *descriptor, WGPURequestDeviceCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuAdapterRequestDevice$handle() {
        return wgpuAdapterRequestDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUFuture wgpuAdapterRequestDevice(WGPUAdapter adapter, const WGPUDeviceDescriptor *descriptor, WGPURequestDeviceCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuAdapterRequestDevice$address() {
        return wgpuAdapterRequestDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUFuture wgpuAdapterRequestDevice(WGPUAdapter adapter, const WGPUDeviceDescriptor *descriptor, WGPURequestDeviceCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuAdapterRequestDevice(SegmentAllocator allocator, MemorySegment adapter, MemorySegment descriptor, MemorySegment callbackInfo) {
        var mh$ = wgpuAdapterRequestDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterRequestDevice", allocator, adapter, descriptor, callbackInfo);
            }
            return (MemorySegment)mh$.invokeExact(allocator, adapter, descriptor, callbackInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuAdapterAddRef(WGPUAdapter adapter)
     * }
     */
    public static FunctionDescriptor wgpuAdapterAddRef$descriptor() {
        return wgpuAdapterAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuAdapterAddRef(WGPUAdapter adapter)
     * }
     */
    public static MethodHandle wgpuAdapterAddRef$handle() {
        return wgpuAdapterAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuAdapterAddRef(WGPUAdapter adapter)
     * }
     */
    public static MemorySegment wgpuAdapterAddRef$address() {
        return wgpuAdapterAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuAdapterAddRef(WGPUAdapter adapter)
     * }
     */
    public static void wgpuAdapterAddRef(MemorySegment adapter) {
        var mh$ = wgpuAdapterAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterAddRef", adapter);
            }
            mh$.invokeExact(adapter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuAdapterRelease(WGPUAdapter adapter)
     * }
     */
    public static FunctionDescriptor wgpuAdapterRelease$descriptor() {
        return wgpuAdapterRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuAdapterRelease(WGPUAdapter adapter)
     * }
     */
    public static MethodHandle wgpuAdapterRelease$handle() {
        return wgpuAdapterRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuAdapterRelease(WGPUAdapter adapter)
     * }
     */
    public static MemorySegment wgpuAdapterRelease$address() {
        return wgpuAdapterRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuAdapterRelease(WGPUAdapter adapter)
     * }
     */
    public static void wgpuAdapterRelease(MemorySegment adapter) {
        var mh$ = wgpuAdapterRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterRelease", adapter);
            }
            mh$.invokeExact(adapter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterInfoFreeMembers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            WGPUAdapterInfo.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterInfoFreeMembers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo adapterInfo)
     * }
     */
    public static FunctionDescriptor wgpuAdapterInfoFreeMembers$descriptor() {
        return wgpuAdapterInfoFreeMembers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo adapterInfo)
     * }
     */
    public static MethodHandle wgpuAdapterInfoFreeMembers$handle() {
        return wgpuAdapterInfoFreeMembers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo adapterInfo)
     * }
     */
    public static MemorySegment wgpuAdapterInfoFreeMembers$address() {
        return wgpuAdapterInfoFreeMembers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo adapterInfo)
     * }
     */
    public static void wgpuAdapterInfoFreeMembers(MemorySegment adapterInfo) {
        var mh$ = wgpuAdapterInfoFreeMembers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterInfoFreeMembers", adapterInfo);
            }
            mh$.invokeExact(adapterInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupSetLabel$descriptor() {
        return wgpuBindGroupSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuBindGroupSetLabel$handle() {
        return wgpuBindGroupSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuBindGroupSetLabel$address() {
        return wgpuBindGroupSetLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label)
     * }
     */
    public static void wgpuBindGroupSetLabel(MemorySegment bindGroup, MemorySegment label) {
        var mh$ = wgpuBindGroupSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupSetLabel", bindGroup, label);
            }
            mh$.invokeExact(bindGroup, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBindGroupAddRef(WGPUBindGroup bindGroup)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupAddRef$descriptor() {
        return wgpuBindGroupAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBindGroupAddRef(WGPUBindGroup bindGroup)
     * }
     */
    public static MethodHandle wgpuBindGroupAddRef$handle() {
        return wgpuBindGroupAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBindGroupAddRef(WGPUBindGroup bindGroup)
     * }
     */
    public static MemorySegment wgpuBindGroupAddRef$address() {
        return wgpuBindGroupAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBindGroupAddRef(WGPUBindGroup bindGroup)
     * }
     */
    public static void wgpuBindGroupAddRef(MemorySegment bindGroup) {
        var mh$ = wgpuBindGroupAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupAddRef", bindGroup);
            }
            mh$.invokeExact(bindGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBindGroupRelease(WGPUBindGroup bindGroup)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupRelease$descriptor() {
        return wgpuBindGroupRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBindGroupRelease(WGPUBindGroup bindGroup)
     * }
     */
    public static MethodHandle wgpuBindGroupRelease$handle() {
        return wgpuBindGroupRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBindGroupRelease(WGPUBindGroup bindGroup)
     * }
     */
    public static MemorySegment wgpuBindGroupRelease$address() {
        return wgpuBindGroupRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBindGroupRelease(WGPUBindGroup bindGroup)
     * }
     */
    public static void wgpuBindGroupRelease(MemorySegment bindGroup) {
        var mh$ = wgpuBindGroupRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupRelease", bindGroup);
            }
            mh$.invokeExact(bindGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupLayoutSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupLayoutSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupLayoutSetLabel$descriptor() {
        return wgpuBindGroupLayoutSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuBindGroupLayoutSetLabel$handle() {
        return wgpuBindGroupLayoutSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuBindGroupLayoutSetLabel$address() {
        return wgpuBindGroupLayoutSetLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label)
     * }
     */
    public static void wgpuBindGroupLayoutSetLabel(MemorySegment bindGroupLayout, MemorySegment label) {
        var mh$ = wgpuBindGroupLayoutSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupLayoutSetLabel", bindGroupLayout, label);
            }
            mh$.invokeExact(bindGroupLayout, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupLayoutAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupLayoutAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupLayoutAddRef$descriptor() {
        return wgpuBindGroupLayoutAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static MethodHandle wgpuBindGroupLayoutAddRef$handle() {
        return wgpuBindGroupLayoutAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static MemorySegment wgpuBindGroupLayoutAddRef$address() {
        return wgpuBindGroupLayoutAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static void wgpuBindGroupLayoutAddRef(MemorySegment bindGroupLayout) {
        var mh$ = wgpuBindGroupLayoutAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupLayoutAddRef", bindGroupLayout);
            }
            mh$.invokeExact(bindGroupLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupLayoutRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupLayoutRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupLayoutRelease$descriptor() {
        return wgpuBindGroupLayoutRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static MethodHandle wgpuBindGroupLayoutRelease$handle() {
        return wgpuBindGroupLayoutRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static MemorySegment wgpuBindGroupLayoutRelease$address() {
        return wgpuBindGroupLayoutRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static void wgpuBindGroupLayoutRelease(MemorySegment bindGroupLayout) {
        var mh$ = wgpuBindGroupLayoutRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupLayoutRelease", bindGroupLayout);
            }
            mh$.invokeExact(bindGroupLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBufferDestroy(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferDestroy$descriptor() {
        return wgpuBufferDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBufferDestroy(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferDestroy$handle() {
        return wgpuBufferDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBufferDestroy(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferDestroy$address() {
        return wgpuBufferDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBufferDestroy(WGPUBuffer buffer)
     * }
     */
    public static void wgpuBufferDestroy(MemorySegment buffer) {
        var mh$ = wgpuBufferDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferDestroy", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetConstMappedRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetConstMappedRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetConstMappedRange$descriptor() {
        return wgpuBufferGetConstMappedRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MethodHandle wgpuBufferGetConstMappedRange$handle() {
        return wgpuBufferGetConstMappedRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferGetConstMappedRange$address() {
        return wgpuBufferGetConstMappedRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferGetConstMappedRange(MemorySegment buffer, long offset, long size) {
        var mh$ = wgpuBufferGetConstMappedRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetConstMappedRange", buffer, offset, size);
            }
            return (MemorySegment)mh$.invokeExact(buffer, offset, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetMappedRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetMappedRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetMappedRange$descriptor() {
        return wgpuBufferGetMappedRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MethodHandle wgpuBufferGetMappedRange$handle() {
        return wgpuBufferGetMappedRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferGetMappedRange$address() {
        return wgpuBufferGetMappedRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferGetMappedRange(MemorySegment buffer, long offset, long size) {
        var mh$ = wgpuBufferGetMappedRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetMappedRange", buffer, offset, size);
            }
            return (MemorySegment)mh$.invokeExact(buffer, offset, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetMapState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetMapState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetMapState$descriptor() {
        return wgpuBufferGetMapState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferGetMapState$handle() {
        return wgpuBufferGetMapState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferGetMapState$address() {
        return wgpuBufferGetMapState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer)
     * }
     */
    public static int wgpuBufferGetMapState(MemorySegment buffer) {
        var mh$ = wgpuBufferGetMapState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetMapState", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t wgpuBufferGetSize(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetSize$descriptor() {
        return wgpuBufferGetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t wgpuBufferGetSize(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferGetSize$handle() {
        return wgpuBufferGetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t wgpuBufferGetSize(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferGetSize$address() {
        return wgpuBufferGetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t wgpuBufferGetSize(WGPUBuffer buffer)
     * }
     */
    public static long wgpuBufferGetSize(MemorySegment buffer) {
        var mh$ = wgpuBufferGetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetSize", buffer);
            }
            return (long)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_LONG,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetUsage$descriptor() {
        return wgpuBufferGetUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferGetUsage$handle() {
        return wgpuBufferGetUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferGetUsage$address() {
        return wgpuBufferGetUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer)
     * }
     */
    public static long wgpuBufferGetUsage(MemorySegment buffer) {
        var mh$ = wgpuBufferGetUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetUsage", buffer);
            }
            return (long)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferMapAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            WGPUFuture.layout(),
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG,
            webgpu_h.C_LONG,
            webgpu_h.C_LONG,
            WGPUBufferMapCallbackInfo.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferMapAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUFuture wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuBufferMapAsync$descriptor() {
        return wgpuBufferMapAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUFuture wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuBufferMapAsync$handle() {
        return wgpuBufferMapAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUFuture wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuBufferMapAsync$address() {
        return wgpuBufferMapAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUFuture wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuBufferMapAsync(SegmentAllocator allocator, MemorySegment buffer, long mode, long offset, long size, MemorySegment callbackInfo) {
        var mh$ = wgpuBufferMapAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferMapAsync", allocator, buffer, mode, offset, size, callbackInfo);
            }
            return (MemorySegment)mh$.invokeExact(allocator, buffer, mode, offset, size, callbackInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferReadMappedRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferReadMappedRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUStatus wgpuBufferReadMappedRange(WGPUBuffer buffer, size_t offset, void *data, size_t size)
     * }
     */
    public static FunctionDescriptor wgpuBufferReadMappedRange$descriptor() {
        return wgpuBufferReadMappedRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUStatus wgpuBufferReadMappedRange(WGPUBuffer buffer, size_t offset, void *data, size_t size)
     * }
     */
    public static MethodHandle wgpuBufferReadMappedRange$handle() {
        return wgpuBufferReadMappedRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUStatus wgpuBufferReadMappedRange(WGPUBuffer buffer, size_t offset, void *data, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferReadMappedRange$address() {
        return wgpuBufferReadMappedRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUStatus wgpuBufferReadMappedRange(WGPUBuffer buffer, size_t offset, void *data, size_t size)
     * }
     */
    public static int wgpuBufferReadMappedRange(MemorySegment buffer, long offset, MemorySegment data, long size) {
        var mh$ = wgpuBufferReadMappedRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferReadMappedRange", buffer, offset, data, size);
            }
            return (int)mh$.invokeExact(buffer, offset, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuBufferSetLabel$descriptor() {
        return wgpuBufferSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuBufferSetLabel$handle() {
        return wgpuBufferSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuBufferSetLabel$address() {
        return wgpuBufferSetLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label)
     * }
     */
    public static void wgpuBufferSetLabel(MemorySegment buffer, MemorySegment label) {
        var mh$ = wgpuBufferSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferSetLabel", buffer, label);
            }
            mh$.invokeExact(buffer, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferUnmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferUnmap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBufferUnmap(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferUnmap$descriptor() {
        return wgpuBufferUnmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBufferUnmap(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferUnmap$handle() {
        return wgpuBufferUnmap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBufferUnmap(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferUnmap$address() {
        return wgpuBufferUnmap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBufferUnmap(WGPUBuffer buffer)
     * }
     */
    public static void wgpuBufferUnmap(MemorySegment buffer) {
        var mh$ = wgpuBufferUnmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferUnmap", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferWriteMappedRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_INT,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferWriteMappedRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUStatus wgpuBufferWriteMappedRange(WGPUBuffer buffer, size_t offset, const void *data, size_t size)
     * }
     */
    public static FunctionDescriptor wgpuBufferWriteMappedRange$descriptor() {
        return wgpuBufferWriteMappedRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUStatus wgpuBufferWriteMappedRange(WGPUBuffer buffer, size_t offset, const void *data, size_t size)
     * }
     */
    public static MethodHandle wgpuBufferWriteMappedRange$handle() {
        return wgpuBufferWriteMappedRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUStatus wgpuBufferWriteMappedRange(WGPUBuffer buffer, size_t offset, const void *data, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferWriteMappedRange$address() {
        return wgpuBufferWriteMappedRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUStatus wgpuBufferWriteMappedRange(WGPUBuffer buffer, size_t offset, const void *data, size_t size)
     * }
     */
    public static int wgpuBufferWriteMappedRange(MemorySegment buffer, long offset, MemorySegment data, long size) {
        var mh$ = wgpuBufferWriteMappedRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferWriteMappedRange", buffer, offset, data, size);
            }
            return (int)mh$.invokeExact(buffer, offset, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBufferAddRef(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferAddRef$descriptor() {
        return wgpuBufferAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBufferAddRef(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferAddRef$handle() {
        return wgpuBufferAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBufferAddRef(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferAddRef$address() {
        return wgpuBufferAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBufferAddRef(WGPUBuffer buffer)
     * }
     */
    public static void wgpuBufferAddRef(MemorySegment buffer) {
        var mh$ = wgpuBufferAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferAddRef", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuBufferRelease(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferRelease$descriptor() {
        return wgpuBufferRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuBufferRelease(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferRelease$handle() {
        return wgpuBufferRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuBufferRelease(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferRelease$address() {
        return wgpuBufferRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuBufferRelease(WGPUBuffer buffer)
     * }
     */
    public static void wgpuBufferRelease(MemorySegment buffer) {
        var mh$ = wgpuBufferRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferRelease", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandBufferSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandBufferSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuCommandBufferSetLabel$descriptor() {
        return wgpuCommandBufferSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuCommandBufferSetLabel$handle() {
        return wgpuCommandBufferSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuCommandBufferSetLabel$address() {
        return wgpuCommandBufferSetLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label)
     * }
     */
    public static void wgpuCommandBufferSetLabel(MemorySegment commandBuffer, MemorySegment label) {
        var mh$ = wgpuCommandBufferSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandBufferSetLabel", commandBuffer, label);
            }
            mh$.invokeExact(commandBuffer, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandBufferAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandBufferAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor wgpuCommandBufferAddRef$descriptor() {
        return wgpuCommandBufferAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle wgpuCommandBufferAddRef$handle() {
        return wgpuCommandBufferAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static MemorySegment wgpuCommandBufferAddRef$address() {
        return wgpuCommandBufferAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static void wgpuCommandBufferAddRef(MemorySegment commandBuffer) {
        var mh$ = wgpuCommandBufferAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandBufferAddRef", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandBufferRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandBufferRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor wgpuCommandBufferRelease$descriptor() {
        return wgpuCommandBufferRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle wgpuCommandBufferRelease$handle() {
        return wgpuCommandBufferRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static MemorySegment wgpuCommandBufferRelease$address() {
        return wgpuCommandBufferRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static void wgpuCommandBufferRelease(MemorySegment commandBuffer) {
        var mh$ = wgpuCommandBufferRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandBufferRelease", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderBeginComputePass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderBeginComputePass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, const WGPUComputePassDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderBeginComputePass$descriptor() {
        return wgpuCommandEncoderBeginComputePass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, const WGPUComputePassDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuCommandEncoderBeginComputePass$handle() {
        return wgpuCommandEncoderBeginComputePass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, const WGPUComputePassDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderBeginComputePass$address() {
        return wgpuCommandEncoderBeginComputePass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, const WGPUComputePassDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderBeginComputePass(MemorySegment commandEncoder, MemorySegment descriptor) {
        var mh$ = wgpuCommandEncoderBeginComputePass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderBeginComputePass", commandEncoder, descriptor);
            }
            return (MemorySegment)mh$.invokeExact(commandEncoder, descriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderBeginRenderPass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderBeginRenderPass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, const WGPURenderPassDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderBeginRenderPass$descriptor() {
        return wgpuCommandEncoderBeginRenderPass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, const WGPURenderPassDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuCommandEncoderBeginRenderPass$handle() {
        return wgpuCommandEncoderBeginRenderPass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, const WGPURenderPassDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderBeginRenderPass$address() {
        return wgpuCommandEncoderBeginRenderPass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, const WGPURenderPassDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderBeginRenderPass(MemorySegment commandEncoder, MemorySegment descriptor) {
        var mh$ = wgpuCommandEncoderBeginRenderPass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderBeginRenderPass", commandEncoder, descriptor);
            }
            return (MemorySegment)mh$.invokeExact(commandEncoder, descriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderClearBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderClearBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderClearBuffer$descriptor() {
        return wgpuCommandEncoderClearBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static MethodHandle wgpuCommandEncoderClearBuffer$handle() {
        return wgpuCommandEncoderClearBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static MemorySegment wgpuCommandEncoderClearBuffer$address() {
        return wgpuCommandEncoderClearBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static void wgpuCommandEncoderClearBuffer(MemorySegment commandEncoder, MemorySegment buffer, long offset, long size) {
        var mh$ = wgpuCommandEncoderClearBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderClearBuffer", commandEncoder, buffer, offset, size);
            }
            mh$.invokeExact(commandEncoder, buffer, offset, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderCopyBufferToBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderCopyBufferToBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderCopyBufferToBuffer$descriptor() {
        return wgpuCommandEncoderCopyBufferToBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size)
     * }
     */
    public static MethodHandle wgpuCommandEncoderCopyBufferToBuffer$handle() {
        return wgpuCommandEncoderCopyBufferToBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size)
     * }
     */
    public static MemorySegment wgpuCommandEncoderCopyBufferToBuffer$address() {
        return wgpuCommandEncoderCopyBufferToBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size)
     * }
     */
    public static void wgpuCommandEncoderCopyBufferToBuffer(MemorySegment commandEncoder, MemorySegment source, long sourceOffset, MemorySegment destination, long destinationOffset, long size) {
        var mh$ = wgpuCommandEncoderCopyBufferToBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderCopyBufferToBuffer", commandEncoder, source, sourceOffset, destination, destinationOffset, size);
            }
            mh$.invokeExact(commandEncoder, source, sourceOffset, destination, destinationOffset, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderCopyBufferToTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderCopyBufferToTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyBufferInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderCopyBufferToTexture$descriptor() {
        return wgpuCommandEncoderCopyBufferToTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyBufferInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MethodHandle wgpuCommandEncoderCopyBufferToTexture$handle() {
        return wgpuCommandEncoderCopyBufferToTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyBufferInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MemorySegment wgpuCommandEncoderCopyBufferToTexture$address() {
        return wgpuCommandEncoderCopyBufferToTexture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyBufferInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static void wgpuCommandEncoderCopyBufferToTexture(MemorySegment commandEncoder, MemorySegment source, MemorySegment destination, MemorySegment copySize) {
        var mh$ = wgpuCommandEncoderCopyBufferToTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderCopyBufferToTexture", commandEncoder, source, destination, copySize);
            }
            mh$.invokeExact(commandEncoder, source, destination, copySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderCopyTextureToBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderCopyTextureToBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyBufferInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderCopyTextureToBuffer$descriptor() {
        return wgpuCommandEncoderCopyTextureToBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyBufferInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MethodHandle wgpuCommandEncoderCopyTextureToBuffer$handle() {
        return wgpuCommandEncoderCopyTextureToBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyBufferInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MemorySegment wgpuCommandEncoderCopyTextureToBuffer$address() {
        return wgpuCommandEncoderCopyTextureToBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyBufferInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static void wgpuCommandEncoderCopyTextureToBuffer(MemorySegment commandEncoder, MemorySegment source, MemorySegment destination, MemorySegment copySize) {
        var mh$ = wgpuCommandEncoderCopyTextureToBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderCopyTextureToBuffer", commandEncoder, source, destination, copySize);
            }
            mh$.invokeExact(commandEncoder, source, destination, copySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderCopyTextureToTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderCopyTextureToTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderCopyTextureToTexture$descriptor() {
        return wgpuCommandEncoderCopyTextureToTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MethodHandle wgpuCommandEncoderCopyTextureToTexture$handle() {
        return wgpuCommandEncoderCopyTextureToTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MemorySegment wgpuCommandEncoderCopyTextureToTexture$address() {
        return wgpuCommandEncoderCopyTextureToTexture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static void wgpuCommandEncoderCopyTextureToTexture(MemorySegment commandEncoder, MemorySegment source, MemorySegment destination, MemorySegment copySize) {
        var mh$ = wgpuCommandEncoderCopyTextureToTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderCopyTextureToTexture", commandEncoder, source, destination, copySize);
            }
            mh$.invokeExact(commandEncoder, source, destination, copySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, const WGPUCommandBufferDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderFinish$descriptor() {
        return wgpuCommandEncoderFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, const WGPUCommandBufferDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuCommandEncoderFinish$handle() {
        return wgpuCommandEncoderFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, const WGPUCommandBufferDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderFinish$address() {
        return wgpuCommandEncoderFinish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, const WGPUCommandBufferDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderFinish(MemorySegment commandEncoder, MemorySegment descriptor) {
        var mh$ = wgpuCommandEncoderFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderFinish", commandEncoder, descriptor);
            }
            return (MemorySegment)mh$.invokeExact(commandEncoder, descriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderInsertDebugMarker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderInsertDebugMarker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderInsertDebugMarker$descriptor() {
        return wgpuCommandEncoderInsertDebugMarker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MethodHandle wgpuCommandEncoderInsertDebugMarker$handle() {
        return wgpuCommandEncoderInsertDebugMarker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MemorySegment wgpuCommandEncoderInsertDebugMarker$address() {
        return wgpuCommandEncoderInsertDebugMarker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel)
     * }
     */
    public static void wgpuCommandEncoderInsertDebugMarker(MemorySegment commandEncoder, MemorySegment markerLabel) {
        var mh$ = wgpuCommandEncoderInsertDebugMarker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderInsertDebugMarker", commandEncoder, markerLabel);
            }
            mh$.invokeExact(commandEncoder, markerLabel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderPopDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderPopDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderPopDebugGroup$descriptor() {
        return wgpuCommandEncoderPopDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MethodHandle wgpuCommandEncoderPopDebugGroup$handle() {
        return wgpuCommandEncoderPopDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MemorySegment wgpuCommandEncoderPopDebugGroup$address() {
        return wgpuCommandEncoderPopDebugGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static void wgpuCommandEncoderPopDebugGroup(MemorySegment commandEncoder) {
        var mh$ = wgpuCommandEncoderPopDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderPopDebugGroup", commandEncoder);
            }
            mh$.invokeExact(commandEncoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderPushDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderPushDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderPushDebugGroup$descriptor() {
        return wgpuCommandEncoderPushDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MethodHandle wgpuCommandEncoderPushDebugGroup$handle() {
        return wgpuCommandEncoderPushDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MemorySegment wgpuCommandEncoderPushDebugGroup$address() {
        return wgpuCommandEncoderPushDebugGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel)
     * }
     */
    public static void wgpuCommandEncoderPushDebugGroup(MemorySegment commandEncoder, MemorySegment groupLabel) {
        var mh$ = wgpuCommandEncoderPushDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderPushDebugGroup", commandEncoder, groupLabel);
            }
            mh$.invokeExact(commandEncoder, groupLabel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderResolveQuerySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_INT,
            webgpu_h.C_INT,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderResolveQuerySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderResolveQuerySet$descriptor() {
        return wgpuCommandEncoderResolveQuerySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset)
     * }
     */
    public static MethodHandle wgpuCommandEncoderResolveQuerySet$handle() {
        return wgpuCommandEncoderResolveQuerySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset)
     * }
     */
    public static MemorySegment wgpuCommandEncoderResolveQuerySet$address() {
        return wgpuCommandEncoderResolveQuerySet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset)
     * }
     */
    public static void wgpuCommandEncoderResolveQuerySet(MemorySegment commandEncoder, MemorySegment querySet, int firstQuery, int queryCount, MemorySegment destination, long destinationOffset) {
        var mh$ = wgpuCommandEncoderResolveQuerySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderResolveQuerySet", commandEncoder, querySet, firstQuery, queryCount, destination, destinationOffset);
            }
            mh$.invokeExact(commandEncoder, querySet, firstQuery, queryCount, destination, destinationOffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderSetLabel$descriptor() {
        return wgpuCommandEncoderSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuCommandEncoderSetLabel$handle() {
        return wgpuCommandEncoderSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuCommandEncoderSetLabel$address() {
        return wgpuCommandEncoderSetLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label)
     * }
     */
    public static void wgpuCommandEncoderSetLabel(MemorySegment commandEncoder, MemorySegment label) {
        var mh$ = wgpuCommandEncoderSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderSetLabel", commandEncoder, label);
            }
            mh$.invokeExact(commandEncoder, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderWriteTimestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderWriteTimestamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderWriteTimestamp$descriptor() {
        return wgpuCommandEncoderWriteTimestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex)
     * }
     */
    public static MethodHandle wgpuCommandEncoderWriteTimestamp$handle() {
        return wgpuCommandEncoderWriteTimestamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex)
     * }
     */
    public static MemorySegment wgpuCommandEncoderWriteTimestamp$address() {
        return wgpuCommandEncoderWriteTimestamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex)
     * }
     */
    public static void wgpuCommandEncoderWriteTimestamp(MemorySegment commandEncoder, MemorySegment querySet, int queryIndex) {
        var mh$ = wgpuCommandEncoderWriteTimestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderWriteTimestamp", commandEncoder, querySet, queryIndex);
            }
            mh$.invokeExact(commandEncoder, querySet, queryIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderAddRef$descriptor() {
        return wgpuCommandEncoderAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MethodHandle wgpuCommandEncoderAddRef$handle() {
        return wgpuCommandEncoderAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MemorySegment wgpuCommandEncoderAddRef$address() {
        return wgpuCommandEncoderAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static void wgpuCommandEncoderAddRef(MemorySegment commandEncoder) {
        var mh$ = wgpuCommandEncoderAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderAddRef", commandEncoder);
            }
            mh$.invokeExact(commandEncoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderRelease$descriptor() {
        return wgpuCommandEncoderRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MethodHandle wgpuCommandEncoderRelease$handle() {
        return wgpuCommandEncoderRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MemorySegment wgpuCommandEncoderRelease$address() {
        return wgpuCommandEncoderRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static void wgpuCommandEncoderRelease(MemorySegment commandEncoder) {
        var mh$ = wgpuCommandEncoderRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderRelease", commandEncoder);
            }
            mh$.invokeExact(commandEncoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderDispatchWorkgroups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_INT,
            webgpu_h.C_INT,
            webgpu_h.C_INT
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderDispatchWorkgroups");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderDispatchWorkgroups$descriptor() {
        return wgpuComputePassEncoderDispatchWorkgroups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderDispatchWorkgroups$handle() {
        return wgpuComputePassEncoderDispatchWorkgroups.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderDispatchWorkgroups$address() {
        return wgpuComputePassEncoderDispatchWorkgroups.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ)
     * }
     */
    public static void wgpuComputePassEncoderDispatchWorkgroups(MemorySegment computePassEncoder, int workgroupCountX, int workgroupCountY, int workgroupCountZ) {
        var mh$ = wgpuComputePassEncoderDispatchWorkgroups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderDispatchWorkgroups", computePassEncoder, workgroupCountX, workgroupCountY, workgroupCountZ);
            }
            mh$.invokeExact(computePassEncoder, workgroupCountX, workgroupCountY, workgroupCountZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderDispatchWorkgroupsIndirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderDispatchWorkgroupsIndirect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderDispatchWorkgroupsIndirect$descriptor() {
        return wgpuComputePassEncoderDispatchWorkgroupsIndirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderDispatchWorkgroupsIndirect$handle() {
        return wgpuComputePassEncoderDispatchWorkgroupsIndirect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderDispatchWorkgroupsIndirect$address() {
        return wgpuComputePassEncoderDispatchWorkgroupsIndirect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static void wgpuComputePassEncoderDispatchWorkgroupsIndirect(MemorySegment computePassEncoder, MemorySegment indirectBuffer, long indirectOffset) {
        var mh$ = wgpuComputePassEncoderDispatchWorkgroupsIndirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderDispatchWorkgroupsIndirect", computePassEncoder, indirectBuffer, indirectOffset);
            }
            mh$.invokeExact(computePassEncoder, indirectBuffer, indirectOffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderEnd$descriptor() {
        return wgpuComputePassEncoderEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderEnd$handle() {
        return wgpuComputePassEncoderEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderEnd$address() {
        return wgpuComputePassEncoderEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static void wgpuComputePassEncoderEnd(MemorySegment computePassEncoder) {
        var mh$ = wgpuComputePassEncoderEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderEnd", computePassEncoder);
            }
            mh$.invokeExact(computePassEncoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderInsertDebugMarker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderInsertDebugMarker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderInsertDebugMarker$descriptor() {
        return wgpuComputePassEncoderInsertDebugMarker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderInsertDebugMarker$handle() {
        return wgpuComputePassEncoderInsertDebugMarker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderInsertDebugMarker$address() {
        return wgpuComputePassEncoderInsertDebugMarker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static void wgpuComputePassEncoderInsertDebugMarker(MemorySegment computePassEncoder, MemorySegment markerLabel) {
        var mh$ = wgpuComputePassEncoderInsertDebugMarker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderInsertDebugMarker", computePassEncoder, markerLabel);
            }
            mh$.invokeExact(computePassEncoder, markerLabel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderPopDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderPopDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderPopDebugGroup$descriptor() {
        return wgpuComputePassEncoderPopDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderPopDebugGroup$handle() {
        return wgpuComputePassEncoderPopDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderPopDebugGroup$address() {
        return wgpuComputePassEncoderPopDebugGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static void wgpuComputePassEncoderPopDebugGroup(MemorySegment computePassEncoder) {
        var mh$ = wgpuComputePassEncoderPopDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderPopDebugGroup", computePassEncoder);
            }
            mh$.invokeExact(computePassEncoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderPushDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderPushDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderPushDebugGroup$descriptor() {
        return wgpuComputePassEncoderPushDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderPushDebugGroup$handle() {
        return wgpuComputePassEncoderPushDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderPushDebugGroup$address() {
        return wgpuComputePassEncoderPushDebugGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static void wgpuComputePassEncoderPushDebugGroup(MemorySegment computePassEncoder, MemorySegment groupLabel) {
        var mh$ = wgpuComputePassEncoderPushDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderPushDebugGroup", computePassEncoder, groupLabel);
            }
            mh$.invokeExact(computePassEncoder, groupLabel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderSetBindGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_INT,
            webgpu_h.C_POINTER,
            webgpu_h.C_LONG,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderSetBindGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderSetBindGroup$descriptor() {
        return wgpuComputePassEncoderSetBindGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderSetBindGroup$handle() {
        return wgpuComputePassEncoderSetBindGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderSetBindGroup$address() {
        return wgpuComputePassEncoderSetBindGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static void wgpuComputePassEncoderSetBindGroup(MemorySegment computePassEncoder, int groupIndex, MemorySegment group, long dynamicOffsetCount, MemorySegment dynamicOffsets) {
        var mh$ = wgpuComputePassEncoderSetBindGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderSetBindGroup", computePassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
            }
            mh$.invokeExact(computePassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            WGPUStringView.layout()
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderSetLabel$descriptor() {
        return wgpuComputePassEncoderSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderSetLabel$handle() {
        return wgpuComputePassEncoderSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderSetLabel$address() {
        return wgpuComputePassEncoderSetLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label)
     * }
     */
    public static void wgpuComputePassEncoderSetLabel(MemorySegment computePassEncoder, MemorySegment label) {
        var mh$ = wgpuComputePassEncoderSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderSetLabel", computePassEncoder, label);
            }
            mh$.invokeExact(computePassEncoder, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderSetPipeline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER,
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderSetPipeline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderSetPipeline$descriptor() {
        return wgpuComputePassEncoderSetPipeline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderSetPipeline$handle() {
        return wgpuComputePassEncoderSetPipeline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderSetPipeline$address() {
        return wgpuComputePassEncoderSetPipeline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline)
     * }
     */
    public static void wgpuComputePassEncoderSetPipeline(MemorySegment computePassEncoder, MemorySegment pipeline) {
        var mh$ = wgpuComputePassEncoderSetPipeline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderSetPipeline", computePassEncoder, pipeline);
            }
            mh$.invokeExact(computePassEncoder, pipeline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderAddRef$descriptor() {
        return wgpuComputePassEncoderAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderAddRef$handle() {
        return wgpuComputePassEncoderAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderAddRef$address() {
        return wgpuComputePassEncoderAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static void wgpuComputePassEncoderAddRef(MemorySegment computePassEncoder) {
        var mh$ = wgpuComputePassEncoderAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderAddRef", computePassEncoder);
            }
            mh$.invokeExact(computePassEncoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            webgpu_h.C_POINTER
        );

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderRelease$descriptor() {
        return wgpuComputePassEncoderRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderRelease$handle() {
        return wgpuComputePassEncoderRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderRelease$address() {
        return wgpuComputePassEncoderRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static void wgpuComputePassEncoderRelease(MemorySegment computePassEncoder) {
        var mh$ = wgpuComputePassEncoderRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderRelease", computePassEncoder);
            }
            mh$.invokeExact(computePassEncoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

