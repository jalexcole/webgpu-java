// Generated by jextract
package org.webgpu.extract;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class webgpu_h extends webgpu_h_1 {

    webgpu_h() {
        // Should not be called directly
    }

    private static final int WGPUToneMappingMode_Extended = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUToneMappingMode.WGPUToneMappingMode_Extended = 2
     * }
     */
    public static int WGPUToneMappingMode_Extended() {
        return WGPUToneMappingMode_Extended;
    }

    private static final int WGPUToneMappingMode_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUToneMappingMode.WGPUToneMappingMode_Force32 = 2147483647
     * }
     */
    public static int WGPUToneMappingMode_Force32() {
        return WGPUToneMappingMode_Force32;
    }

    private static final int WGPUVertexFormat_Uint8 = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint8 = 1
     * }
     */
    public static int WGPUVertexFormat_Uint8() {
        return WGPUVertexFormat_Uint8;
    }

    private static final int WGPUVertexFormat_Uint8x2 = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint8x2 = 2
     * }
     */
    public static int WGPUVertexFormat_Uint8x2() {
        return WGPUVertexFormat_Uint8x2;
    }

    private static final int WGPUVertexFormat_Uint8x4 = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint8x4 = 3
     * }
     */
    public static int WGPUVertexFormat_Uint8x4() {
        return WGPUVertexFormat_Uint8x4;
    }

    private static final int WGPUVertexFormat_Sint8 = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint8 = 4
     * }
     */
    public static int WGPUVertexFormat_Sint8() {
        return WGPUVertexFormat_Sint8;
    }

    private static final int WGPUVertexFormat_Sint8x2 = (int) 5L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint8x2 = 5
     * }
     */
    public static int WGPUVertexFormat_Sint8x2() {
        return WGPUVertexFormat_Sint8x2;
    }

    private static final int WGPUVertexFormat_Sint8x4 = (int) 6L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint8x4 = 6
     * }
     */
    public static int WGPUVertexFormat_Sint8x4() {
        return WGPUVertexFormat_Sint8x4;
    }

    private static final int WGPUVertexFormat_Unorm8 = (int) 7L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Unorm8 = 7
     * }
     */
    public static int WGPUVertexFormat_Unorm8() {
        return WGPUVertexFormat_Unorm8;
    }

    private static final int WGPUVertexFormat_Unorm8x2 = (int) 8L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Unorm8x2 = 8
     * }
     */
    public static int WGPUVertexFormat_Unorm8x2() {
        return WGPUVertexFormat_Unorm8x2;
    }

    private static final int WGPUVertexFormat_Unorm8x4 = (int) 9L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Unorm8x4 = 9
     * }
     */
    public static int WGPUVertexFormat_Unorm8x4() {
        return WGPUVertexFormat_Unorm8x4;
    }

    private static final int WGPUVertexFormat_Snorm8 = (int) 10L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Snorm8 = 10
     * }
     */
    public static int WGPUVertexFormat_Snorm8() {
        return WGPUVertexFormat_Snorm8;
    }

    private static final int WGPUVertexFormat_Snorm8x2 = (int) 11L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Snorm8x2 = 11
     * }
     */
    public static int WGPUVertexFormat_Snorm8x2() {
        return WGPUVertexFormat_Snorm8x2;
    }

    private static final int WGPUVertexFormat_Snorm8x4 = (int) 12L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Snorm8x4 = 12
     * }
     */
    public static int WGPUVertexFormat_Snorm8x4() {
        return WGPUVertexFormat_Snorm8x4;
    }

    private static final int WGPUVertexFormat_Uint16 = (int) 13L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint16 = 13
     * }
     */
    public static int WGPUVertexFormat_Uint16() {
        return WGPUVertexFormat_Uint16;
    }

    private static final int WGPUVertexFormat_Uint16x2 = (int) 14L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint16x2 = 14
     * }
     */
    public static int WGPUVertexFormat_Uint16x2() {
        return WGPUVertexFormat_Uint16x2;
    }

    private static final int WGPUVertexFormat_Uint16x4 = (int) 15L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint16x4 = 15
     * }
     */
    public static int WGPUVertexFormat_Uint16x4() {
        return WGPUVertexFormat_Uint16x4;
    }

    private static final int WGPUVertexFormat_Sint16 = (int) 16L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint16 = 16
     * }
     */
    public static int WGPUVertexFormat_Sint16() {
        return WGPUVertexFormat_Sint16;
    }

    private static final int WGPUVertexFormat_Sint16x2 = (int) 17L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint16x2 = 17
     * }
     */
    public static int WGPUVertexFormat_Sint16x2() {
        return WGPUVertexFormat_Sint16x2;
    }

    private static final int WGPUVertexFormat_Sint16x4 = (int) 18L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint16x4 = 18
     * }
     */
    public static int WGPUVertexFormat_Sint16x4() {
        return WGPUVertexFormat_Sint16x4;
    }

    private static final int WGPUVertexFormat_Unorm16 = (int) 19L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Unorm16 = 19
     * }
     */
    public static int WGPUVertexFormat_Unorm16() {
        return WGPUVertexFormat_Unorm16;
    }

    private static final int WGPUVertexFormat_Unorm16x2 = (int) 20L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Unorm16x2 = 20
     * }
     */
    public static int WGPUVertexFormat_Unorm16x2() {
        return WGPUVertexFormat_Unorm16x2;
    }

    private static final int WGPUVertexFormat_Unorm16x4 = (int) 21L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Unorm16x4 = 21
     * }
     */
    public static int WGPUVertexFormat_Unorm16x4() {
        return WGPUVertexFormat_Unorm16x4;
    }

    private static final int WGPUVertexFormat_Snorm16 = (int) 22L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Snorm16 = 22
     * }
     */
    public static int WGPUVertexFormat_Snorm16() {
        return WGPUVertexFormat_Snorm16;
    }

    private static final int WGPUVertexFormat_Snorm16x2 = (int) 23L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Snorm16x2 = 23
     * }
     */
    public static int WGPUVertexFormat_Snorm16x2() {
        return WGPUVertexFormat_Snorm16x2;
    }

    private static final int WGPUVertexFormat_Snorm16x4 = (int) 24L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Snorm16x4 = 24
     * }
     */
    public static int WGPUVertexFormat_Snorm16x4() {
        return WGPUVertexFormat_Snorm16x4;
    }

    private static final int WGPUVertexFormat_Float16 = (int) 25L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Float16 = 25
     * }
     */
    public static int WGPUVertexFormat_Float16() {
        return WGPUVertexFormat_Float16;
    }

    private static final int WGPUVertexFormat_Float16x2 = (int) 26L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Float16x2 = 26
     * }
     */
    public static int WGPUVertexFormat_Float16x2() {
        return WGPUVertexFormat_Float16x2;
    }

    private static final int WGPUVertexFormat_Float16x4 = (int) 27L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Float16x4 = 27
     * }
     */
    public static int WGPUVertexFormat_Float16x4() {
        return WGPUVertexFormat_Float16x4;
    }

    private static final int WGPUVertexFormat_Float32 = (int) 28L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Float32 = 28
     * }
     */
    public static int WGPUVertexFormat_Float32() {
        return WGPUVertexFormat_Float32;
    }

    private static final int WGPUVertexFormat_Float32x2 = (int) 29L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Float32x2 = 29
     * }
     */
    public static int WGPUVertexFormat_Float32x2() {
        return WGPUVertexFormat_Float32x2;
    }

    private static final int WGPUVertexFormat_Float32x3 = (int) 30L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Float32x3 = 30
     * }
     */
    public static int WGPUVertexFormat_Float32x3() {
        return WGPUVertexFormat_Float32x3;
    }

    private static final int WGPUVertexFormat_Float32x4 = (int) 31L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Float32x4 = 31
     * }
     */
    public static int WGPUVertexFormat_Float32x4() {
        return WGPUVertexFormat_Float32x4;
    }

    private static final int WGPUVertexFormat_Uint32 = (int) 32L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint32 = 32
     * }
     */
    public static int WGPUVertexFormat_Uint32() {
        return WGPUVertexFormat_Uint32;
    }

    private static final int WGPUVertexFormat_Uint32x2 = (int) 33L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint32x2 = 33
     * }
     */
    public static int WGPUVertexFormat_Uint32x2() {
        return WGPUVertexFormat_Uint32x2;
    }

    private static final int WGPUVertexFormat_Uint32x3 = (int) 34L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint32x3 = 34
     * }
     */
    public static int WGPUVertexFormat_Uint32x3() {
        return WGPUVertexFormat_Uint32x3;
    }

    private static final int WGPUVertexFormat_Uint32x4 = (int) 35L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Uint32x4 = 35
     * }
     */
    public static int WGPUVertexFormat_Uint32x4() {
        return WGPUVertexFormat_Uint32x4;
    }

    private static final int WGPUVertexFormat_Sint32 = (int) 36L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint32 = 36
     * }
     */
    public static int WGPUVertexFormat_Sint32() {
        return WGPUVertexFormat_Sint32;
    }

    private static final int WGPUVertexFormat_Sint32x2 = (int) 37L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint32x2 = 37
     * }
     */
    public static int WGPUVertexFormat_Sint32x2() {
        return WGPUVertexFormat_Sint32x2;
    }

    private static final int WGPUVertexFormat_Sint32x3 = (int) 38L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint32x3 = 38
     * }
     */
    public static int WGPUVertexFormat_Sint32x3() {
        return WGPUVertexFormat_Sint32x3;
    }

    private static final int WGPUVertexFormat_Sint32x4 = (int) 39L;

    /**
     * {@snippet lang = c : * enum WGPUVertexFormat.WGPUVertexFormat_Sint32x4 = 39
     * }
     */
    public static int WGPUVertexFormat_Sint32x4() {
        return WGPUVertexFormat_Sint32x4;
    }

    private static final int WGPUVertexFormat_Unorm10_10_10_2 = (int) 40L;

    /**
     * {@snippet lang = c
     * : * enum WGPUVertexFormat.WGPUVertexFormat_Unorm10_10_10_2 = 40
     * }
     */
    public static int WGPUVertexFormat_Unorm10_10_10_2() {
        return WGPUVertexFormat_Unorm10_10_10_2;
    }

    private static final int WGPUVertexFormat_Unorm8x4BGRA = (int) 41L;

    /**
     * {@snippet lang = c
     * : * enum WGPUVertexFormat.WGPUVertexFormat_Unorm8x4BGRA = 41
     * }
     */
    public static int WGPUVertexFormat_Unorm8x4BGRA() {
        return WGPUVertexFormat_Unorm8x4BGRA;
    }

    private static final int WGPUVertexFormat_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUVertexFormat.WGPUVertexFormat_Force32 = 2147483647
     * }
     */
    public static int WGPUVertexFormat_Force32() {
        return WGPUVertexFormat_Force32;
    }

    private static final int WGPUVertexStepMode_Undefined = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUVertexStepMode.WGPUVertexStepMode_Undefined = 0
     * }
     */
    public static int WGPUVertexStepMode_Undefined() {
        return WGPUVertexStepMode_Undefined;
    }

    private static final int WGPUVertexStepMode_Vertex = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUVertexStepMode.WGPUVertexStepMode_Vertex = 1
     * }
     */
    public static int WGPUVertexStepMode_Vertex() {
        return WGPUVertexStepMode_Vertex;
    }

    private static final int WGPUVertexStepMode_Instance = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUVertexStepMode.WGPUVertexStepMode_Instance = 2
     * }
     */
    public static int WGPUVertexStepMode_Instance() {
        return WGPUVertexStepMode_Instance;
    }

    private static final int WGPUVertexStepMode_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUVertexStepMode.WGPUVertexStepMode_Force32 = 2147483647
     * }
     */
    public static int WGPUVertexStepMode_Force32() {
        return WGPUVertexStepMode_Force32;
    }

    private static final int WGPUWaitStatus_Success = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUWaitStatus.WGPUWaitStatus_Success = 1
     * }
     */
    public static int WGPUWaitStatus_Success() {
        return WGPUWaitStatus_Success;
    }

    private static final int WGPUWaitStatus_TimedOut = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUWaitStatus.WGPUWaitStatus_TimedOut = 2
     * }
     */
    public static int WGPUWaitStatus_TimedOut() {
        return WGPUWaitStatus_TimedOut;
    }

    private static final int WGPUWaitStatus_Error = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUWaitStatus.WGPUWaitStatus_Error = 3
     * }
     */
    public static int WGPUWaitStatus_Error() {
        return WGPUWaitStatus_Error;
    }

    private static final int WGPUWaitStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUWaitStatus.WGPUWaitStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUWaitStatus_Force32() {
        return WGPUWaitStatus_Force32;
    }

    private static final int WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures = 1
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures() {
        return WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures;
    }

    private static final int WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct = 2
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct() {
        return WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct;
    }

    private static final int WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters = 3
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters() {
        return WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters;
    }

    private static final int WGPUWGSLLanguageFeatureName_PointerCompositeAccess = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_PointerCompositeAccess = 4
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_PointerCompositeAccess() {
        return WGPUWGSLLanguageFeatureName_PointerCompositeAccess;
    }

    private static final int WGPUWGSLLanguageFeatureName_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUWGSLLanguageFeatureName.WGPUWGSLLanguageFeatureName_Force32 = 2147483647
     * }
     */
    public static int WGPUWGSLLanguageFeatureName_Force32() {
        return WGPUWGSLLanguageFeatureName_Force32;
    }

    /**
     * {@snippet lang = c : * typedef WGPUFlags WGPUBufferUsage
     * }
     */
    public static final OfLong WGPUBufferUsage = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef WGPUFlags WGPUColorWriteMask
     * }
     */
    public static final OfLong WGPUColorWriteMask = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef WGPUFlags WGPUMapMode
     * }
     */
    public static final OfLong WGPUMapMode = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef WGPUFlags WGPUShaderStage
     * }
     */
    public static final OfLong WGPUShaderStage = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef WGPUFlags WGPUTextureUsage
     * }
     */
    public static final OfLong WGPUTextureUsage = webgpu_h.C_LONG_LONG;

    private static class wgpuCreateInstance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCreateInstance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuCreateInstance$descriptor() {
        return wgpuCreateInstance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuCreateInstance$handle() {
        return wgpuCreateInstance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCreateInstance$address() {
        return wgpuCreateInstance.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCreateInstance(MemorySegment descriptor) {
        var mh$ = wgpuCreateInstance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCreateInstance", descriptor);
            }
            return (MemorySegment) mh$.invokeExact(descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuGetInstanceFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuGetInstanceFeatures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuGetInstanceFeatures(WGPUSupportedInstanceFeatures *features)
     * }
     */
    public static FunctionDescriptor wgpuGetInstanceFeatures$descriptor() {
        return wgpuGetInstanceFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuGetInstanceFeatures(WGPUSupportedInstanceFeatures *features)
     * }
     */
    public static MethodHandle wgpuGetInstanceFeatures$handle() {
        return wgpuGetInstanceFeatures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuGetInstanceFeatures(WGPUSupportedInstanceFeatures *features)
     * }
     */
    public static MemorySegment wgpuGetInstanceFeatures$address() {
        return wgpuGetInstanceFeatures.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuGetInstanceFeatures(WGPUSupportedInstanceFeatures *features)
     * }
     */
    public static void wgpuGetInstanceFeatures(MemorySegment features) {
        var mh$ = wgpuGetInstanceFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuGetInstanceFeatures", features);
            }
            mh$.invokeExact(features);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuGetInstanceLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuGetInstanceLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuGetInstanceLimits(WGPUInstanceLimits *limits)
     * }
     */
    public static FunctionDescriptor wgpuGetInstanceLimits$descriptor() {
        return wgpuGetInstanceLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuGetInstanceLimits(WGPUInstanceLimits *limits)
     * }
     */
    public static MethodHandle wgpuGetInstanceLimits$handle() {
        return wgpuGetInstanceLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuGetInstanceLimits(WGPUInstanceLimits *limits)
     * }
     */
    public static MemorySegment wgpuGetInstanceLimits$address() {
        return wgpuGetInstanceLimits.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUStatus wgpuGetInstanceLimits(WGPUInstanceLimits *limits)
     * }
     */
    public static int wgpuGetInstanceLimits(MemorySegment limits) {
        var mh$ = wgpuGetInstanceLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuGetInstanceLimits", limits);
            }
            return (int) mh$.invokeExact(limits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuHasInstanceFeature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuHasInstanceFeature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBool wgpuHasInstanceFeature(WGPUInstanceFeatureName feature)
     * }
     */
    public static FunctionDescriptor wgpuHasInstanceFeature$descriptor() {
        return wgpuHasInstanceFeature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBool wgpuHasInstanceFeature(WGPUInstanceFeatureName feature)
     * }
     */
    public static MethodHandle wgpuHasInstanceFeature$handle() {
        return wgpuHasInstanceFeature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBool wgpuHasInstanceFeature(WGPUInstanceFeatureName feature)
     * }
     */
    public static MemorySegment wgpuHasInstanceFeature$address() {
        return wgpuHasInstanceFeature.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBool wgpuHasInstanceFeature(WGPUInstanceFeatureName feature)
     * }
     */
    public static int wgpuHasInstanceFeature(int feature) {
        var mh$ = wgpuHasInstanceFeature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuHasInstanceFeature", feature);
            }
            return (int) mh$.invokeExact(feature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuGetProcAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuGetProcAddress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * WGPUProc wgpuGetProcAddress(WGPUStringView procName)
     * }
     */
    public static FunctionDescriptor wgpuGetProcAddress$descriptor() {
        return wgpuGetProcAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * WGPUProc wgpuGetProcAddress(WGPUStringView procName)
     * }
     */
    public static MethodHandle wgpuGetProcAddress$handle() {
        return wgpuGetProcAddress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * WGPUProc wgpuGetProcAddress(WGPUStringView procName)
     * }
     */
    public static MemorySegment wgpuGetProcAddress$address() {
        return wgpuGetProcAddress.ADDR;
    }

    /**
     * {@snippet lang = c : * WGPUProc wgpuGetProcAddress(WGPUStringView procName)
     * }
     */
    public static MemorySegment wgpuGetProcAddress(MemorySegment procName) {
        var mh$ = wgpuGetProcAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuGetProcAddress", procName);
            }
            return (MemorySegment) mh$.invokeExact(procName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterGetFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterGetFeatures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures *features)
     * }
     */
    public static FunctionDescriptor wgpuAdapterGetFeatures$descriptor() {
        return wgpuAdapterGetFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures *features)
     * }
     */
    public static MethodHandle wgpuAdapterGetFeatures$handle() {
        return wgpuAdapterGetFeatures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures *features)
     * }
     */
    public static MemorySegment wgpuAdapterGetFeatures$address() {
        return wgpuAdapterGetFeatures.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures *features)
     * }
     */
    public static void wgpuAdapterGetFeatures(MemorySegment adapter, MemorySegment features) {
        var mh$ = wgpuAdapterGetFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterGetFeatures", adapter, features);
            }
            mh$.invokeExact(adapter, features);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterGetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterGetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo *info)
     * }
     */
    public static FunctionDescriptor wgpuAdapterGetInfo$descriptor() {
        return wgpuAdapterGetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo *info)
     * }
     */
    public static MethodHandle wgpuAdapterGetInfo$handle() {
        return wgpuAdapterGetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo *info)
     * }
     */
    public static MemorySegment wgpuAdapterGetInfo$address() {
        return wgpuAdapterGetInfo.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo *info)
     * }
     */
    public static int wgpuAdapterGetInfo(MemorySegment adapter, MemorySegment info) {
        var mh$ = wgpuAdapterGetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterGetInfo", adapter, info);
            }
            return (int) mh$.invokeExact(adapter, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterGetLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterGetLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPULimits *limits)
     * }
     */
    public static FunctionDescriptor wgpuAdapterGetLimits$descriptor() {
        return wgpuAdapterGetLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPULimits *limits)
     * }
     */
    public static MethodHandle wgpuAdapterGetLimits$handle() {
        return wgpuAdapterGetLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPULimits *limits)
     * }
     */
    public static MemorySegment wgpuAdapterGetLimits$address() {
        return wgpuAdapterGetLimits.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPULimits *limits)
     * }
     */
    public static int wgpuAdapterGetLimits(MemorySegment adapter, MemorySegment limits) {
        var mh$ = wgpuAdapterGetLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterGetLimits", adapter, limits);
            }
            return (int) mh$.invokeExact(adapter, limits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterHasFeature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterHasFeature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature)
     * }
     */
    public static FunctionDescriptor wgpuAdapterHasFeature$descriptor() {
        return wgpuAdapterHasFeature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature)
     * }
     */
    public static MethodHandle wgpuAdapterHasFeature$handle() {
        return wgpuAdapterHasFeature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature)
     * }
     */
    public static MemorySegment wgpuAdapterHasFeature$address() {
        return wgpuAdapterHasFeature.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature)
     * }
     */
    public static int wgpuAdapterHasFeature(MemorySegment adapter, int feature) {
        var mh$ = wgpuAdapterHasFeature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterHasFeature", adapter, feature);
            }
            return (int) mh$.invokeExact(adapter, feature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterRequestDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                WGPUFuture.layout(),
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                WGPURequestDeviceCallbackInfo.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterRequestDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuAdapterRequestDevice(WGPUAdapter adapter, const WGPUDeviceDescriptor *descriptor, WGPURequestDeviceCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuAdapterRequestDevice$descriptor() {
        return wgpuAdapterRequestDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuAdapterRequestDevice(WGPUAdapter adapter, const WGPUDeviceDescriptor *descriptor, WGPURequestDeviceCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuAdapterRequestDevice$handle() {
        return wgpuAdapterRequestDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuAdapterRequestDevice(WGPUAdapter adapter, const WGPUDeviceDescriptor *descriptor, WGPURequestDeviceCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuAdapterRequestDevice$address() {
        return wgpuAdapterRequestDevice.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUFuture wgpuAdapterRequestDevice(WGPUAdapter adapter, const WGPUDeviceDescriptor *descriptor, WGPURequestDeviceCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuAdapterRequestDevice(SegmentAllocator allocator, MemorySegment adapter,
            MemorySegment descriptor, MemorySegment callbackInfo) {
        var mh$ = wgpuAdapterRequestDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterRequestDevice", allocator, adapter, descriptor, callbackInfo);
            }
            return (MemorySegment) mh$.invokeExact(allocator, adapter, descriptor, callbackInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuAdapterAddRef(WGPUAdapter adapter)
     * }
     */
    public static FunctionDescriptor wgpuAdapterAddRef$descriptor() {
        return wgpuAdapterAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuAdapterAddRef(WGPUAdapter adapter)
     * }
     */
    public static MethodHandle wgpuAdapterAddRef$handle() {
        return wgpuAdapterAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuAdapterAddRef(WGPUAdapter adapter)
     * }
     */
    public static MemorySegment wgpuAdapterAddRef$address() {
        return wgpuAdapterAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuAdapterAddRef(WGPUAdapter adapter)
     * }
     */
    public static void wgpuAdapterAddRef(MemorySegment adapter) {
        var mh$ = wgpuAdapterAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterAddRef", adapter);
            }
            mh$.invokeExact(adapter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuAdapterRelease(WGPUAdapter adapter)
     * }
     */
    public static FunctionDescriptor wgpuAdapterRelease$descriptor() {
        return wgpuAdapterRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuAdapterRelease(WGPUAdapter adapter)
     * }
     */
    public static MethodHandle wgpuAdapterRelease$handle() {
        return wgpuAdapterRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuAdapterRelease(WGPUAdapter adapter)
     * }
     */
    public static MemorySegment wgpuAdapterRelease$address() {
        return wgpuAdapterRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuAdapterRelease(WGPUAdapter adapter)
     * }
     */
    public static void wgpuAdapterRelease(MemorySegment adapter) {
        var mh$ = wgpuAdapterRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterRelease", adapter);
            }
            mh$.invokeExact(adapter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuAdapterInfoFreeMembers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                WGPUAdapterInfo.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuAdapterInfoFreeMembers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo adapterInfo)
     * }
     */
    public static FunctionDescriptor wgpuAdapterInfoFreeMembers$descriptor() {
        return wgpuAdapterInfoFreeMembers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo adapterInfo)
     * }
     */
    public static MethodHandle wgpuAdapterInfoFreeMembers$handle() {
        return wgpuAdapterInfoFreeMembers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo adapterInfo)
     * }
     */
    public static MemorySegment wgpuAdapterInfoFreeMembers$address() {
        return wgpuAdapterInfoFreeMembers.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo adapterInfo)
     * }
     */
    public static void wgpuAdapterInfoFreeMembers(MemorySegment adapterInfo) {
        var mh$ = wgpuAdapterInfoFreeMembers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuAdapterInfoFreeMembers", adapterInfo);
            }
            mh$.invokeExact(adapterInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupSetLabel$descriptor() {
        return wgpuBindGroupSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuBindGroupSetLabel$handle() {
        return wgpuBindGroupSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuBindGroupSetLabel$address() {
        return wgpuBindGroupSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label)
     * }
     */
    public static void wgpuBindGroupSetLabel(MemorySegment bindGroup, MemorySegment label) {
        var mh$ = wgpuBindGroupSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupSetLabel", bindGroup, label);
            }
            mh$.invokeExact(bindGroup, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuBindGroupAddRef(WGPUBindGroup bindGroup)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupAddRef$descriptor() {
        return wgpuBindGroupAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuBindGroupAddRef(WGPUBindGroup bindGroup)
     * }
     */
    public static MethodHandle wgpuBindGroupAddRef$handle() {
        return wgpuBindGroupAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuBindGroupAddRef(WGPUBindGroup bindGroup)
     * }
     */
    public static MemorySegment wgpuBindGroupAddRef$address() {
        return wgpuBindGroupAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuBindGroupAddRef(WGPUBindGroup bindGroup)
     * }
     */
    public static void wgpuBindGroupAddRef(MemorySegment bindGroup) {
        var mh$ = wgpuBindGroupAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupAddRef", bindGroup);
            }
            mh$.invokeExact(bindGroup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuBindGroupRelease(WGPUBindGroup bindGroup)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupRelease$descriptor() {
        return wgpuBindGroupRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuBindGroupRelease(WGPUBindGroup bindGroup)
     * }
     */
    public static MethodHandle wgpuBindGroupRelease$handle() {
        return wgpuBindGroupRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuBindGroupRelease(WGPUBindGroup bindGroup)
     * }
     */
    public static MemorySegment wgpuBindGroupRelease$address() {
        return wgpuBindGroupRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuBindGroupRelease(WGPUBindGroup bindGroup)
     * }
     */
    public static void wgpuBindGroupRelease(MemorySegment bindGroup) {
        var mh$ = wgpuBindGroupRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupRelease", bindGroup);
            }
            mh$.invokeExact(bindGroup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupLayoutSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupLayoutSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupLayoutSetLabel$descriptor() {
        return wgpuBindGroupLayoutSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuBindGroupLayoutSetLabel$handle() {
        return wgpuBindGroupLayoutSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuBindGroupLayoutSetLabel$address() {
        return wgpuBindGroupLayoutSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label)
     * }
     */
    public static void wgpuBindGroupLayoutSetLabel(MemorySegment bindGroupLayout, MemorySegment label) {
        var mh$ = wgpuBindGroupLayoutSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupLayoutSetLabel", bindGroupLayout, label);
            }
            mh$.invokeExact(bindGroupLayout, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupLayoutAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupLayoutAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupLayoutAddRef$descriptor() {
        return wgpuBindGroupLayoutAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static MethodHandle wgpuBindGroupLayoutAddRef$handle() {
        return wgpuBindGroupLayoutAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static MemorySegment wgpuBindGroupLayoutAddRef$address() {
        return wgpuBindGroupLayoutAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static void wgpuBindGroupLayoutAddRef(MemorySegment bindGroupLayout) {
        var mh$ = wgpuBindGroupLayoutAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupLayoutAddRef", bindGroupLayout);
            }
            mh$.invokeExact(bindGroupLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBindGroupLayoutRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBindGroupLayoutRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static FunctionDescriptor wgpuBindGroupLayoutRelease$descriptor() {
        return wgpuBindGroupLayoutRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static MethodHandle wgpuBindGroupLayoutRelease$handle() {
        return wgpuBindGroupLayoutRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static MemorySegment wgpuBindGroupLayoutRelease$address() {
        return wgpuBindGroupLayoutRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout)
     * }
     */
    public static void wgpuBindGroupLayoutRelease(MemorySegment bindGroupLayout) {
        var mh$ = wgpuBindGroupLayoutRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBindGroupLayoutRelease", bindGroupLayout);
            }
            mh$.invokeExact(bindGroupLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuBufferDestroy(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferDestroy$descriptor() {
        return wgpuBufferDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuBufferDestroy(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferDestroy$handle() {
        return wgpuBufferDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuBufferDestroy(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferDestroy$address() {
        return wgpuBufferDestroy.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuBufferDestroy(WGPUBuffer buffer)
     * }
     */
    public static void wgpuBufferDestroy(MemorySegment buffer) {
        var mh$ = wgpuBufferDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferDestroy", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetConstMappedRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetConstMappedRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * const void *wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetConstMappedRange$descriptor() {
        return wgpuBufferGetConstMappedRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * const void *wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MethodHandle wgpuBufferGetConstMappedRange$handle() {
        return wgpuBufferGetConstMappedRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * const void *wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferGetConstMappedRange$address() {
        return wgpuBufferGetConstMappedRange.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * const void *wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferGetConstMappedRange(MemorySegment buffer, long offset, long size) {
        var mh$ = wgpuBufferGetConstMappedRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetConstMappedRange", buffer, offset, size);
            }
            return (MemorySegment) mh$.invokeExact(buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetMappedRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetMappedRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void *wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetMappedRange$descriptor() {
        return wgpuBufferGetMappedRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void *wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MethodHandle wgpuBufferGetMappedRange$handle() {
        return wgpuBufferGetMappedRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void *wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferGetMappedRange$address() {
        return wgpuBufferGetMappedRange.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void *wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferGetMappedRange(MemorySegment buffer, long offset, long size) {
        var mh$ = wgpuBufferGetMappedRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetMappedRange", buffer, offset, size);
            }
            return (MemorySegment) mh$.invokeExact(buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetMapState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetMapState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetMapState$descriptor() {
        return wgpuBufferGetMapState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferGetMapState$handle() {
        return wgpuBufferGetMapState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferGetMapState$address() {
        return wgpuBufferGetMapState.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer)
     * }
     */
    public static int wgpuBufferGetMapState(MemorySegment buffer) {
        var mh$ = wgpuBufferGetMapState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetMapState", buffer);
            }
            return (int) mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * uint64_t wgpuBufferGetSize(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetSize$descriptor() {
        return wgpuBufferGetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * uint64_t wgpuBufferGetSize(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferGetSize$handle() {
        return wgpuBufferGetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * uint64_t wgpuBufferGetSize(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferGetSize$address() {
        return wgpuBufferGetSize.ADDR;
    }

    /**
     * {@snippet lang = c : * uint64_t wgpuBufferGetSize(WGPUBuffer buffer)
     * }
     */
    public static long wgpuBufferGetSize(MemorySegment buffer) {
        var mh$ = wgpuBufferGetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetSize", buffer);
            }
            return (long) mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferGetUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferGetUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferGetUsage$descriptor() {
        return wgpuBufferGetUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferGetUsage$handle() {
        return wgpuBufferGetUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferGetUsage$address() {
        return wgpuBufferGetUsage.ADDR;
    }

    /**
     * {@snippet lang = c : * WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer)
     * }
     */
    public static long wgpuBufferGetUsage(MemorySegment buffer) {
        var mh$ = wgpuBufferGetUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferGetUsage", buffer);
            }
            return (long) mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferMapAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                WGPUFuture.layout(),
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_LONG,
                webgpu_h.C_LONG,
                WGPUBufferMapCallbackInfo.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferMapAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuBufferMapAsync$descriptor() {
        return wgpuBufferMapAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuBufferMapAsync$handle() {
        return wgpuBufferMapAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuBufferMapAsync$address() {
        return wgpuBufferMapAsync.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUFuture wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuBufferMapAsync(SegmentAllocator allocator, MemorySegment buffer, long mode,
            long offset, long size, MemorySegment callbackInfo) {
        var mh$ = wgpuBufferMapAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferMapAsync", allocator, buffer, mode, offset, size, callbackInfo);
            }
            return (MemorySegment) mh$.invokeExact(allocator, buffer, mode, offset, size, callbackInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferReadMappedRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferReadMappedRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuBufferReadMappedRange(WGPUBuffer buffer, size_t offset, void *data, size_t size)
     * }
     */
    public static FunctionDescriptor wgpuBufferReadMappedRange$descriptor() {
        return wgpuBufferReadMappedRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuBufferReadMappedRange(WGPUBuffer buffer, size_t offset, void *data, size_t size)
     * }
     */
    public static MethodHandle wgpuBufferReadMappedRange$handle() {
        return wgpuBufferReadMappedRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuBufferReadMappedRange(WGPUBuffer buffer, size_t offset, void *data, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferReadMappedRange$address() {
        return wgpuBufferReadMappedRange.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUStatus wgpuBufferReadMappedRange(WGPUBuffer buffer, size_t offset, void *data, size_t size)
     * }
     */
    public static int wgpuBufferReadMappedRange(MemorySegment buffer, long offset, MemorySegment data, long size) {
        var mh$ = wgpuBufferReadMappedRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferReadMappedRange", buffer, offset, data, size);
            }
            return (int) mh$.invokeExact(buffer, offset, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuBufferSetLabel$descriptor() {
        return wgpuBufferSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuBufferSetLabel$handle() {
        return wgpuBufferSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuBufferSetLabel$address() {
        return wgpuBufferSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label)
     * }
     */
    public static void wgpuBufferSetLabel(MemorySegment buffer, MemorySegment label) {
        var mh$ = wgpuBufferSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferSetLabel", buffer, label);
            }
            mh$.invokeExact(buffer, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferUnmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferUnmap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuBufferUnmap(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferUnmap$descriptor() {
        return wgpuBufferUnmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuBufferUnmap(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferUnmap$handle() {
        return wgpuBufferUnmap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuBufferUnmap(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferUnmap$address() {
        return wgpuBufferUnmap.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuBufferUnmap(WGPUBuffer buffer)
     * }
     */
    public static void wgpuBufferUnmap(MemorySegment buffer) {
        var mh$ = wgpuBufferUnmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferUnmap", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferWriteMappedRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferWriteMappedRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuBufferWriteMappedRange(WGPUBuffer buffer, size_t offset, const void *data, size_t size)
     * }
     */
    public static FunctionDescriptor wgpuBufferWriteMappedRange$descriptor() {
        return wgpuBufferWriteMappedRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuBufferWriteMappedRange(WGPUBuffer buffer, size_t offset, const void *data, size_t size)
     * }
     */
    public static MethodHandle wgpuBufferWriteMappedRange$handle() {
        return wgpuBufferWriteMappedRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuBufferWriteMappedRange(WGPUBuffer buffer, size_t offset, const void *data, size_t size)
     * }
     */
    public static MemorySegment wgpuBufferWriteMappedRange$address() {
        return wgpuBufferWriteMappedRange.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUStatus wgpuBufferWriteMappedRange(WGPUBuffer buffer, size_t offset, const void *data, size_t size)
     * }
     */
    public static int wgpuBufferWriteMappedRange(MemorySegment buffer, long offset, MemorySegment data, long size) {
        var mh$ = wgpuBufferWriteMappedRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferWriteMappedRange", buffer, offset, data, size);
            }
            return (int) mh$.invokeExact(buffer, offset, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuBufferAddRef(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferAddRef$descriptor() {
        return wgpuBufferAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuBufferAddRef(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferAddRef$handle() {
        return wgpuBufferAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuBufferAddRef(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferAddRef$address() {
        return wgpuBufferAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuBufferAddRef(WGPUBuffer buffer)
     * }
     */
    public static void wgpuBufferAddRef(MemorySegment buffer) {
        var mh$ = wgpuBufferAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferAddRef", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuBufferRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuBufferRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuBufferRelease(WGPUBuffer buffer)
     * }
     */
    public static FunctionDescriptor wgpuBufferRelease$descriptor() {
        return wgpuBufferRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuBufferRelease(WGPUBuffer buffer)
     * }
     */
    public static MethodHandle wgpuBufferRelease$handle() {
        return wgpuBufferRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuBufferRelease(WGPUBuffer buffer)
     * }
     */
    public static MemorySegment wgpuBufferRelease$address() {
        return wgpuBufferRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuBufferRelease(WGPUBuffer buffer)
     * }
     */
    public static void wgpuBufferRelease(MemorySegment buffer) {
        var mh$ = wgpuBufferRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuBufferRelease", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandBufferSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandBufferSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuCommandBufferSetLabel$descriptor() {
        return wgpuCommandBufferSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuCommandBufferSetLabel$handle() {
        return wgpuCommandBufferSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuCommandBufferSetLabel$address() {
        return wgpuCommandBufferSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label)
     * }
     */
    public static void wgpuCommandBufferSetLabel(MemorySegment commandBuffer, MemorySegment label) {
        var mh$ = wgpuCommandBufferSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandBufferSetLabel", commandBuffer, label);
            }
            mh$.invokeExact(commandBuffer, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandBufferAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandBufferAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor wgpuCommandBufferAddRef$descriptor() {
        return wgpuCommandBufferAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle wgpuCommandBufferAddRef$handle() {
        return wgpuCommandBufferAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static MemorySegment wgpuCommandBufferAddRef$address() {
        return wgpuCommandBufferAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static void wgpuCommandBufferAddRef(MemorySegment commandBuffer) {
        var mh$ = wgpuCommandBufferAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandBufferAddRef", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandBufferRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandBufferRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor wgpuCommandBufferRelease$descriptor() {
        return wgpuCommandBufferRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle wgpuCommandBufferRelease$handle() {
        return wgpuCommandBufferRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static MemorySegment wgpuCommandBufferRelease$address() {
        return wgpuCommandBufferRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer)
     * }
     */
    public static void wgpuCommandBufferRelease(MemorySegment commandBuffer) {
        var mh$ = wgpuCommandBufferRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandBufferRelease", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderBeginComputePass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderBeginComputePass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, const WGPUComputePassDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderBeginComputePass$descriptor() {
        return wgpuCommandEncoderBeginComputePass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, const WGPUComputePassDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuCommandEncoderBeginComputePass$handle() {
        return wgpuCommandEncoderBeginComputePass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, const WGPUComputePassDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderBeginComputePass$address() {
        return wgpuCommandEncoderBeginComputePass.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, const WGPUComputePassDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderBeginComputePass(MemorySegment commandEncoder,
            MemorySegment descriptor) {
        var mh$ = wgpuCommandEncoderBeginComputePass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderBeginComputePass", commandEncoder, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(commandEncoder, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderBeginRenderPass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderBeginRenderPass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, const WGPURenderPassDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderBeginRenderPass$descriptor() {
        return wgpuCommandEncoderBeginRenderPass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, const WGPURenderPassDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuCommandEncoderBeginRenderPass$handle() {
        return wgpuCommandEncoderBeginRenderPass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, const WGPURenderPassDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderBeginRenderPass$address() {
        return wgpuCommandEncoderBeginRenderPass.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, const WGPURenderPassDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderBeginRenderPass(MemorySegment commandEncoder,
            MemorySegment descriptor) {
        var mh$ = wgpuCommandEncoderBeginRenderPass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderBeginRenderPass", commandEncoder, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(commandEncoder, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderClearBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderClearBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderClearBuffer$descriptor() {
        return wgpuCommandEncoderClearBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static MethodHandle wgpuCommandEncoderClearBuffer$handle() {
        return wgpuCommandEncoderClearBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static MemorySegment wgpuCommandEncoderClearBuffer$address() {
        return wgpuCommandEncoderClearBuffer.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static void wgpuCommandEncoderClearBuffer(MemorySegment commandEncoder, MemorySegment buffer, long offset,
            long size) {
        var mh$ = wgpuCommandEncoderClearBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderClearBuffer", commandEncoder, buffer, offset, size);
            }
            mh$.invokeExact(commandEncoder, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderCopyBufferToBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderCopyBufferToBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderCopyBufferToBuffer$descriptor() {
        return wgpuCommandEncoderCopyBufferToBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size)
     * }
     */
    public static MethodHandle wgpuCommandEncoderCopyBufferToBuffer$handle() {
        return wgpuCommandEncoderCopyBufferToBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size)
     * }
     */
    public static MemorySegment wgpuCommandEncoderCopyBufferToBuffer$address() {
        return wgpuCommandEncoderCopyBufferToBuffer.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size)
     * }
     */
    public static void wgpuCommandEncoderCopyBufferToBuffer(MemorySegment commandEncoder, MemorySegment source,
            long sourceOffset, MemorySegment destination, long destinationOffset, long size) {
        var mh$ = wgpuCommandEncoderCopyBufferToBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderCopyBufferToBuffer", commandEncoder, source, sourceOffset, destination,
                        destinationOffset, size);
            }
            mh$.invokeExact(commandEncoder, source, sourceOffset, destination, destinationOffset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderCopyBufferToTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderCopyBufferToTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyBufferInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderCopyBufferToTexture$descriptor() {
        return wgpuCommandEncoderCopyBufferToTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyBufferInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MethodHandle wgpuCommandEncoderCopyBufferToTexture$handle() {
        return wgpuCommandEncoderCopyBufferToTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyBufferInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MemorySegment wgpuCommandEncoderCopyBufferToTexture$address() {
        return wgpuCommandEncoderCopyBufferToTexture.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyBufferInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static void wgpuCommandEncoderCopyBufferToTexture(MemorySegment commandEncoder, MemorySegment source,
            MemorySegment destination, MemorySegment copySize) {
        var mh$ = wgpuCommandEncoderCopyBufferToTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderCopyBufferToTexture", commandEncoder, source, destination, copySize);
            }
            mh$.invokeExact(commandEncoder, source, destination, copySize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderCopyTextureToBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderCopyTextureToBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyBufferInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderCopyTextureToBuffer$descriptor() {
        return wgpuCommandEncoderCopyTextureToBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyBufferInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MethodHandle wgpuCommandEncoderCopyTextureToBuffer$handle() {
        return wgpuCommandEncoderCopyTextureToBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyBufferInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MemorySegment wgpuCommandEncoderCopyTextureToBuffer$address() {
        return wgpuCommandEncoderCopyTextureToBuffer.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyBufferInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static void wgpuCommandEncoderCopyTextureToBuffer(MemorySegment commandEncoder, MemorySegment source,
            MemorySegment destination, MemorySegment copySize) {
        var mh$ = wgpuCommandEncoderCopyTextureToBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderCopyTextureToBuffer", commandEncoder, source, destination, copySize);
            }
            mh$.invokeExact(commandEncoder, source, destination, copySize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderCopyTextureToTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderCopyTextureToTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderCopyTextureToTexture$descriptor() {
        return wgpuCommandEncoderCopyTextureToTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MethodHandle wgpuCommandEncoderCopyTextureToTexture$handle() {
        return wgpuCommandEncoderCopyTextureToTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static MemorySegment wgpuCommandEncoderCopyTextureToTexture$address() {
        return wgpuCommandEncoderCopyTextureToTexture.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, const WGPUTexelCopyTextureInfo *source, const WGPUTexelCopyTextureInfo *destination, const WGPUExtent3D *copySize)
     * }
     */
    public static void wgpuCommandEncoderCopyTextureToTexture(MemorySegment commandEncoder, MemorySegment source,
            MemorySegment destination, MemorySegment copySize) {
        var mh$ = wgpuCommandEncoderCopyTextureToTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderCopyTextureToTexture", commandEncoder, source, destination, copySize);
            }
            mh$.invokeExact(commandEncoder, source, destination, copySize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, const WGPUCommandBufferDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderFinish$descriptor() {
        return wgpuCommandEncoderFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, const WGPUCommandBufferDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuCommandEncoderFinish$handle() {
        return wgpuCommandEncoderFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, const WGPUCommandBufferDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderFinish$address() {
        return wgpuCommandEncoderFinish.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, const WGPUCommandBufferDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuCommandEncoderFinish(MemorySegment commandEncoder, MemorySegment descriptor) {
        var mh$ = wgpuCommandEncoderFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderFinish", commandEncoder, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(commandEncoder, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderInsertDebugMarker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderInsertDebugMarker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderInsertDebugMarker$descriptor() {
        return wgpuCommandEncoderInsertDebugMarker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MethodHandle wgpuCommandEncoderInsertDebugMarker$handle() {
        return wgpuCommandEncoderInsertDebugMarker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MemorySegment wgpuCommandEncoderInsertDebugMarker$address() {
        return wgpuCommandEncoderInsertDebugMarker.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel)
     * }
     */
    public static void wgpuCommandEncoderInsertDebugMarker(MemorySegment commandEncoder, MemorySegment markerLabel) {
        var mh$ = wgpuCommandEncoderInsertDebugMarker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderInsertDebugMarker", commandEncoder, markerLabel);
            }
            mh$.invokeExact(commandEncoder, markerLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderPopDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderPopDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderPopDebugGroup$descriptor() {
        return wgpuCommandEncoderPopDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MethodHandle wgpuCommandEncoderPopDebugGroup$handle() {
        return wgpuCommandEncoderPopDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MemorySegment wgpuCommandEncoderPopDebugGroup$address() {
        return wgpuCommandEncoderPopDebugGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static void wgpuCommandEncoderPopDebugGroup(MemorySegment commandEncoder) {
        var mh$ = wgpuCommandEncoderPopDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderPopDebugGroup", commandEncoder);
            }
            mh$.invokeExact(commandEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderPushDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderPushDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderPushDebugGroup$descriptor() {
        return wgpuCommandEncoderPushDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MethodHandle wgpuCommandEncoderPushDebugGroup$handle() {
        return wgpuCommandEncoderPushDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MemorySegment wgpuCommandEncoderPushDebugGroup$address() {
        return wgpuCommandEncoderPushDebugGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel)
     * }
     */
    public static void wgpuCommandEncoderPushDebugGroup(MemorySegment commandEncoder, MemorySegment groupLabel) {
        var mh$ = wgpuCommandEncoderPushDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderPushDebugGroup", commandEncoder, groupLabel);
            }
            mh$.invokeExact(commandEncoder, groupLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderResolveQuerySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderResolveQuerySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderResolveQuerySet$descriptor() {
        return wgpuCommandEncoderResolveQuerySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset)
     * }
     */
    public static MethodHandle wgpuCommandEncoderResolveQuerySet$handle() {
        return wgpuCommandEncoderResolveQuerySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset)
     * }
     */
    public static MemorySegment wgpuCommandEncoderResolveQuerySet$address() {
        return wgpuCommandEncoderResolveQuerySet.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset)
     * }
     */
    public static void wgpuCommandEncoderResolveQuerySet(MemorySegment commandEncoder, MemorySegment querySet,
            int firstQuery, int queryCount, MemorySegment destination, long destinationOffset) {
        var mh$ = wgpuCommandEncoderResolveQuerySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderResolveQuerySet", commandEncoder, querySet, firstQuery, queryCount,
                        destination, destinationOffset);
            }
            mh$.invokeExact(commandEncoder, querySet, firstQuery, queryCount, destination, destinationOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderSetLabel$descriptor() {
        return wgpuCommandEncoderSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuCommandEncoderSetLabel$handle() {
        return wgpuCommandEncoderSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuCommandEncoderSetLabel$address() {
        return wgpuCommandEncoderSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label)
     * }
     */
    public static void wgpuCommandEncoderSetLabel(MemorySegment commandEncoder, MemorySegment label) {
        var mh$ = wgpuCommandEncoderSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderSetLabel", commandEncoder, label);
            }
            mh$.invokeExact(commandEncoder, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderWriteTimestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderWriteTimestamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderWriteTimestamp$descriptor() {
        return wgpuCommandEncoderWriteTimestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex)
     * }
     */
    public static MethodHandle wgpuCommandEncoderWriteTimestamp$handle() {
        return wgpuCommandEncoderWriteTimestamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex)
     * }
     */
    public static MemorySegment wgpuCommandEncoderWriteTimestamp$address() {
        return wgpuCommandEncoderWriteTimestamp.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex)
     * }
     */
    public static void wgpuCommandEncoderWriteTimestamp(MemorySegment commandEncoder, MemorySegment querySet,
            int queryIndex) {
        var mh$ = wgpuCommandEncoderWriteTimestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderWriteTimestamp", commandEncoder, querySet, queryIndex);
            }
            mh$.invokeExact(commandEncoder, querySet, queryIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderAddRef$descriptor() {
        return wgpuCommandEncoderAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MethodHandle wgpuCommandEncoderAddRef$handle() {
        return wgpuCommandEncoderAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MemorySegment wgpuCommandEncoderAddRef$address() {
        return wgpuCommandEncoderAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static void wgpuCommandEncoderAddRef(MemorySegment commandEncoder) {
        var mh$ = wgpuCommandEncoderAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderAddRef", commandEncoder);
            }
            mh$.invokeExact(commandEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuCommandEncoderRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuCommandEncoderRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static FunctionDescriptor wgpuCommandEncoderRelease$descriptor() {
        return wgpuCommandEncoderRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MethodHandle wgpuCommandEncoderRelease$handle() {
        return wgpuCommandEncoderRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static MemorySegment wgpuCommandEncoderRelease$address() {
        return wgpuCommandEncoderRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder)
     * }
     */
    public static void wgpuCommandEncoderRelease(MemorySegment commandEncoder) {
        var mh$ = wgpuCommandEncoderRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuCommandEncoderRelease", commandEncoder);
            }
            mh$.invokeExact(commandEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderDispatchWorkgroups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderDispatchWorkgroups");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderDispatchWorkgroups$descriptor() {
        return wgpuComputePassEncoderDispatchWorkgroups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderDispatchWorkgroups$handle() {
        return wgpuComputePassEncoderDispatchWorkgroups.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderDispatchWorkgroups$address() {
        return wgpuComputePassEncoderDispatchWorkgroups.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ)
     * }
     */
    public static void wgpuComputePassEncoderDispatchWorkgroups(MemorySegment computePassEncoder, int workgroupCountX,
            int workgroupCountY, int workgroupCountZ) {
        var mh$ = wgpuComputePassEncoderDispatchWorkgroups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderDispatchWorkgroups", computePassEncoder, workgroupCountX,
                        workgroupCountY, workgroupCountZ);
            }
            mh$.invokeExact(computePassEncoder, workgroupCountX, workgroupCountY, workgroupCountZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderDispatchWorkgroupsIndirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h
                .findOrThrow("wgpuComputePassEncoderDispatchWorkgroupsIndirect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderDispatchWorkgroupsIndirect$descriptor() {
        return wgpuComputePassEncoderDispatchWorkgroupsIndirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderDispatchWorkgroupsIndirect$handle() {
        return wgpuComputePassEncoderDispatchWorkgroupsIndirect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderDispatchWorkgroupsIndirect$address() {
        return wgpuComputePassEncoderDispatchWorkgroupsIndirect.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static void wgpuComputePassEncoderDispatchWorkgroupsIndirect(MemorySegment computePassEncoder,
            MemorySegment indirectBuffer, long indirectOffset) {
        var mh$ = wgpuComputePassEncoderDispatchWorkgroupsIndirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderDispatchWorkgroupsIndirect", computePassEncoder, indirectBuffer,
                        indirectOffset);
            }
            mh$.invokeExact(computePassEncoder, indirectBuffer, indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderEnd$descriptor() {
        return wgpuComputePassEncoderEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderEnd$handle() {
        return wgpuComputePassEncoderEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderEnd$address() {
        return wgpuComputePassEncoderEnd.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static void wgpuComputePassEncoderEnd(MemorySegment computePassEncoder) {
        var mh$ = wgpuComputePassEncoderEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderEnd", computePassEncoder);
            }
            mh$.invokeExact(computePassEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderInsertDebugMarker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderInsertDebugMarker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderInsertDebugMarker$descriptor() {
        return wgpuComputePassEncoderInsertDebugMarker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderInsertDebugMarker$handle() {
        return wgpuComputePassEncoderInsertDebugMarker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderInsertDebugMarker$address() {
        return wgpuComputePassEncoderInsertDebugMarker.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static void wgpuComputePassEncoderInsertDebugMarker(MemorySegment computePassEncoder,
            MemorySegment markerLabel) {
        var mh$ = wgpuComputePassEncoderInsertDebugMarker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderInsertDebugMarker", computePassEncoder, markerLabel);
            }
            mh$.invokeExact(computePassEncoder, markerLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderPopDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderPopDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderPopDebugGroup$descriptor() {
        return wgpuComputePassEncoderPopDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderPopDebugGroup$handle() {
        return wgpuComputePassEncoderPopDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderPopDebugGroup$address() {
        return wgpuComputePassEncoderPopDebugGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static void wgpuComputePassEncoderPopDebugGroup(MemorySegment computePassEncoder) {
        var mh$ = wgpuComputePassEncoderPopDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderPopDebugGroup", computePassEncoder);
            }
            mh$.invokeExact(computePassEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderPushDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderPushDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderPushDebugGroup$descriptor() {
        return wgpuComputePassEncoderPushDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderPushDebugGroup$handle() {
        return wgpuComputePassEncoderPushDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderPushDebugGroup$address() {
        return wgpuComputePassEncoderPushDebugGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static void wgpuComputePassEncoderPushDebugGroup(MemorySegment computePassEncoder,
            MemorySegment groupLabel) {
        var mh$ = wgpuComputePassEncoderPushDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderPushDebugGroup", computePassEncoder, groupLabel);
            }
            mh$.invokeExact(computePassEncoder, groupLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderSetBindGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderSetBindGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderSetBindGroup$descriptor() {
        return wgpuComputePassEncoderSetBindGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderSetBindGroup$handle() {
        return wgpuComputePassEncoderSetBindGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderSetBindGroup$address() {
        return wgpuComputePassEncoderSetBindGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static void wgpuComputePassEncoderSetBindGroup(MemorySegment computePassEncoder, int groupIndex,
            MemorySegment group, long dynamicOffsetCount, MemorySegment dynamicOffsets) {
        var mh$ = wgpuComputePassEncoderSetBindGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderSetBindGroup", computePassEncoder, groupIndex, group,
                        dynamicOffsetCount, dynamicOffsets);
            }
            mh$.invokeExact(computePassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderSetLabel$descriptor() {
        return wgpuComputePassEncoderSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderSetLabel$handle() {
        return wgpuComputePassEncoderSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderSetLabel$address() {
        return wgpuComputePassEncoderSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label)
     * }
     */
    public static void wgpuComputePassEncoderSetLabel(MemorySegment computePassEncoder, MemorySegment label) {
        var mh$ = wgpuComputePassEncoderSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderSetLabel", computePassEncoder, label);
            }
            mh$.invokeExact(computePassEncoder, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderSetPipeline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderSetPipeline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderSetPipeline$descriptor() {
        return wgpuComputePassEncoderSetPipeline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderSetPipeline$handle() {
        return wgpuComputePassEncoderSetPipeline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderSetPipeline$address() {
        return wgpuComputePassEncoderSetPipeline.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline)
     * }
     */
    public static void wgpuComputePassEncoderSetPipeline(MemorySegment computePassEncoder, MemorySegment pipeline) {
        var mh$ = wgpuComputePassEncoderSetPipeline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderSetPipeline", computePassEncoder, pipeline);
            }
            mh$.invokeExact(computePassEncoder, pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderAddRef$descriptor() {
        return wgpuComputePassEncoderAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderAddRef$handle() {
        return wgpuComputePassEncoderAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderAddRef$address() {
        return wgpuComputePassEncoderAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static void wgpuComputePassEncoderAddRef(MemorySegment computePassEncoder) {
        var mh$ = wgpuComputePassEncoderAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderAddRef", computePassEncoder);
            }
            mh$.invokeExact(computePassEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePassEncoderRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePassEncoderRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuComputePassEncoderRelease$descriptor() {
        return wgpuComputePassEncoderRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MethodHandle wgpuComputePassEncoderRelease$handle() {
        return wgpuComputePassEncoderRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static MemorySegment wgpuComputePassEncoderRelease$address() {
        return wgpuComputePassEncoderRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder)
     * }
     */
    public static void wgpuComputePassEncoderRelease(MemorySegment computePassEncoder) {
        var mh$ = wgpuComputePassEncoderRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePassEncoderRelease", computePassEncoder);
            }
            mh$.invokeExact(computePassEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePipelineGetBindGroupLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePipelineGetBindGroupLayout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex)
     * }
     */
    public static FunctionDescriptor wgpuComputePipelineGetBindGroupLayout$descriptor() {
        return wgpuComputePipelineGetBindGroupLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex)
     * }
     */
    public static MethodHandle wgpuComputePipelineGetBindGroupLayout$handle() {
        return wgpuComputePipelineGetBindGroupLayout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex)
     * }
     */
    public static MemorySegment wgpuComputePipelineGetBindGroupLayout$address() {
        return wgpuComputePipelineGetBindGroupLayout.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex)
     * }
     */
    public static MemorySegment wgpuComputePipelineGetBindGroupLayout(MemorySegment computePipeline, int groupIndex) {
        var mh$ = wgpuComputePipelineGetBindGroupLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePipelineGetBindGroupLayout", computePipeline, groupIndex);
            }
            return (MemorySegment) mh$.invokeExact(computePipeline, groupIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePipelineSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePipelineSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuComputePipelineSetLabel$descriptor() {
        return wgpuComputePipelineSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuComputePipelineSetLabel$handle() {
        return wgpuComputePipelineSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuComputePipelineSetLabel$address() {
        return wgpuComputePipelineSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, WGPUStringView label)
     * }
     */
    public static void wgpuComputePipelineSetLabel(MemorySegment computePipeline, MemorySegment label) {
        var mh$ = wgpuComputePipelineSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePipelineSetLabel", computePipeline, label);
            }
            mh$.invokeExact(computePipeline, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePipelineAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePipelineAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePipelineAddRef(WGPUComputePipeline computePipeline)
     * }
     */
    public static FunctionDescriptor wgpuComputePipelineAddRef$descriptor() {
        return wgpuComputePipelineAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePipelineAddRef(WGPUComputePipeline computePipeline)
     * }
     */
    public static MethodHandle wgpuComputePipelineAddRef$handle() {
        return wgpuComputePipelineAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePipelineAddRef(WGPUComputePipeline computePipeline)
     * }
     */
    public static MemorySegment wgpuComputePipelineAddRef$address() {
        return wgpuComputePipelineAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePipelineAddRef(WGPUComputePipeline computePipeline)
     * }
     */
    public static void wgpuComputePipelineAddRef(MemorySegment computePipeline) {
        var mh$ = wgpuComputePipelineAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePipelineAddRef", computePipeline);
            }
            mh$.invokeExact(computePipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuComputePipelineRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuComputePipelineRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuComputePipelineRelease(WGPUComputePipeline computePipeline)
     * }
     */
    public static FunctionDescriptor wgpuComputePipelineRelease$descriptor() {
        return wgpuComputePipelineRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuComputePipelineRelease(WGPUComputePipeline computePipeline)
     * }
     */
    public static MethodHandle wgpuComputePipelineRelease$handle() {
        return wgpuComputePipelineRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuComputePipelineRelease(WGPUComputePipeline computePipeline)
     * }
     */
    public static MemorySegment wgpuComputePipelineRelease$address() {
        return wgpuComputePipelineRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuComputePipelineRelease(WGPUComputePipeline computePipeline)
     * }
     */
    public static void wgpuComputePipelineRelease(MemorySegment computePipeline) {
        var mh$ = wgpuComputePipelineRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuComputePipelineRelease", computePipeline);
            }
            mh$.invokeExact(computePipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateBindGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateBindGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, const WGPUBindGroupDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateBindGroup$descriptor() {
        return wgpuDeviceCreateBindGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, const WGPUBindGroupDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateBindGroup$handle() {
        return wgpuDeviceCreateBindGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, const WGPUBindGroupDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateBindGroup$address() {
        return wgpuDeviceCreateBindGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, const WGPUBindGroupDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateBindGroup(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateBindGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateBindGroup", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateBindGroupLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateBindGroupLayout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, const WGPUBindGroupLayoutDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateBindGroupLayout$descriptor() {
        return wgpuDeviceCreateBindGroupLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, const WGPUBindGroupLayoutDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateBindGroupLayout$handle() {
        return wgpuDeviceCreateBindGroupLayout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, const WGPUBindGroupLayoutDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateBindGroupLayout$address() {
        return wgpuDeviceCreateBindGroupLayout.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, const WGPUBindGroupLayoutDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateBindGroupLayout(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateBindGroupLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateBindGroupLayout", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, const WGPUBufferDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateBuffer$descriptor() {
        return wgpuDeviceCreateBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, const WGPUBufferDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateBuffer$handle() {
        return wgpuDeviceCreateBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, const WGPUBufferDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateBuffer$address() {
        return wgpuDeviceCreateBuffer.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, const WGPUBufferDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateBuffer(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateBuffer", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateCommandEncoder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateCommandEncoder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, const WGPUCommandEncoderDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateCommandEncoder$descriptor() {
        return wgpuDeviceCreateCommandEncoder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, const WGPUCommandEncoderDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateCommandEncoder$handle() {
        return wgpuDeviceCreateCommandEncoder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, const WGPUCommandEncoderDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateCommandEncoder$address() {
        return wgpuDeviceCreateCommandEncoder.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, const WGPUCommandEncoderDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateCommandEncoder(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateCommandEncoder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateCommandEncoder", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateComputePipeline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateComputePipeline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, const WGPUComputePipelineDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateComputePipeline$descriptor() {
        return wgpuDeviceCreateComputePipeline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, const WGPUComputePipelineDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateComputePipeline$handle() {
        return wgpuDeviceCreateComputePipeline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, const WGPUComputePipelineDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateComputePipeline$address() {
        return wgpuDeviceCreateComputePipeline.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, const WGPUComputePipelineDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateComputePipeline(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateComputePipeline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateComputePipeline", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateComputePipelineAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                WGPUFuture.layout(),
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                WGPUCreateComputePipelineAsyncCallbackInfo.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateComputePipelineAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, const WGPUComputePipelineDescriptor *descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateComputePipelineAsync$descriptor() {
        return wgpuDeviceCreateComputePipelineAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, const WGPUComputePipelineDescriptor *descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuDeviceCreateComputePipelineAsync$handle() {
        return wgpuDeviceCreateComputePipelineAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, const WGPUComputePipelineDescriptor *descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuDeviceCreateComputePipelineAsync$address() {
        return wgpuDeviceCreateComputePipelineAsync.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUFuture wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, const WGPUComputePipelineDescriptor *descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuDeviceCreateComputePipelineAsync(SegmentAllocator allocator, MemorySegment device,
            MemorySegment descriptor, MemorySegment callbackInfo) {
        var mh$ = wgpuDeviceCreateComputePipelineAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateComputePipelineAsync", allocator, device, descriptor, callbackInfo);
            }
            return (MemorySegment) mh$.invokeExact(allocator, device, descriptor, callbackInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreatePipelineLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreatePipelineLayout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, const WGPUPipelineLayoutDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreatePipelineLayout$descriptor() {
        return wgpuDeviceCreatePipelineLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, const WGPUPipelineLayoutDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreatePipelineLayout$handle() {
        return wgpuDeviceCreatePipelineLayout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, const WGPUPipelineLayoutDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreatePipelineLayout$address() {
        return wgpuDeviceCreatePipelineLayout.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, const WGPUPipelineLayoutDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreatePipelineLayout(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreatePipelineLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreatePipelineLayout", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateQuerySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateQuerySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, const WGPUQuerySetDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateQuerySet$descriptor() {
        return wgpuDeviceCreateQuerySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, const WGPUQuerySetDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateQuerySet$handle() {
        return wgpuDeviceCreateQuerySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, const WGPUQuerySetDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateQuerySet$address() {
        return wgpuDeviceCreateQuerySet.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, const WGPUQuerySetDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateQuerySet(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateQuerySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateQuerySet", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateRenderBundleEncoder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateRenderBundleEncoder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, const WGPURenderBundleEncoderDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateRenderBundleEncoder$descriptor() {
        return wgpuDeviceCreateRenderBundleEncoder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, const WGPURenderBundleEncoderDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateRenderBundleEncoder$handle() {
        return wgpuDeviceCreateRenderBundleEncoder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, const WGPURenderBundleEncoderDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateRenderBundleEncoder$address() {
        return wgpuDeviceCreateRenderBundleEncoder.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, const WGPURenderBundleEncoderDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateRenderBundleEncoder(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateRenderBundleEncoder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateRenderBundleEncoder", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateRenderPipeline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateRenderPipeline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, const WGPURenderPipelineDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateRenderPipeline$descriptor() {
        return wgpuDeviceCreateRenderPipeline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, const WGPURenderPipelineDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateRenderPipeline$handle() {
        return wgpuDeviceCreateRenderPipeline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, const WGPURenderPipelineDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateRenderPipeline$address() {
        return wgpuDeviceCreateRenderPipeline.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, const WGPURenderPipelineDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateRenderPipeline(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateRenderPipeline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateRenderPipeline", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateRenderPipelineAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                WGPUFuture.layout(),
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                WGPUCreateRenderPipelineAsyncCallbackInfo.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateRenderPipelineAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, const WGPURenderPipelineDescriptor *descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateRenderPipelineAsync$descriptor() {
        return wgpuDeviceCreateRenderPipelineAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, const WGPURenderPipelineDescriptor *descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuDeviceCreateRenderPipelineAsync$handle() {
        return wgpuDeviceCreateRenderPipelineAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, const WGPURenderPipelineDescriptor *descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuDeviceCreateRenderPipelineAsync$address() {
        return wgpuDeviceCreateRenderPipelineAsync.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUFuture wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, const WGPURenderPipelineDescriptor *descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuDeviceCreateRenderPipelineAsync(SegmentAllocator allocator, MemorySegment device,
            MemorySegment descriptor, MemorySegment callbackInfo) {
        var mh$ = wgpuDeviceCreateRenderPipelineAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateRenderPipelineAsync", allocator, device, descriptor, callbackInfo);
            }
            return (MemorySegment) mh$.invokeExact(allocator, device, descriptor, callbackInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateSampler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateSampler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, const WGPUSamplerDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateSampler$descriptor() {
        return wgpuDeviceCreateSampler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, const WGPUSamplerDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateSampler$handle() {
        return wgpuDeviceCreateSampler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, const WGPUSamplerDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateSampler$address() {
        return wgpuDeviceCreateSampler.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, const WGPUSamplerDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateSampler(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateSampler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateSampler", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateShaderModule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateShaderModule");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, const WGPUShaderModuleDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateShaderModule$descriptor() {
        return wgpuDeviceCreateShaderModule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, const WGPUShaderModuleDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateShaderModule$handle() {
        return wgpuDeviceCreateShaderModule.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, const WGPUShaderModuleDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateShaderModule$address() {
        return wgpuDeviceCreateShaderModule.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, const WGPUShaderModuleDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateShaderModule(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateShaderModule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateShaderModule", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceCreateTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceCreateTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, const WGPUTextureDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuDeviceCreateTexture$descriptor() {
        return wgpuDeviceCreateTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, const WGPUTextureDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuDeviceCreateTexture$handle() {
        return wgpuDeviceCreateTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, const WGPUTextureDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateTexture$address() {
        return wgpuDeviceCreateTexture.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, const WGPUTextureDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuDeviceCreateTexture(MemorySegment device, MemorySegment descriptor) {
        var mh$ = wgpuDeviceCreateTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceCreateTexture", device, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(device, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuDeviceDestroy(WGPUDevice device)
     * }
     */
    public static FunctionDescriptor wgpuDeviceDestroy$descriptor() {
        return wgpuDeviceDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuDeviceDestroy(WGPUDevice device)
     * }
     */
    public static MethodHandle wgpuDeviceDestroy$handle() {
        return wgpuDeviceDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuDeviceDestroy(WGPUDevice device)
     * }
     */
    public static MemorySegment wgpuDeviceDestroy$address() {
        return wgpuDeviceDestroy.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuDeviceDestroy(WGPUDevice device)
     * }
     */
    public static void wgpuDeviceDestroy(MemorySegment device) {
        var mh$ = wgpuDeviceDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceDestroy", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceGetAdapterInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceGetAdapterInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuDeviceGetAdapterInfo(WGPUDevice device, WGPUAdapterInfo *adapterInfo)
     * }
     */
    public static FunctionDescriptor wgpuDeviceGetAdapterInfo$descriptor() {
        return wgpuDeviceGetAdapterInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuDeviceGetAdapterInfo(WGPUDevice device, WGPUAdapterInfo *adapterInfo)
     * }
     */
    public static MethodHandle wgpuDeviceGetAdapterInfo$handle() {
        return wgpuDeviceGetAdapterInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuDeviceGetAdapterInfo(WGPUDevice device, WGPUAdapterInfo *adapterInfo)
     * }
     */
    public static MemorySegment wgpuDeviceGetAdapterInfo$address() {
        return wgpuDeviceGetAdapterInfo.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUStatus wgpuDeviceGetAdapterInfo(WGPUDevice device, WGPUAdapterInfo *adapterInfo)
     * }
     */
    public static int wgpuDeviceGetAdapterInfo(MemorySegment device, MemorySegment adapterInfo) {
        var mh$ = wgpuDeviceGetAdapterInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceGetAdapterInfo", device, adapterInfo);
            }
            return (int) mh$.invokeExact(device, adapterInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceGetFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceGetFeatures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuDeviceGetFeatures(WGPUDevice device, WGPUSupportedFeatures *features)
     * }
     */
    public static FunctionDescriptor wgpuDeviceGetFeatures$descriptor() {
        return wgpuDeviceGetFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuDeviceGetFeatures(WGPUDevice device, WGPUSupportedFeatures *features)
     * }
     */
    public static MethodHandle wgpuDeviceGetFeatures$handle() {
        return wgpuDeviceGetFeatures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuDeviceGetFeatures(WGPUDevice device, WGPUSupportedFeatures *features)
     * }
     */
    public static MemorySegment wgpuDeviceGetFeatures$address() {
        return wgpuDeviceGetFeatures.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuDeviceGetFeatures(WGPUDevice device, WGPUSupportedFeatures *features)
     * }
     */
    public static void wgpuDeviceGetFeatures(MemorySegment device, MemorySegment features) {
        var mh$ = wgpuDeviceGetFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceGetFeatures", device, features);
            }
            mh$.invokeExact(device, features);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceGetLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceGetLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuDeviceGetLimits(WGPUDevice device, WGPULimits *limits)
     * }
     */
    public static FunctionDescriptor wgpuDeviceGetLimits$descriptor() {
        return wgpuDeviceGetLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuDeviceGetLimits(WGPUDevice device, WGPULimits *limits)
     * }
     */
    public static MethodHandle wgpuDeviceGetLimits$handle() {
        return wgpuDeviceGetLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuDeviceGetLimits(WGPUDevice device, WGPULimits *limits)
     * }
     */
    public static MemorySegment wgpuDeviceGetLimits$address() {
        return wgpuDeviceGetLimits.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUStatus wgpuDeviceGetLimits(WGPUDevice device, WGPULimits *limits)
     * }
     */
    public static int wgpuDeviceGetLimits(MemorySegment device, MemorySegment limits) {
        var mh$ = wgpuDeviceGetLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceGetLimits", device, limits);
            }
            return (int) mh$.invokeExact(device, limits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceGetLostFuture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                WGPUFuture.layout(),
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceGetLostFuture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * WGPUFuture wgpuDeviceGetLostFuture(WGPUDevice device)
     * }
     */
    public static FunctionDescriptor wgpuDeviceGetLostFuture$descriptor() {
        return wgpuDeviceGetLostFuture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * WGPUFuture wgpuDeviceGetLostFuture(WGPUDevice device)
     * }
     */
    public static MethodHandle wgpuDeviceGetLostFuture$handle() {
        return wgpuDeviceGetLostFuture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * WGPUFuture wgpuDeviceGetLostFuture(WGPUDevice device)
     * }
     */
    public static MemorySegment wgpuDeviceGetLostFuture$address() {
        return wgpuDeviceGetLostFuture.ADDR;
    }

    /**
     * {@snippet lang = c : * WGPUFuture wgpuDeviceGetLostFuture(WGPUDevice device)
     * }
     */
    public static MemorySegment wgpuDeviceGetLostFuture(SegmentAllocator allocator, MemorySegment device) {
        var mh$ = wgpuDeviceGetLostFuture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceGetLostFuture", allocator, device);
            }
            return (MemorySegment) mh$.invokeExact(allocator, device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceGetQueue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceGetQueue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * WGPUQueue wgpuDeviceGetQueue(WGPUDevice device)
     * }
     */
    public static FunctionDescriptor wgpuDeviceGetQueue$descriptor() {
        return wgpuDeviceGetQueue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * WGPUQueue wgpuDeviceGetQueue(WGPUDevice device)
     * }
     */
    public static MethodHandle wgpuDeviceGetQueue$handle() {
        return wgpuDeviceGetQueue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * WGPUQueue wgpuDeviceGetQueue(WGPUDevice device)
     * }
     */
    public static MemorySegment wgpuDeviceGetQueue$address() {
        return wgpuDeviceGetQueue.ADDR;
    }

    /**
     * {@snippet lang = c : * WGPUQueue wgpuDeviceGetQueue(WGPUDevice device)
     * }
     */
    public static MemorySegment wgpuDeviceGetQueue(MemorySegment device) {
        var mh$ = wgpuDeviceGetQueue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceGetQueue", device);
            }
            return (MemorySegment) mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceHasFeature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceHasFeature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature)
     * }
     */
    public static FunctionDescriptor wgpuDeviceHasFeature$descriptor() {
        return wgpuDeviceHasFeature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature)
     * }
     */
    public static MethodHandle wgpuDeviceHasFeature$handle() {
        return wgpuDeviceHasFeature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature)
     * }
     */
    public static MemorySegment wgpuDeviceHasFeature$address() {
        return wgpuDeviceHasFeature.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature)
     * }
     */
    public static int wgpuDeviceHasFeature(MemorySegment device, int feature) {
        var mh$ = wgpuDeviceHasFeature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceHasFeature", device, feature);
            }
            return (int) mh$.invokeExact(device, feature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDevicePopErrorScope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                WGPUFuture.layout(),
                webgpu_h.C_POINTER,
                WGPUPopErrorScopeCallbackInfo.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDevicePopErrorScope");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuDevicePopErrorScope(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuDevicePopErrorScope$descriptor() {
        return wgpuDevicePopErrorScope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuDevicePopErrorScope(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuDevicePopErrorScope$handle() {
        return wgpuDevicePopErrorScope.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuDevicePopErrorScope(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuDevicePopErrorScope$address() {
        return wgpuDevicePopErrorScope.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUFuture wgpuDevicePopErrorScope(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuDevicePopErrorScope(SegmentAllocator allocator, MemorySegment device,
            MemorySegment callbackInfo) {
        var mh$ = wgpuDevicePopErrorScope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDevicePopErrorScope", allocator, device, callbackInfo);
            }
            return (MemorySegment) mh$.invokeExact(allocator, device, callbackInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDevicePushErrorScope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDevicePushErrorScope");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter)
     * }
     */
    public static FunctionDescriptor wgpuDevicePushErrorScope$descriptor() {
        return wgpuDevicePushErrorScope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter)
     * }
     */
    public static MethodHandle wgpuDevicePushErrorScope$handle() {
        return wgpuDevicePushErrorScope.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter)
     * }
     */
    public static MemorySegment wgpuDevicePushErrorScope$address() {
        return wgpuDevicePushErrorScope.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter)
     * }
     */
    public static void wgpuDevicePushErrorScope(MemorySegment device, int filter) {
        var mh$ = wgpuDevicePushErrorScope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDevicePushErrorScope", device, filter);
            }
            mh$.invokeExact(device, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuDeviceSetLabel(WGPUDevice device, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuDeviceSetLabel$descriptor() {
        return wgpuDeviceSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuDeviceSetLabel(WGPUDevice device, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuDeviceSetLabel$handle() {
        return wgpuDeviceSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuDeviceSetLabel(WGPUDevice device, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuDeviceSetLabel$address() {
        return wgpuDeviceSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuDeviceSetLabel(WGPUDevice device, WGPUStringView label)
     * }
     */
    public static void wgpuDeviceSetLabel(MemorySegment device, MemorySegment label) {
        var mh$ = wgpuDeviceSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceSetLabel", device, label);
            }
            mh$.invokeExact(device, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuDeviceAddRef(WGPUDevice device)
     * }
     */
    public static FunctionDescriptor wgpuDeviceAddRef$descriptor() {
        return wgpuDeviceAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuDeviceAddRef(WGPUDevice device)
     * }
     */
    public static MethodHandle wgpuDeviceAddRef$handle() {
        return wgpuDeviceAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuDeviceAddRef(WGPUDevice device)
     * }
     */
    public static MemorySegment wgpuDeviceAddRef$address() {
        return wgpuDeviceAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuDeviceAddRef(WGPUDevice device)
     * }
     */
    public static void wgpuDeviceAddRef(MemorySegment device) {
        var mh$ = wgpuDeviceAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceAddRef", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuDeviceRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuDeviceRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuDeviceRelease(WGPUDevice device)
     * }
     */
    public static FunctionDescriptor wgpuDeviceRelease$descriptor() {
        return wgpuDeviceRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuDeviceRelease(WGPUDevice device)
     * }
     */
    public static MethodHandle wgpuDeviceRelease$handle() {
        return wgpuDeviceRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuDeviceRelease(WGPUDevice device)
     * }
     */
    public static MemorySegment wgpuDeviceRelease$address() {
        return wgpuDeviceRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuDeviceRelease(WGPUDevice device)
     * }
     */
    public static void wgpuDeviceRelease(MemorySegment device) {
        var mh$ = wgpuDeviceRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuDeviceRelease", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuInstanceCreateSurface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuInstanceCreateSurface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, const WGPUSurfaceDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuInstanceCreateSurface$descriptor() {
        return wgpuInstanceCreateSurface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, const WGPUSurfaceDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuInstanceCreateSurface$handle() {
        return wgpuInstanceCreateSurface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, const WGPUSurfaceDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuInstanceCreateSurface$address() {
        return wgpuInstanceCreateSurface.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, const WGPUSurfaceDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuInstanceCreateSurface(MemorySegment instance, MemorySegment descriptor) {
        var mh$ = wgpuInstanceCreateSurface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuInstanceCreateSurface", instance, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(instance, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuInstanceGetWGSLLanguageFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuInstanceGetWGSLLanguageFeatures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuInstanceGetWGSLLanguageFeatures(WGPUInstance instance, WGPUSupportedWGSLLanguageFeatures *features)
     * }
     */
    public static FunctionDescriptor wgpuInstanceGetWGSLLanguageFeatures$descriptor() {
        return wgpuInstanceGetWGSLLanguageFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuInstanceGetWGSLLanguageFeatures(WGPUInstance instance, WGPUSupportedWGSLLanguageFeatures *features)
     * }
     */
    public static MethodHandle wgpuInstanceGetWGSLLanguageFeatures$handle() {
        return wgpuInstanceGetWGSLLanguageFeatures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuInstanceGetWGSLLanguageFeatures(WGPUInstance instance, WGPUSupportedWGSLLanguageFeatures *features)
     * }
     */
    public static MemorySegment wgpuInstanceGetWGSLLanguageFeatures$address() {
        return wgpuInstanceGetWGSLLanguageFeatures.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUStatus wgpuInstanceGetWGSLLanguageFeatures(WGPUInstance instance, WGPUSupportedWGSLLanguageFeatures *features)
     * }
     */
    public static int wgpuInstanceGetWGSLLanguageFeatures(MemorySegment instance, MemorySegment features) {
        var mh$ = wgpuInstanceGetWGSLLanguageFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuInstanceGetWGSLLanguageFeatures", instance, features);
            }
            return (int) mh$.invokeExact(instance, features);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuInstanceHasWGSLLanguageFeature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuInstanceHasWGSLLanguageFeature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBool wgpuInstanceHasWGSLLanguageFeature(WGPUInstance instance, WGPUWGSLLanguageFeatureName feature)
     * }
     */
    public static FunctionDescriptor wgpuInstanceHasWGSLLanguageFeature$descriptor() {
        return wgpuInstanceHasWGSLLanguageFeature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBool wgpuInstanceHasWGSLLanguageFeature(WGPUInstance instance, WGPUWGSLLanguageFeatureName feature)
     * }
     */
    public static MethodHandle wgpuInstanceHasWGSLLanguageFeature$handle() {
        return wgpuInstanceHasWGSLLanguageFeature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBool wgpuInstanceHasWGSLLanguageFeature(WGPUInstance instance, WGPUWGSLLanguageFeatureName feature)
     * }
     */
    public static MemorySegment wgpuInstanceHasWGSLLanguageFeature$address() {
        return wgpuInstanceHasWGSLLanguageFeature.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBool wgpuInstanceHasWGSLLanguageFeature(WGPUInstance instance, WGPUWGSLLanguageFeatureName feature)
     * }
     */
    public static int wgpuInstanceHasWGSLLanguageFeature(MemorySegment instance, int feature) {
        var mh$ = wgpuInstanceHasWGSLLanguageFeature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuInstanceHasWGSLLanguageFeature", instance, feature);
            }
            return (int) mh$.invokeExact(instance, feature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuInstanceProcessEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuInstanceProcessEvents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuInstanceProcessEvents(WGPUInstance instance)
     * }
     */
    public static FunctionDescriptor wgpuInstanceProcessEvents$descriptor() {
        return wgpuInstanceProcessEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuInstanceProcessEvents(WGPUInstance instance)
     * }
     */
    public static MethodHandle wgpuInstanceProcessEvents$handle() {
        return wgpuInstanceProcessEvents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuInstanceProcessEvents(WGPUInstance instance)
     * }
     */
    public static MemorySegment wgpuInstanceProcessEvents$address() {
        return wgpuInstanceProcessEvents.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuInstanceProcessEvents(WGPUInstance instance)
     * }
     */
    public static void wgpuInstanceProcessEvents(MemorySegment instance) {
        var mh$ = wgpuInstanceProcessEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuInstanceProcessEvents", instance);
            }
            mh$.invokeExact(instance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuInstanceRequestAdapter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                WGPUFuture.layout(),
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                WGPURequestAdapterCallbackInfo.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuInstanceRequestAdapter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuInstanceRequestAdapter(WGPUInstance instance, const WGPURequestAdapterOptions *options, WGPURequestAdapterCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuInstanceRequestAdapter$descriptor() {
        return wgpuInstanceRequestAdapter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuInstanceRequestAdapter(WGPUInstance instance, const WGPURequestAdapterOptions *options, WGPURequestAdapterCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuInstanceRequestAdapter$handle() {
        return wgpuInstanceRequestAdapter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuInstanceRequestAdapter(WGPUInstance instance, const WGPURequestAdapterOptions *options, WGPURequestAdapterCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuInstanceRequestAdapter$address() {
        return wgpuInstanceRequestAdapter.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUFuture wgpuInstanceRequestAdapter(WGPUInstance instance, const WGPURequestAdapterOptions *options, WGPURequestAdapterCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuInstanceRequestAdapter(SegmentAllocator allocator, MemorySegment instance,
            MemorySegment options, MemorySegment callbackInfo) {
        var mh$ = wgpuInstanceRequestAdapter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuInstanceRequestAdapter", allocator, instance, options, callbackInfo);
            }
            return (MemorySegment) mh$.invokeExact(allocator, instance, options, callbackInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuInstanceWaitAny {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuInstanceWaitAny");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUWaitStatus wgpuInstanceWaitAny(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo *futures, uint64_t timeoutNS)
     * }
     */
    public static FunctionDescriptor wgpuInstanceWaitAny$descriptor() {
        return wgpuInstanceWaitAny.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUWaitStatus wgpuInstanceWaitAny(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo *futures, uint64_t timeoutNS)
     * }
     */
    public static MethodHandle wgpuInstanceWaitAny$handle() {
        return wgpuInstanceWaitAny.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUWaitStatus wgpuInstanceWaitAny(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo *futures, uint64_t timeoutNS)
     * }
     */
    public static MemorySegment wgpuInstanceWaitAny$address() {
        return wgpuInstanceWaitAny.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUWaitStatus wgpuInstanceWaitAny(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo *futures, uint64_t timeoutNS)
     * }
     */
    public static int wgpuInstanceWaitAny(MemorySegment instance, long futureCount, MemorySegment futures,
            long timeoutNS) {
        var mh$ = wgpuInstanceWaitAny.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuInstanceWaitAny", instance, futureCount, futures, timeoutNS);
            }
            return (int) mh$.invokeExact(instance, futureCount, futures, timeoutNS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuInstanceAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuInstanceAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuInstanceAddRef(WGPUInstance instance)
     * }
     */
    public static FunctionDescriptor wgpuInstanceAddRef$descriptor() {
        return wgpuInstanceAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuInstanceAddRef(WGPUInstance instance)
     * }
     */
    public static MethodHandle wgpuInstanceAddRef$handle() {
        return wgpuInstanceAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuInstanceAddRef(WGPUInstance instance)
     * }
     */
    public static MemorySegment wgpuInstanceAddRef$address() {
        return wgpuInstanceAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuInstanceAddRef(WGPUInstance instance)
     * }
     */
    public static void wgpuInstanceAddRef(MemorySegment instance) {
        var mh$ = wgpuInstanceAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuInstanceAddRef", instance);
            }
            mh$.invokeExact(instance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuInstanceRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuInstanceRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuInstanceRelease(WGPUInstance instance)
     * }
     */
    public static FunctionDescriptor wgpuInstanceRelease$descriptor() {
        return wgpuInstanceRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuInstanceRelease(WGPUInstance instance)
     * }
     */
    public static MethodHandle wgpuInstanceRelease$handle() {
        return wgpuInstanceRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuInstanceRelease(WGPUInstance instance)
     * }
     */
    public static MemorySegment wgpuInstanceRelease$address() {
        return wgpuInstanceRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuInstanceRelease(WGPUInstance instance)
     * }
     */
    public static void wgpuInstanceRelease(MemorySegment instance) {
        var mh$ = wgpuInstanceRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuInstanceRelease", instance);
            }
            mh$.invokeExact(instance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuPipelineLayoutSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuPipelineLayoutSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuPipelineLayoutSetLabel$descriptor() {
        return wgpuPipelineLayoutSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuPipelineLayoutSetLabel$handle() {
        return wgpuPipelineLayoutSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuPipelineLayoutSetLabel$address() {
        return wgpuPipelineLayoutSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, WGPUStringView label)
     * }
     */
    public static void wgpuPipelineLayoutSetLabel(MemorySegment pipelineLayout, MemorySegment label) {
        var mh$ = wgpuPipelineLayoutSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuPipelineLayoutSetLabel", pipelineLayout, label);
            }
            mh$.invokeExact(pipelineLayout, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuPipelineLayoutAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuPipelineLayoutAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutAddRef(WGPUPipelineLayout pipelineLayout)
     * }
     */
    public static FunctionDescriptor wgpuPipelineLayoutAddRef$descriptor() {
        return wgpuPipelineLayoutAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutAddRef(WGPUPipelineLayout pipelineLayout)
     * }
     */
    public static MethodHandle wgpuPipelineLayoutAddRef$handle() {
        return wgpuPipelineLayoutAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutAddRef(WGPUPipelineLayout pipelineLayout)
     * }
     */
    public static MemorySegment wgpuPipelineLayoutAddRef$address() {
        return wgpuPipelineLayoutAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutAddRef(WGPUPipelineLayout pipelineLayout)
     * }
     */
    public static void wgpuPipelineLayoutAddRef(MemorySegment pipelineLayout) {
        var mh$ = wgpuPipelineLayoutAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuPipelineLayoutAddRef", pipelineLayout);
            }
            mh$.invokeExact(pipelineLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuPipelineLayoutRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuPipelineLayoutRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout)
     * }
     */
    public static FunctionDescriptor wgpuPipelineLayoutRelease$descriptor() {
        return wgpuPipelineLayoutRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout)
     * }
     */
    public static MethodHandle wgpuPipelineLayoutRelease$handle() {
        return wgpuPipelineLayoutRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout)
     * }
     */
    public static MemorySegment wgpuPipelineLayoutRelease$address() {
        return wgpuPipelineLayoutRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout)
     * }
     */
    public static void wgpuPipelineLayoutRelease(MemorySegment pipelineLayout) {
        var mh$ = wgpuPipelineLayoutRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuPipelineLayoutRelease", pipelineLayout);
            }
            mh$.invokeExact(pipelineLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQuerySetDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQuerySetDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuQuerySetDestroy(WGPUQuerySet querySet)
     * }
     */
    public static FunctionDescriptor wgpuQuerySetDestroy$descriptor() {
        return wgpuQuerySetDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuQuerySetDestroy(WGPUQuerySet querySet)
     * }
     */
    public static MethodHandle wgpuQuerySetDestroy$handle() {
        return wgpuQuerySetDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuQuerySetDestroy(WGPUQuerySet querySet)
     * }
     */
    public static MemorySegment wgpuQuerySetDestroy$address() {
        return wgpuQuerySetDestroy.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuQuerySetDestroy(WGPUQuerySet querySet)
     * }
     */
    public static void wgpuQuerySetDestroy(MemorySegment querySet) {
        var mh$ = wgpuQuerySetDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQuerySetDestroy", querySet);
            }
            mh$.invokeExact(querySet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQuerySetGetCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQuerySetGetCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * uint32_t wgpuQuerySetGetCount(WGPUQuerySet querySet)
     * }
     */
    public static FunctionDescriptor wgpuQuerySetGetCount$descriptor() {
        return wgpuQuerySetGetCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * uint32_t wgpuQuerySetGetCount(WGPUQuerySet querySet)
     * }
     */
    public static MethodHandle wgpuQuerySetGetCount$handle() {
        return wgpuQuerySetGetCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * uint32_t wgpuQuerySetGetCount(WGPUQuerySet querySet)
     * }
     */
    public static MemorySegment wgpuQuerySetGetCount$address() {
        return wgpuQuerySetGetCount.ADDR;
    }

    /**
     * {@snippet lang = c : * uint32_t wgpuQuerySetGetCount(WGPUQuerySet querySet)
     * }
     */
    public static int wgpuQuerySetGetCount(MemorySegment querySet) {
        var mh$ = wgpuQuerySetGetCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQuerySetGetCount", querySet);
            }
            return (int) mh$.invokeExact(querySet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQuerySetGetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQuerySetGetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet)
     * }
     */
    public static FunctionDescriptor wgpuQuerySetGetType$descriptor() {
        return wgpuQuerySetGetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet)
     * }
     */
    public static MethodHandle wgpuQuerySetGetType$handle() {
        return wgpuQuerySetGetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet)
     * }
     */
    public static MemorySegment wgpuQuerySetGetType$address() {
        return wgpuQuerySetGetType.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet)
     * }
     */
    public static int wgpuQuerySetGetType(MemorySegment querySet) {
        var mh$ = wgpuQuerySetGetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQuerySetGetType", querySet);
            }
            return (int) mh$.invokeExact(querySet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQuerySetSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQuerySetSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuQuerySetSetLabel(WGPUQuerySet querySet, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuQuerySetSetLabel$descriptor() {
        return wgpuQuerySetSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuQuerySetSetLabel(WGPUQuerySet querySet, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuQuerySetSetLabel$handle() {
        return wgpuQuerySetSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuQuerySetSetLabel(WGPUQuerySet querySet, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuQuerySetSetLabel$address() {
        return wgpuQuerySetSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuQuerySetSetLabel(WGPUQuerySet querySet, WGPUStringView label)
     * }
     */
    public static void wgpuQuerySetSetLabel(MemorySegment querySet, MemorySegment label) {
        var mh$ = wgpuQuerySetSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQuerySetSetLabel", querySet, label);
            }
            mh$.invokeExact(querySet, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQuerySetAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQuerySetAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuQuerySetAddRef(WGPUQuerySet querySet)
     * }
     */
    public static FunctionDescriptor wgpuQuerySetAddRef$descriptor() {
        return wgpuQuerySetAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuQuerySetAddRef(WGPUQuerySet querySet)
     * }
     */
    public static MethodHandle wgpuQuerySetAddRef$handle() {
        return wgpuQuerySetAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuQuerySetAddRef(WGPUQuerySet querySet)
     * }
     */
    public static MemorySegment wgpuQuerySetAddRef$address() {
        return wgpuQuerySetAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuQuerySetAddRef(WGPUQuerySet querySet)
     * }
     */
    public static void wgpuQuerySetAddRef(MemorySegment querySet) {
        var mh$ = wgpuQuerySetAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQuerySetAddRef", querySet);
            }
            mh$.invokeExact(querySet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQuerySetRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQuerySetRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuQuerySetRelease(WGPUQuerySet querySet)
     * }
     */
    public static FunctionDescriptor wgpuQuerySetRelease$descriptor() {
        return wgpuQuerySetRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuQuerySetRelease(WGPUQuerySet querySet)
     * }
     */
    public static MethodHandle wgpuQuerySetRelease$handle() {
        return wgpuQuerySetRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuQuerySetRelease(WGPUQuerySet querySet)
     * }
     */
    public static MemorySegment wgpuQuerySetRelease$address() {
        return wgpuQuerySetRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuQuerySetRelease(WGPUQuerySet querySet)
     * }
     */
    public static void wgpuQuerySetRelease(MemorySegment querySet) {
        var mh$ = wgpuQuerySetRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQuerySetRelease", querySet);
            }
            mh$.invokeExact(querySet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQueueOnSubmittedWorkDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                WGPUFuture.layout(),
                webgpu_h.C_POINTER,
                WGPUQueueWorkDoneCallbackInfo.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQueueOnSubmittedWorkDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuQueueOnSubmittedWorkDone$descriptor() {
        return wgpuQueueOnSubmittedWorkDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuQueueOnSubmittedWorkDone$handle() {
        return wgpuQueueOnSubmittedWorkDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuQueueOnSubmittedWorkDone$address() {
        return wgpuQueueOnSubmittedWorkDone.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUFuture wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuQueueOnSubmittedWorkDone(SegmentAllocator allocator, MemorySegment queue,
            MemorySegment callbackInfo) {
        var mh$ = wgpuQueueOnSubmittedWorkDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQueueOnSubmittedWorkDone", allocator, queue, callbackInfo);
            }
            return (MemorySegment) mh$.invokeExact(allocator, queue, callbackInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQueueSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQueueSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuQueueSetLabel(WGPUQueue queue, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuQueueSetLabel$descriptor() {
        return wgpuQueueSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuQueueSetLabel(WGPUQueue queue, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuQueueSetLabel$handle() {
        return wgpuQueueSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuQueueSetLabel(WGPUQueue queue, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuQueueSetLabel$address() {
        return wgpuQueueSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuQueueSetLabel(WGPUQueue queue, WGPUStringView label)
     * }
     */
    public static void wgpuQueueSetLabel(MemorySegment queue, MemorySegment label) {
        var mh$ = wgpuQueueSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQueueSetLabel", queue, label);
            }
            mh$.invokeExact(queue, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQueueSubmit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQueueSubmit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuQueueSubmit(WGPUQueue queue, size_t commandCount, const WGPUCommandBuffer *commands)
     * }
     */
    public static FunctionDescriptor wgpuQueueSubmit$descriptor() {
        return wgpuQueueSubmit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuQueueSubmit(WGPUQueue queue, size_t commandCount, const WGPUCommandBuffer *commands)
     * }
     */
    public static MethodHandle wgpuQueueSubmit$handle() {
        return wgpuQueueSubmit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuQueueSubmit(WGPUQueue queue, size_t commandCount, const WGPUCommandBuffer *commands)
     * }
     */
    public static MemorySegment wgpuQueueSubmit$address() {
        return wgpuQueueSubmit.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuQueueSubmit(WGPUQueue queue, size_t commandCount, const WGPUCommandBuffer *commands)
     * }
     */
    public static void wgpuQueueSubmit(MemorySegment queue, long commandCount, MemorySegment commands) {
        var mh$ = wgpuQueueSubmit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQueueSubmit", queue, commandCount, commands);
            }
            mh$.invokeExact(queue, commandCount, commands);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQueueWriteBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQueueWriteBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, const void *data, size_t size)
     * }
     */
    public static FunctionDescriptor wgpuQueueWriteBuffer$descriptor() {
        return wgpuQueueWriteBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, const void *data, size_t size)
     * }
     */
    public static MethodHandle wgpuQueueWriteBuffer$handle() {
        return wgpuQueueWriteBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, const void *data, size_t size)
     * }
     */
    public static MemorySegment wgpuQueueWriteBuffer$address() {
        return wgpuQueueWriteBuffer.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, const void *data, size_t size)
     * }
     */
    public static void wgpuQueueWriteBuffer(MemorySegment queue, MemorySegment buffer, long bufferOffset,
            MemorySegment data, long size) {
        var mh$ = wgpuQueueWriteBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQueueWriteBuffer", queue, buffer, bufferOffset, data, size);
            }
            mh$.invokeExact(queue, buffer, bufferOffset, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQueueWriteTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQueueWriteTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuQueueWriteTexture(WGPUQueue queue, const WGPUTexelCopyTextureInfo *destination, const void *data, size_t dataSize, const WGPUTexelCopyBufferLayout *dataLayout, const WGPUExtent3D *writeSize)
     * }
     */
    public static FunctionDescriptor wgpuQueueWriteTexture$descriptor() {
        return wgpuQueueWriteTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuQueueWriteTexture(WGPUQueue queue, const WGPUTexelCopyTextureInfo *destination, const void *data, size_t dataSize, const WGPUTexelCopyBufferLayout *dataLayout, const WGPUExtent3D *writeSize)
     * }
     */
    public static MethodHandle wgpuQueueWriteTexture$handle() {
        return wgpuQueueWriteTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuQueueWriteTexture(WGPUQueue queue, const WGPUTexelCopyTextureInfo *destination, const void *data, size_t dataSize, const WGPUTexelCopyBufferLayout *dataLayout, const WGPUExtent3D *writeSize)
     * }
     */
    public static MemorySegment wgpuQueueWriteTexture$address() {
        return wgpuQueueWriteTexture.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuQueueWriteTexture(WGPUQueue queue, const WGPUTexelCopyTextureInfo *destination, const void *data, size_t dataSize, const WGPUTexelCopyBufferLayout *dataLayout, const WGPUExtent3D *writeSize)
     * }
     */
    public static void wgpuQueueWriteTexture(MemorySegment queue, MemorySegment destination, MemorySegment data,
            long dataSize, MemorySegment dataLayout, MemorySegment writeSize) {
        var mh$ = wgpuQueueWriteTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQueueWriteTexture", queue, destination, data, dataSize, dataLayout, writeSize);
            }
            mh$.invokeExact(queue, destination, data, dataSize, dataLayout, writeSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQueueAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQueueAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuQueueAddRef(WGPUQueue queue)
     * }
     */
    public static FunctionDescriptor wgpuQueueAddRef$descriptor() {
        return wgpuQueueAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuQueueAddRef(WGPUQueue queue)
     * }
     */
    public static MethodHandle wgpuQueueAddRef$handle() {
        return wgpuQueueAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuQueueAddRef(WGPUQueue queue)
     * }
     */
    public static MemorySegment wgpuQueueAddRef$address() {
        return wgpuQueueAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuQueueAddRef(WGPUQueue queue)
     * }
     */
    public static void wgpuQueueAddRef(MemorySegment queue) {
        var mh$ = wgpuQueueAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQueueAddRef", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuQueueRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuQueueRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuQueueRelease(WGPUQueue queue)
     * }
     */
    public static FunctionDescriptor wgpuQueueRelease$descriptor() {
        return wgpuQueueRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuQueueRelease(WGPUQueue queue)
     * }
     */
    public static MethodHandle wgpuQueueRelease$handle() {
        return wgpuQueueRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuQueueRelease(WGPUQueue queue)
     * }
     */
    public static MemorySegment wgpuQueueRelease$address() {
        return wgpuQueueRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuQueueRelease(WGPUQueue queue)
     * }
     */
    public static void wgpuQueueRelease(MemorySegment queue) {
        var mh$ = wgpuQueueRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuQueueRelease", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleSetLabel$descriptor() {
        return wgpuRenderBundleSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuRenderBundleSetLabel$handle() {
        return wgpuRenderBundleSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuRenderBundleSetLabel$address() {
        return wgpuRenderBundleSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, WGPUStringView label)
     * }
     */
    public static void wgpuRenderBundleSetLabel(MemorySegment renderBundle, MemorySegment label) {
        var mh$ = wgpuRenderBundleSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleSetLabel", renderBundle, label);
            }
            mh$.invokeExact(renderBundle, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleAddRef(WGPURenderBundle renderBundle)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleAddRef$descriptor() {
        return wgpuRenderBundleAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleAddRef(WGPURenderBundle renderBundle)
     * }
     */
    public static MethodHandle wgpuRenderBundleAddRef$handle() {
        return wgpuRenderBundleAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleAddRef(WGPURenderBundle renderBundle)
     * }
     */
    public static MemorySegment wgpuRenderBundleAddRef$address() {
        return wgpuRenderBundleAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleAddRef(WGPURenderBundle renderBundle)
     * }
     */
    public static void wgpuRenderBundleAddRef(MemorySegment renderBundle) {
        var mh$ = wgpuRenderBundleAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleAddRef", renderBundle);
            }
            mh$.invokeExact(renderBundle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleRelease(WGPURenderBundle renderBundle)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleRelease$descriptor() {
        return wgpuRenderBundleRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleRelease(WGPURenderBundle renderBundle)
     * }
     */
    public static MethodHandle wgpuRenderBundleRelease$handle() {
        return wgpuRenderBundleRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleRelease(WGPURenderBundle renderBundle)
     * }
     */
    public static MemorySegment wgpuRenderBundleRelease$address() {
        return wgpuRenderBundleRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleRelease(WGPURenderBundle renderBundle)
     * }
     */
    public static void wgpuRenderBundleRelease(MemorySegment renderBundle) {
        var mh$ = wgpuRenderBundleRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleRelease", renderBundle);
            }
            mh$.invokeExact(renderBundle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderDraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderDraw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderDraw$descriptor() {
        return wgpuRenderBundleEncoderDraw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderDraw$handle() {
        return wgpuRenderBundleEncoderDraw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderDraw$address() {
        return wgpuRenderBundleEncoderDraw.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static void wgpuRenderBundleEncoderDraw(MemorySegment renderBundleEncoder, int vertexCount,
            int instanceCount, int firstVertex, int firstInstance) {
        var mh$ = wgpuRenderBundleEncoderDraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderDraw", renderBundleEncoder, vertexCount, instanceCount,
                        firstVertex, firstInstance);
            }
            mh$.invokeExact(renderBundleEncoder, vertexCount, instanceCount, firstVertex, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderDrawIndexed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderDrawIndexed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderDrawIndexed$descriptor() {
        return wgpuRenderBundleEncoderDrawIndexed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderDrawIndexed$handle() {
        return wgpuRenderBundleEncoderDrawIndexed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderDrawIndexed$address() {
        return wgpuRenderBundleEncoderDrawIndexed.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance)
     * }
     */
    public static void wgpuRenderBundleEncoderDrawIndexed(MemorySegment renderBundleEncoder, int indexCount,
            int instanceCount, int firstIndex, int baseVertex, int firstInstance) {
        var mh$ = wgpuRenderBundleEncoderDrawIndexed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderDrawIndexed", renderBundleEncoder, indexCount, instanceCount,
                        firstIndex, baseVertex, firstInstance);
            }
            mh$.invokeExact(renderBundleEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderDrawIndexedIndirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderDrawIndexedIndirect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderDrawIndexedIndirect$descriptor() {
        return wgpuRenderBundleEncoderDrawIndexedIndirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderDrawIndexedIndirect$handle() {
        return wgpuRenderBundleEncoderDrawIndexedIndirect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderDrawIndexedIndirect$address() {
        return wgpuRenderBundleEncoderDrawIndexedIndirect.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static void wgpuRenderBundleEncoderDrawIndexedIndirect(MemorySegment renderBundleEncoder,
            MemorySegment indirectBuffer, long indirectOffset) {
        var mh$ = wgpuRenderBundleEncoderDrawIndexedIndirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderDrawIndexedIndirect", renderBundleEncoder, indirectBuffer,
                        indirectOffset);
            }
            mh$.invokeExact(renderBundleEncoder, indirectBuffer, indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderDrawIndirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderDrawIndirect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderDrawIndirect$descriptor() {
        return wgpuRenderBundleEncoderDrawIndirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderDrawIndirect$handle() {
        return wgpuRenderBundleEncoderDrawIndirect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderDrawIndirect$address() {
        return wgpuRenderBundleEncoderDrawIndirect.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static void wgpuRenderBundleEncoderDrawIndirect(MemorySegment renderBundleEncoder,
            MemorySegment indirectBuffer, long indirectOffset) {
        var mh$ = wgpuRenderBundleEncoderDrawIndirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderDrawIndirect", renderBundleEncoder, indirectBuffer,
                        indirectOffset);
            }
            mh$.invokeExact(renderBundleEncoder, indirectBuffer, indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, const WGPURenderBundleDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderFinish$descriptor() {
        return wgpuRenderBundleEncoderFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, const WGPURenderBundleDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderFinish$handle() {
        return wgpuRenderBundleEncoderFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, const WGPURenderBundleDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderFinish$address() {
        return wgpuRenderBundleEncoderFinish.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, const WGPURenderBundleDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderFinish(MemorySegment renderBundleEncoder,
            MemorySegment descriptor) {
        var mh$ = wgpuRenderBundleEncoderFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderFinish", renderBundleEncoder, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(renderBundleEncoder, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderInsertDebugMarker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderInsertDebugMarker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderInsertDebugMarker$descriptor() {
        return wgpuRenderBundleEncoderInsertDebugMarker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderInsertDebugMarker$handle() {
        return wgpuRenderBundleEncoderInsertDebugMarker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderInsertDebugMarker$address() {
        return wgpuRenderBundleEncoderInsertDebugMarker.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel)
     * }
     */
    public static void wgpuRenderBundleEncoderInsertDebugMarker(MemorySegment renderBundleEncoder,
            MemorySegment markerLabel) {
        var mh$ = wgpuRenderBundleEncoderInsertDebugMarker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderInsertDebugMarker", renderBundleEncoder, markerLabel);
            }
            mh$.invokeExact(renderBundleEncoder, markerLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderPopDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderPopDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderPopDebugGroup$descriptor() {
        return wgpuRenderBundleEncoderPopDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderPopDebugGroup$handle() {
        return wgpuRenderBundleEncoderPopDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderPopDebugGroup$address() {
        return wgpuRenderBundleEncoderPopDebugGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static void wgpuRenderBundleEncoderPopDebugGroup(MemorySegment renderBundleEncoder) {
        var mh$ = wgpuRenderBundleEncoderPopDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderPopDebugGroup", renderBundleEncoder);
            }
            mh$.invokeExact(renderBundleEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderPushDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderPushDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderPushDebugGroup$descriptor() {
        return wgpuRenderBundleEncoderPushDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderPushDebugGroup$handle() {
        return wgpuRenderBundleEncoderPushDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderPushDebugGroup$address() {
        return wgpuRenderBundleEncoderPushDebugGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel)
     * }
     */
    public static void wgpuRenderBundleEncoderPushDebugGroup(MemorySegment renderBundleEncoder,
            MemorySegment groupLabel) {
        var mh$ = wgpuRenderBundleEncoderPushDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderPushDebugGroup", renderBundleEncoder, groupLabel);
            }
            mh$.invokeExact(renderBundleEncoder, groupLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderSetBindGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderSetBindGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderSetBindGroup$descriptor() {
        return wgpuRenderBundleEncoderSetBindGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderSetBindGroup$handle() {
        return wgpuRenderBundleEncoderSetBindGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderSetBindGroup$address() {
        return wgpuRenderBundleEncoderSetBindGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static void wgpuRenderBundleEncoderSetBindGroup(MemorySegment renderBundleEncoder, int groupIndex,
            MemorySegment group, long dynamicOffsetCount, MemorySegment dynamicOffsets) {
        var mh$ = wgpuRenderBundleEncoderSetBindGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderSetBindGroup", renderBundleEncoder, groupIndex, group,
                        dynamicOffsetCount, dynamicOffsets);
            }
            mh$.invokeExact(renderBundleEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderSetIndexBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderSetIndexBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderSetIndexBuffer$descriptor() {
        return wgpuRenderBundleEncoderSetIndexBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderSetIndexBuffer$handle() {
        return wgpuRenderBundleEncoderSetIndexBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderSetIndexBuffer$address() {
        return wgpuRenderBundleEncoderSetIndexBuffer.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size)
     * }
     */
    public static void wgpuRenderBundleEncoderSetIndexBuffer(MemorySegment renderBundleEncoder, MemorySegment buffer,
            int format, long offset, long size) {
        var mh$ = wgpuRenderBundleEncoderSetIndexBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderSetIndexBuffer", renderBundleEncoder, buffer, format, offset,
                        size);
            }
            mh$.invokeExact(renderBundleEncoder, buffer, format, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderSetLabel$descriptor() {
        return wgpuRenderBundleEncoderSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderSetLabel$handle() {
        return wgpuRenderBundleEncoderSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderSetLabel$address() {
        return wgpuRenderBundleEncoderSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label)
     * }
     */
    public static void wgpuRenderBundleEncoderSetLabel(MemorySegment renderBundleEncoder, MemorySegment label) {
        var mh$ = wgpuRenderBundleEncoderSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderSetLabel", renderBundleEncoder, label);
            }
            mh$.invokeExact(renderBundleEncoder, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderSetPipeline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderSetPipeline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderSetPipeline$descriptor() {
        return wgpuRenderBundleEncoderSetPipeline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderSetPipeline$handle() {
        return wgpuRenderBundleEncoderSetPipeline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderSetPipeline$address() {
        return wgpuRenderBundleEncoderSetPipeline.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline)
     * }
     */
    public static void wgpuRenderBundleEncoderSetPipeline(MemorySegment renderBundleEncoder, MemorySegment pipeline) {
        var mh$ = wgpuRenderBundleEncoderSetPipeline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderSetPipeline", renderBundleEncoder, pipeline);
            }
            mh$.invokeExact(renderBundleEncoder, pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderSetVertexBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderSetVertexBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderSetVertexBuffer$descriptor() {
        return wgpuRenderBundleEncoderSetVertexBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderSetVertexBuffer$handle() {
        return wgpuRenderBundleEncoderSetVertexBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderSetVertexBuffer$address() {
        return wgpuRenderBundleEncoderSetVertexBuffer.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static void wgpuRenderBundleEncoderSetVertexBuffer(MemorySegment renderBundleEncoder, int slot,
            MemorySegment buffer, long offset, long size) {
        var mh$ = wgpuRenderBundleEncoderSetVertexBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderSetVertexBuffer", renderBundleEncoder, slot, buffer, offset,
                        size);
            }
            mh$.invokeExact(renderBundleEncoder, slot, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderAddRef(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderAddRef$descriptor() {
        return wgpuRenderBundleEncoderAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderAddRef(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderAddRef$handle() {
        return wgpuRenderBundleEncoderAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderAddRef(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderAddRef$address() {
        return wgpuRenderBundleEncoderAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderAddRef(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static void wgpuRenderBundleEncoderAddRef(MemorySegment renderBundleEncoder) {
        var mh$ = wgpuRenderBundleEncoderAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderAddRef", renderBundleEncoder);
            }
            mh$.invokeExact(renderBundleEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderBundleEncoderRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderBundleEncoderRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static FunctionDescriptor wgpuRenderBundleEncoderRelease$descriptor() {
        return wgpuRenderBundleEncoderRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static MethodHandle wgpuRenderBundleEncoderRelease$handle() {
        return wgpuRenderBundleEncoderRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static MemorySegment wgpuRenderBundleEncoderRelease$address() {
        return wgpuRenderBundleEncoderRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder)
     * }
     */
    public static void wgpuRenderBundleEncoderRelease(MemorySegment renderBundleEncoder) {
        var mh$ = wgpuRenderBundleEncoderRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderBundleEncoderRelease", renderBundleEncoder);
            }
            mh$.invokeExact(renderBundleEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderBeginOcclusionQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderBeginOcclusionQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderBeginOcclusionQuery$descriptor() {
        return wgpuRenderPassEncoderBeginOcclusionQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderBeginOcclusionQuery$handle() {
        return wgpuRenderPassEncoderBeginOcclusionQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderBeginOcclusionQuery$address() {
        return wgpuRenderPassEncoderBeginOcclusionQuery.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex)
     * }
     */
    public static void wgpuRenderPassEncoderBeginOcclusionQuery(MemorySegment renderPassEncoder, int queryIndex) {
        var mh$ = wgpuRenderPassEncoderBeginOcclusionQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderBeginOcclusionQuery", renderPassEncoder, queryIndex);
            }
            mh$.invokeExact(renderPassEncoder, queryIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderDraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderDraw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderDraw$descriptor() {
        return wgpuRenderPassEncoderDraw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderDraw$handle() {
        return wgpuRenderPassEncoderDraw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderDraw$address() {
        return wgpuRenderPassEncoderDraw.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static void wgpuRenderPassEncoderDraw(MemorySegment renderPassEncoder, int vertexCount, int instanceCount,
            int firstVertex, int firstInstance) {
        var mh$ = wgpuRenderPassEncoderDraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderDraw", renderPassEncoder, vertexCount, instanceCount, firstVertex,
                        firstInstance);
            }
            mh$.invokeExact(renderPassEncoder, vertexCount, instanceCount, firstVertex, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderDrawIndexed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderDrawIndexed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderDrawIndexed$descriptor() {
        return wgpuRenderPassEncoderDrawIndexed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderDrawIndexed$handle() {
        return wgpuRenderPassEncoderDrawIndexed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderDrawIndexed$address() {
        return wgpuRenderPassEncoderDrawIndexed.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance)
     * }
     */
    public static void wgpuRenderPassEncoderDrawIndexed(MemorySegment renderPassEncoder, int indexCount,
            int instanceCount, int firstIndex, int baseVertex, int firstInstance) {
        var mh$ = wgpuRenderPassEncoderDrawIndexed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderDrawIndexed", renderPassEncoder, indexCount, instanceCount,
                        firstIndex, baseVertex, firstInstance);
            }
            mh$.invokeExact(renderPassEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderDrawIndexedIndirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderDrawIndexedIndirect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderDrawIndexedIndirect$descriptor() {
        return wgpuRenderPassEncoderDrawIndexedIndirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderDrawIndexedIndirect$handle() {
        return wgpuRenderPassEncoderDrawIndexedIndirect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderDrawIndexedIndirect$address() {
        return wgpuRenderPassEncoderDrawIndexedIndirect.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static void wgpuRenderPassEncoderDrawIndexedIndirect(MemorySegment renderPassEncoder,
            MemorySegment indirectBuffer, long indirectOffset) {
        var mh$ = wgpuRenderPassEncoderDrawIndexedIndirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderDrawIndexedIndirect", renderPassEncoder, indirectBuffer,
                        indirectOffset);
            }
            mh$.invokeExact(renderPassEncoder, indirectBuffer, indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderDrawIndirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderDrawIndirect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderDrawIndirect$descriptor() {
        return wgpuRenderPassEncoderDrawIndirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderDrawIndirect$handle() {
        return wgpuRenderPassEncoderDrawIndirect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderDrawIndirect$address() {
        return wgpuRenderPassEncoderDrawIndirect.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset)
     * }
     */
    public static void wgpuRenderPassEncoderDrawIndirect(MemorySegment renderPassEncoder, MemorySegment indirectBuffer,
            long indirectOffset) {
        var mh$ = wgpuRenderPassEncoderDrawIndirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderDrawIndirect", renderPassEncoder, indirectBuffer, indirectOffset);
            }
            mh$.invokeExact(renderPassEncoder, indirectBuffer, indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderEnd$descriptor() {
        return wgpuRenderPassEncoderEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderEnd$handle() {
        return wgpuRenderPassEncoderEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderEnd$address() {
        return wgpuRenderPassEncoderEnd.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static void wgpuRenderPassEncoderEnd(MemorySegment renderPassEncoder) {
        var mh$ = wgpuRenderPassEncoderEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderEnd", renderPassEncoder);
            }
            mh$.invokeExact(renderPassEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderEndOcclusionQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderEndOcclusionQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderEndOcclusionQuery$descriptor() {
        return wgpuRenderPassEncoderEndOcclusionQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderEndOcclusionQuery$handle() {
        return wgpuRenderPassEncoderEndOcclusionQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderEndOcclusionQuery$address() {
        return wgpuRenderPassEncoderEndOcclusionQuery.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static void wgpuRenderPassEncoderEndOcclusionQuery(MemorySegment renderPassEncoder) {
        var mh$ = wgpuRenderPassEncoderEndOcclusionQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderEndOcclusionQuery", renderPassEncoder);
            }
            mh$.invokeExact(renderPassEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderExecuteBundles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderExecuteBundles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, const WGPURenderBundle *bundles)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderExecuteBundles$descriptor() {
        return wgpuRenderPassEncoderExecuteBundles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, const WGPURenderBundle *bundles)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderExecuteBundles$handle() {
        return wgpuRenderPassEncoderExecuteBundles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, const WGPURenderBundle *bundles)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderExecuteBundles$address() {
        return wgpuRenderPassEncoderExecuteBundles.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, const WGPURenderBundle *bundles)
     * }
     */
    public static void wgpuRenderPassEncoderExecuteBundles(MemorySegment renderPassEncoder, long bundleCount,
            MemorySegment bundles) {
        var mh$ = wgpuRenderPassEncoderExecuteBundles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderExecuteBundles", renderPassEncoder, bundleCount, bundles);
            }
            mh$.invokeExact(renderPassEncoder, bundleCount, bundles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderInsertDebugMarker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderInsertDebugMarker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderInsertDebugMarker$descriptor() {
        return wgpuRenderPassEncoderInsertDebugMarker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderInsertDebugMarker$handle() {
        return wgpuRenderPassEncoderInsertDebugMarker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderInsertDebugMarker$address() {
        return wgpuRenderPassEncoderInsertDebugMarker.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel)
     * }
     */
    public static void wgpuRenderPassEncoderInsertDebugMarker(MemorySegment renderPassEncoder,
            MemorySegment markerLabel) {
        var mh$ = wgpuRenderPassEncoderInsertDebugMarker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderInsertDebugMarker", renderPassEncoder, markerLabel);
            }
            mh$.invokeExact(renderPassEncoder, markerLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderPopDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderPopDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderPopDebugGroup$descriptor() {
        return wgpuRenderPassEncoderPopDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderPopDebugGroup$handle() {
        return wgpuRenderPassEncoderPopDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderPopDebugGroup$address() {
        return wgpuRenderPassEncoderPopDebugGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static void wgpuRenderPassEncoderPopDebugGroup(MemorySegment renderPassEncoder) {
        var mh$ = wgpuRenderPassEncoderPopDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderPopDebugGroup", renderPassEncoder);
            }
            mh$.invokeExact(renderPassEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderPushDebugGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderPushDebugGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderPushDebugGroup$descriptor() {
        return wgpuRenderPassEncoderPushDebugGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderPushDebugGroup$handle() {
        return wgpuRenderPassEncoderPushDebugGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderPushDebugGroup$address() {
        return wgpuRenderPassEncoderPushDebugGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel)
     * }
     */
    public static void wgpuRenderPassEncoderPushDebugGroup(MemorySegment renderPassEncoder, MemorySegment groupLabel) {
        var mh$ = wgpuRenderPassEncoderPushDebugGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderPushDebugGroup", renderPassEncoder, groupLabel);
            }
            mh$.invokeExact(renderPassEncoder, groupLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderSetBindGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderSetBindGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderSetBindGroup$descriptor() {
        return wgpuRenderPassEncoderSetBindGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderSetBindGroup$handle() {
        return wgpuRenderPassEncoderSetBindGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderSetBindGroup$address() {
        return wgpuRenderPassEncoderSetBindGroup.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const uint32_t *dynamicOffsets)
     * }
     */
    public static void wgpuRenderPassEncoderSetBindGroup(MemorySegment renderPassEncoder, int groupIndex,
            MemorySegment group, long dynamicOffsetCount, MemorySegment dynamicOffsets) {
        var mh$ = wgpuRenderPassEncoderSetBindGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderSetBindGroup", renderPassEncoder, groupIndex, group,
                        dynamicOffsetCount, dynamicOffsets);
            }
            mh$.invokeExact(renderPassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderSetBlendConstant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderSetBlendConstant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, const WGPUColor *color)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderSetBlendConstant$descriptor() {
        return wgpuRenderPassEncoderSetBlendConstant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, const WGPUColor *color)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderSetBlendConstant$handle() {
        return wgpuRenderPassEncoderSetBlendConstant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, const WGPUColor *color)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderSetBlendConstant$address() {
        return wgpuRenderPassEncoderSetBlendConstant.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, const WGPUColor *color)
     * }
     */
    public static void wgpuRenderPassEncoderSetBlendConstant(MemorySegment renderPassEncoder, MemorySegment color) {
        var mh$ = wgpuRenderPassEncoderSetBlendConstant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderSetBlendConstant", renderPassEncoder, color);
            }
            mh$.invokeExact(renderPassEncoder, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderSetIndexBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderSetIndexBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderSetIndexBuffer$descriptor() {
        return wgpuRenderPassEncoderSetIndexBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderSetIndexBuffer$handle() {
        return wgpuRenderPassEncoderSetIndexBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderSetIndexBuffer$address() {
        return wgpuRenderPassEncoderSetIndexBuffer.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size)
     * }
     */
    public static void wgpuRenderPassEncoderSetIndexBuffer(MemorySegment renderPassEncoder, MemorySegment buffer,
            int format, long offset, long size) {
        var mh$ = wgpuRenderPassEncoderSetIndexBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderSetIndexBuffer", renderPassEncoder, buffer, format, offset, size);
            }
            mh$.invokeExact(renderPassEncoder, buffer, format, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderSetLabel$descriptor() {
        return wgpuRenderPassEncoderSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderSetLabel$handle() {
        return wgpuRenderPassEncoderSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderSetLabel$address() {
        return wgpuRenderPassEncoderSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label)
     * }
     */
    public static void wgpuRenderPassEncoderSetLabel(MemorySegment renderPassEncoder, MemorySegment label) {
        var mh$ = wgpuRenderPassEncoderSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderSetLabel", renderPassEncoder, label);
            }
            mh$.invokeExact(renderPassEncoder, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderSetPipeline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderSetPipeline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderSetPipeline$descriptor() {
        return wgpuRenderPassEncoderSetPipeline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderSetPipeline$handle() {
        return wgpuRenderPassEncoderSetPipeline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderSetPipeline$address() {
        return wgpuRenderPassEncoderSetPipeline.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline)
     * }
     */
    public static void wgpuRenderPassEncoderSetPipeline(MemorySegment renderPassEncoder, MemorySegment pipeline) {
        var mh$ = wgpuRenderPassEncoderSetPipeline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderSetPipeline", renderPassEncoder, pipeline);
            }
            mh$.invokeExact(renderPassEncoder, pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderSetScissorRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderSetScissorRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderSetScissorRect$descriptor() {
        return wgpuRenderPassEncoderSetScissorRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderSetScissorRect$handle() {
        return wgpuRenderPassEncoderSetScissorRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderSetScissorRect$address() {
        return wgpuRenderPassEncoderSetScissorRect.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height)
     * }
     */
    public static void wgpuRenderPassEncoderSetScissorRect(MemorySegment renderPassEncoder, int x, int y, int width,
            int height) {
        var mh$ = wgpuRenderPassEncoderSetScissorRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderSetScissorRect", renderPassEncoder, x, y, width, height);
            }
            mh$.invokeExact(renderPassEncoder, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderSetStencilReference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderSetStencilReference");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderSetStencilReference$descriptor() {
        return wgpuRenderPassEncoderSetStencilReference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderSetStencilReference$handle() {
        return wgpuRenderPassEncoderSetStencilReference.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderSetStencilReference$address() {
        return wgpuRenderPassEncoderSetStencilReference.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference)
     * }
     */
    public static void wgpuRenderPassEncoderSetStencilReference(MemorySegment renderPassEncoder, int reference) {
        var mh$ = wgpuRenderPassEncoderSetStencilReference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderSetStencilReference", renderPassEncoder, reference);
            }
            mh$.invokeExact(renderPassEncoder, reference);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderSetVertexBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_LONG_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderSetVertexBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderSetVertexBuffer$descriptor() {
        return wgpuRenderPassEncoderSetVertexBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderSetVertexBuffer$handle() {
        return wgpuRenderPassEncoderSetVertexBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderSetVertexBuffer$address() {
        return wgpuRenderPassEncoderSetVertexBuffer.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size)
     * }
     */
    public static void wgpuRenderPassEncoderSetVertexBuffer(MemorySegment renderPassEncoder, int slot,
            MemorySegment buffer, long offset, long size) {
        var mh$ = wgpuRenderPassEncoderSetVertexBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderSetVertexBuffer", renderPassEncoder, slot, buffer, offset, size);
            }
            mh$.invokeExact(renderPassEncoder, slot, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderSetViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderSetViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderSetViewport$descriptor() {
        return wgpuRenderPassEncoderSetViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderSetViewport$handle() {
        return wgpuRenderPassEncoderSetViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderSetViewport$address() {
        return wgpuRenderPassEncoderSetViewport.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth)
     * }
     */
    public static void wgpuRenderPassEncoderSetViewport(MemorySegment renderPassEncoder, float x, float y, float width,
            float height, float minDepth, float maxDepth) {
        var mh$ = wgpuRenderPassEncoderSetViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderSetViewport", renderPassEncoder, x, y, width, height, minDepth,
                        maxDepth);
            }
            mh$.invokeExact(renderPassEncoder, x, y, width, height, minDepth, maxDepth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderAddRef(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderAddRef$descriptor() {
        return wgpuRenderPassEncoderAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderAddRef(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderAddRef$handle() {
        return wgpuRenderPassEncoderAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderAddRef(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderAddRef$address() {
        return wgpuRenderPassEncoderAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderAddRef(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static void wgpuRenderPassEncoderAddRef(MemorySegment renderPassEncoder) {
        var mh$ = wgpuRenderPassEncoderAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderAddRef", renderPassEncoder);
            }
            mh$.invokeExact(renderPassEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPassEncoderRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPassEncoderRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static FunctionDescriptor wgpuRenderPassEncoderRelease$descriptor() {
        return wgpuRenderPassEncoderRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MethodHandle wgpuRenderPassEncoderRelease$handle() {
        return wgpuRenderPassEncoderRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static MemorySegment wgpuRenderPassEncoderRelease$address() {
        return wgpuRenderPassEncoderRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder)
     * }
     */
    public static void wgpuRenderPassEncoderRelease(MemorySegment renderPassEncoder) {
        var mh$ = wgpuRenderPassEncoderRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPassEncoderRelease", renderPassEncoder);
            }
            mh$.invokeExact(renderPassEncoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPipelineGetBindGroupLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPipelineGetBindGroupLayout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex)
     * }
     */
    public static FunctionDescriptor wgpuRenderPipelineGetBindGroupLayout$descriptor() {
        return wgpuRenderPipelineGetBindGroupLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex)
     * }
     */
    public static MethodHandle wgpuRenderPipelineGetBindGroupLayout$handle() {
        return wgpuRenderPipelineGetBindGroupLayout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex)
     * }
     */
    public static MemorySegment wgpuRenderPipelineGetBindGroupLayout$address() {
        return wgpuRenderPipelineGetBindGroupLayout.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex)
     * }
     */
    public static MemorySegment wgpuRenderPipelineGetBindGroupLayout(MemorySegment renderPipeline, int groupIndex) {
        var mh$ = wgpuRenderPipelineGetBindGroupLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPipelineGetBindGroupLayout", renderPipeline, groupIndex);
            }
            return (MemorySegment) mh$.invokeExact(renderPipeline, groupIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPipelineSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPipelineSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuRenderPipelineSetLabel$descriptor() {
        return wgpuRenderPipelineSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuRenderPipelineSetLabel$handle() {
        return wgpuRenderPipelineSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuRenderPipelineSetLabel$address() {
        return wgpuRenderPipelineSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, WGPUStringView label)
     * }
     */
    public static void wgpuRenderPipelineSetLabel(MemorySegment renderPipeline, MemorySegment label) {
        var mh$ = wgpuRenderPipelineSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPipelineSetLabel", renderPipeline, label);
            }
            mh$.invokeExact(renderPipeline, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPipelineAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPipelineAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPipelineAddRef(WGPURenderPipeline renderPipeline)
     * }
     */
    public static FunctionDescriptor wgpuRenderPipelineAddRef$descriptor() {
        return wgpuRenderPipelineAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPipelineAddRef(WGPURenderPipeline renderPipeline)
     * }
     */
    public static MethodHandle wgpuRenderPipelineAddRef$handle() {
        return wgpuRenderPipelineAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPipelineAddRef(WGPURenderPipeline renderPipeline)
     * }
     */
    public static MemorySegment wgpuRenderPipelineAddRef$address() {
        return wgpuRenderPipelineAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPipelineAddRef(WGPURenderPipeline renderPipeline)
     * }
     */
    public static void wgpuRenderPipelineAddRef(MemorySegment renderPipeline) {
        var mh$ = wgpuRenderPipelineAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPipelineAddRef", renderPipeline);
            }
            mh$.invokeExact(renderPipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuRenderPipelineRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuRenderPipelineRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline)
     * }
     */
    public static FunctionDescriptor wgpuRenderPipelineRelease$descriptor() {
        return wgpuRenderPipelineRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline)
     * }
     */
    public static MethodHandle wgpuRenderPipelineRelease$handle() {
        return wgpuRenderPipelineRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline)
     * }
     */
    public static MemorySegment wgpuRenderPipelineRelease$address() {
        return wgpuRenderPipelineRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline)
     * }
     */
    public static void wgpuRenderPipelineRelease(MemorySegment renderPipeline) {
        var mh$ = wgpuRenderPipelineRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuRenderPipelineRelease", renderPipeline);
            }
            mh$.invokeExact(renderPipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSamplerSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSamplerSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuSamplerSetLabel(WGPUSampler sampler, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuSamplerSetLabel$descriptor() {
        return wgpuSamplerSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuSamplerSetLabel(WGPUSampler sampler, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuSamplerSetLabel$handle() {
        return wgpuSamplerSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuSamplerSetLabel(WGPUSampler sampler, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuSamplerSetLabel$address() {
        return wgpuSamplerSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuSamplerSetLabel(WGPUSampler sampler, WGPUStringView label)
     * }
     */
    public static void wgpuSamplerSetLabel(MemorySegment sampler, MemorySegment label) {
        var mh$ = wgpuSamplerSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSamplerSetLabel", sampler, label);
            }
            mh$.invokeExact(sampler, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSamplerAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSamplerAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuSamplerAddRef(WGPUSampler sampler)
     * }
     */
    public static FunctionDescriptor wgpuSamplerAddRef$descriptor() {
        return wgpuSamplerAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuSamplerAddRef(WGPUSampler sampler)
     * }
     */
    public static MethodHandle wgpuSamplerAddRef$handle() {
        return wgpuSamplerAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuSamplerAddRef(WGPUSampler sampler)
     * }
     */
    public static MemorySegment wgpuSamplerAddRef$address() {
        return wgpuSamplerAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuSamplerAddRef(WGPUSampler sampler)
     * }
     */
    public static void wgpuSamplerAddRef(MemorySegment sampler) {
        var mh$ = wgpuSamplerAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSamplerAddRef", sampler);
            }
            mh$.invokeExact(sampler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSamplerRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSamplerRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuSamplerRelease(WGPUSampler sampler)
     * }
     */
    public static FunctionDescriptor wgpuSamplerRelease$descriptor() {
        return wgpuSamplerRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuSamplerRelease(WGPUSampler sampler)
     * }
     */
    public static MethodHandle wgpuSamplerRelease$handle() {
        return wgpuSamplerRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuSamplerRelease(WGPUSampler sampler)
     * }
     */
    public static MemorySegment wgpuSamplerRelease$address() {
        return wgpuSamplerRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuSamplerRelease(WGPUSampler sampler)
     * }
     */
    public static void wgpuSamplerRelease(MemorySegment sampler) {
        var mh$ = wgpuSamplerRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSamplerRelease", sampler);
            }
            mh$.invokeExact(sampler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuShaderModuleGetCompilationInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                WGPUFuture.layout(),
                webgpu_h.C_POINTER,
                WGPUCompilationInfoCallbackInfo.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuShaderModuleGetCompilationInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo)
     * }
     */
    public static FunctionDescriptor wgpuShaderModuleGetCompilationInfo$descriptor() {
        return wgpuShaderModuleGetCompilationInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo)
     * }
     */
    public static MethodHandle wgpuShaderModuleGetCompilationInfo$handle() {
        return wgpuShaderModuleGetCompilationInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUFuture wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuShaderModuleGetCompilationInfo$address() {
        return wgpuShaderModuleGetCompilationInfo.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUFuture wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo)
     * }
     */
    public static MemorySegment wgpuShaderModuleGetCompilationInfo(SegmentAllocator allocator,
            MemorySegment shaderModule, MemorySegment callbackInfo) {
        var mh$ = wgpuShaderModuleGetCompilationInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuShaderModuleGetCompilationInfo", allocator, shaderModule, callbackInfo);
            }
            return (MemorySegment) mh$.invokeExact(allocator, shaderModule, callbackInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuShaderModuleSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuShaderModuleSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuShaderModuleSetLabel$descriptor() {
        return wgpuShaderModuleSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuShaderModuleSetLabel$handle() {
        return wgpuShaderModuleSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuShaderModuleSetLabel$address() {
        return wgpuShaderModuleSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, WGPUStringView label)
     * }
     */
    public static void wgpuShaderModuleSetLabel(MemorySegment shaderModule, MemorySegment label) {
        var mh$ = wgpuShaderModuleSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuShaderModuleSetLabel", shaderModule, label);
            }
            mh$.invokeExact(shaderModule, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuShaderModuleAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuShaderModuleAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuShaderModuleAddRef(WGPUShaderModule shaderModule)
     * }
     */
    public static FunctionDescriptor wgpuShaderModuleAddRef$descriptor() {
        return wgpuShaderModuleAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuShaderModuleAddRef(WGPUShaderModule shaderModule)
     * }
     */
    public static MethodHandle wgpuShaderModuleAddRef$handle() {
        return wgpuShaderModuleAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuShaderModuleAddRef(WGPUShaderModule shaderModule)
     * }
     */
    public static MemorySegment wgpuShaderModuleAddRef$address() {
        return wgpuShaderModuleAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuShaderModuleAddRef(WGPUShaderModule shaderModule)
     * }
     */
    public static void wgpuShaderModuleAddRef(MemorySegment shaderModule) {
        var mh$ = wgpuShaderModuleAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuShaderModuleAddRef", shaderModule);
            }
            mh$.invokeExact(shaderModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuShaderModuleRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuShaderModuleRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuShaderModuleRelease(WGPUShaderModule shaderModule)
     * }
     */
    public static FunctionDescriptor wgpuShaderModuleRelease$descriptor() {
        return wgpuShaderModuleRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuShaderModuleRelease(WGPUShaderModule shaderModule)
     * }
     */
    public static MethodHandle wgpuShaderModuleRelease$handle() {
        return wgpuShaderModuleRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuShaderModuleRelease(WGPUShaderModule shaderModule)
     * }
     */
    public static MemorySegment wgpuShaderModuleRelease$address() {
        return wgpuShaderModuleRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuShaderModuleRelease(WGPUShaderModule shaderModule)
     * }
     */
    public static void wgpuShaderModuleRelease(MemorySegment shaderModule) {
        var mh$ = wgpuShaderModuleRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuShaderModuleRelease", shaderModule);
            }
            mh$.invokeExact(shaderModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSupportedFeaturesFreeMembers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                WGPUSupportedFeatures.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSupportedFeaturesFreeMembers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuSupportedFeaturesFreeMembers(WGPUSupportedFeatures supportedFeatures)
     * }
     */
    public static FunctionDescriptor wgpuSupportedFeaturesFreeMembers$descriptor() {
        return wgpuSupportedFeaturesFreeMembers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuSupportedFeaturesFreeMembers(WGPUSupportedFeatures supportedFeatures)
     * }
     */
    public static MethodHandle wgpuSupportedFeaturesFreeMembers$handle() {
        return wgpuSupportedFeaturesFreeMembers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuSupportedFeaturesFreeMembers(WGPUSupportedFeatures supportedFeatures)
     * }
     */
    public static MemorySegment wgpuSupportedFeaturesFreeMembers$address() {
        return wgpuSupportedFeaturesFreeMembers.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuSupportedFeaturesFreeMembers(WGPUSupportedFeatures supportedFeatures)
     * }
     */
    public static void wgpuSupportedFeaturesFreeMembers(MemorySegment supportedFeatures) {
        var mh$ = wgpuSupportedFeaturesFreeMembers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSupportedFeaturesFreeMembers", supportedFeatures);
            }
            mh$.invokeExact(supportedFeatures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSupportedInstanceFeaturesFreeMembers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                WGPUSupportedInstanceFeatures.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSupportedInstanceFeaturesFreeMembers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuSupportedInstanceFeaturesFreeMembers(WGPUSupportedInstanceFeatures supportedInstanceFeatures)
     * }
     */
    public static FunctionDescriptor wgpuSupportedInstanceFeaturesFreeMembers$descriptor() {
        return wgpuSupportedInstanceFeaturesFreeMembers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuSupportedInstanceFeaturesFreeMembers(WGPUSupportedInstanceFeatures supportedInstanceFeatures)
     * }
     */
    public static MethodHandle wgpuSupportedInstanceFeaturesFreeMembers$handle() {
        return wgpuSupportedInstanceFeaturesFreeMembers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuSupportedInstanceFeaturesFreeMembers(WGPUSupportedInstanceFeatures supportedInstanceFeatures)
     * }
     */
    public static MemorySegment wgpuSupportedInstanceFeaturesFreeMembers$address() {
        return wgpuSupportedInstanceFeaturesFreeMembers.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuSupportedInstanceFeaturesFreeMembers(WGPUSupportedInstanceFeatures supportedInstanceFeatures)
     * }
     */
    public static void wgpuSupportedInstanceFeaturesFreeMembers(MemorySegment supportedInstanceFeatures) {
        var mh$ = wgpuSupportedInstanceFeaturesFreeMembers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSupportedInstanceFeaturesFreeMembers", supportedInstanceFeatures);
            }
            mh$.invokeExact(supportedInstanceFeatures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSupportedWGSLLanguageFeaturesFreeMembers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                WGPUSupportedWGSLLanguageFeatures.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSupportedWGSLLanguageFeaturesFreeMembers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuSupportedWGSLLanguageFeaturesFreeMembers(WGPUSupportedWGSLLanguageFeatures supportedWGSLLanguageFeatures)
     * }
     */
    public static FunctionDescriptor wgpuSupportedWGSLLanguageFeaturesFreeMembers$descriptor() {
        return wgpuSupportedWGSLLanguageFeaturesFreeMembers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuSupportedWGSLLanguageFeaturesFreeMembers(WGPUSupportedWGSLLanguageFeatures supportedWGSLLanguageFeatures)
     * }
     */
    public static MethodHandle wgpuSupportedWGSLLanguageFeaturesFreeMembers$handle() {
        return wgpuSupportedWGSLLanguageFeaturesFreeMembers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuSupportedWGSLLanguageFeaturesFreeMembers(WGPUSupportedWGSLLanguageFeatures supportedWGSLLanguageFeatures)
     * }
     */
    public static MemorySegment wgpuSupportedWGSLLanguageFeaturesFreeMembers$address() {
        return wgpuSupportedWGSLLanguageFeaturesFreeMembers.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuSupportedWGSLLanguageFeaturesFreeMembers(WGPUSupportedWGSLLanguageFeatures supportedWGSLLanguageFeatures)
     * }
     */
    public static void wgpuSupportedWGSLLanguageFeaturesFreeMembers(MemorySegment supportedWGSLLanguageFeatures) {
        var mh$ = wgpuSupportedWGSLLanguageFeaturesFreeMembers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSupportedWGSLLanguageFeaturesFreeMembers", supportedWGSLLanguageFeatures);
            }
            mh$.invokeExact(supportedWGSLLanguageFeatures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSurfaceConfigure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSurfaceConfigure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuSurfaceConfigure(WGPUSurface surface, const WGPUSurfaceConfiguration *config)
     * }
     */
    public static FunctionDescriptor wgpuSurfaceConfigure$descriptor() {
        return wgpuSurfaceConfigure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuSurfaceConfigure(WGPUSurface surface, const WGPUSurfaceConfiguration *config)
     * }
     */
    public static MethodHandle wgpuSurfaceConfigure$handle() {
        return wgpuSurfaceConfigure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuSurfaceConfigure(WGPUSurface surface, const WGPUSurfaceConfiguration *config)
     * }
     */
    public static MemorySegment wgpuSurfaceConfigure$address() {
        return wgpuSurfaceConfigure.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuSurfaceConfigure(WGPUSurface surface, const WGPUSurfaceConfiguration *config)
     * }
     */
    public static void wgpuSurfaceConfigure(MemorySegment surface, MemorySegment config) {
        var mh$ = wgpuSurfaceConfigure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSurfaceConfigure", surface, config);
            }
            mh$.invokeExact(surface, config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSurfaceGetCapabilities {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSurfaceGetCapabilities");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities *capabilities)
     * }
     */
    public static FunctionDescriptor wgpuSurfaceGetCapabilities$descriptor() {
        return wgpuSurfaceGetCapabilities.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities *capabilities)
     * }
     */
    public static MethodHandle wgpuSurfaceGetCapabilities$handle() {
        return wgpuSurfaceGetCapabilities.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUStatus wgpuSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities *capabilities)
     * }
     */
    public static MemorySegment wgpuSurfaceGetCapabilities$address() {
        return wgpuSurfaceGetCapabilities.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUStatus wgpuSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities *capabilities)
     * }
     */
    public static int wgpuSurfaceGetCapabilities(MemorySegment surface, MemorySegment adapter,
            MemorySegment capabilities) {
        var mh$ = wgpuSurfaceGetCapabilities.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSurfaceGetCapabilities", surface, adapter, capabilities);
            }
            return (int) mh$.invokeExact(surface, adapter, capabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSurfaceGetCurrentTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSurfaceGetCurrentTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuSurfaceGetCurrentTexture(WGPUSurface surface, WGPUSurfaceTexture *surfaceTexture)
     * }
     */
    public static FunctionDescriptor wgpuSurfaceGetCurrentTexture$descriptor() {
        return wgpuSurfaceGetCurrentTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuSurfaceGetCurrentTexture(WGPUSurface surface, WGPUSurfaceTexture *surfaceTexture)
     * }
     */
    public static MethodHandle wgpuSurfaceGetCurrentTexture$handle() {
        return wgpuSurfaceGetCurrentTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuSurfaceGetCurrentTexture(WGPUSurface surface, WGPUSurfaceTexture *surfaceTexture)
     * }
     */
    public static MemorySegment wgpuSurfaceGetCurrentTexture$address() {
        return wgpuSurfaceGetCurrentTexture.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuSurfaceGetCurrentTexture(WGPUSurface surface, WGPUSurfaceTexture *surfaceTexture)
     * }
     */
    public static void wgpuSurfaceGetCurrentTexture(MemorySegment surface, MemorySegment surfaceTexture) {
        var mh$ = wgpuSurfaceGetCurrentTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSurfaceGetCurrentTexture", surface, surfaceTexture);
            }
            mh$.invokeExact(surface, surfaceTexture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSurfacePresent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSurfacePresent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * WGPUStatus wgpuSurfacePresent(WGPUSurface surface)
     * }
     */
    public static FunctionDescriptor wgpuSurfacePresent$descriptor() {
        return wgpuSurfacePresent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * WGPUStatus wgpuSurfacePresent(WGPUSurface surface)
     * }
     */
    public static MethodHandle wgpuSurfacePresent$handle() {
        return wgpuSurfacePresent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * WGPUStatus wgpuSurfacePresent(WGPUSurface surface)
     * }
     */
    public static MemorySegment wgpuSurfacePresent$address() {
        return wgpuSurfacePresent.ADDR;
    }

    /**
     * {@snippet lang = c : * WGPUStatus wgpuSurfacePresent(WGPUSurface surface)
     * }
     */
    public static int wgpuSurfacePresent(MemorySegment surface) {
        var mh$ = wgpuSurfacePresent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSurfacePresent", surface);
            }
            return (int) mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSurfaceSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSurfaceSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuSurfaceSetLabel(WGPUSurface surface, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuSurfaceSetLabel$descriptor() {
        return wgpuSurfaceSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuSurfaceSetLabel(WGPUSurface surface, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuSurfaceSetLabel$handle() {
        return wgpuSurfaceSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuSurfaceSetLabel(WGPUSurface surface, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuSurfaceSetLabel$address() {
        return wgpuSurfaceSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuSurfaceSetLabel(WGPUSurface surface, WGPUStringView label)
     * }
     */
    public static void wgpuSurfaceSetLabel(MemorySegment surface, MemorySegment label) {
        var mh$ = wgpuSurfaceSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSurfaceSetLabel", surface, label);
            }
            mh$.invokeExact(surface, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSurfaceUnconfigure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSurfaceUnconfigure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuSurfaceUnconfigure(WGPUSurface surface)
     * }
     */
    public static FunctionDescriptor wgpuSurfaceUnconfigure$descriptor() {
        return wgpuSurfaceUnconfigure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuSurfaceUnconfigure(WGPUSurface surface)
     * }
     */
    public static MethodHandle wgpuSurfaceUnconfigure$handle() {
        return wgpuSurfaceUnconfigure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuSurfaceUnconfigure(WGPUSurface surface)
     * }
     */
    public static MemorySegment wgpuSurfaceUnconfigure$address() {
        return wgpuSurfaceUnconfigure.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuSurfaceUnconfigure(WGPUSurface surface)
     * }
     */
    public static void wgpuSurfaceUnconfigure(MemorySegment surface) {
        var mh$ = wgpuSurfaceUnconfigure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSurfaceUnconfigure", surface);
            }
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSurfaceAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSurfaceAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuSurfaceAddRef(WGPUSurface surface)
     * }
     */
    public static FunctionDescriptor wgpuSurfaceAddRef$descriptor() {
        return wgpuSurfaceAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuSurfaceAddRef(WGPUSurface surface)
     * }
     */
    public static MethodHandle wgpuSurfaceAddRef$handle() {
        return wgpuSurfaceAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuSurfaceAddRef(WGPUSurface surface)
     * }
     */
    public static MemorySegment wgpuSurfaceAddRef$address() {
        return wgpuSurfaceAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuSurfaceAddRef(WGPUSurface surface)
     * }
     */
    public static void wgpuSurfaceAddRef(MemorySegment surface) {
        var mh$ = wgpuSurfaceAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSurfaceAddRef", surface);
            }
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSurfaceRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSurfaceRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuSurfaceRelease(WGPUSurface surface)
     * }
     */
    public static FunctionDescriptor wgpuSurfaceRelease$descriptor() {
        return wgpuSurfaceRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuSurfaceRelease(WGPUSurface surface)
     * }
     */
    public static MethodHandle wgpuSurfaceRelease$handle() {
        return wgpuSurfaceRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuSurfaceRelease(WGPUSurface surface)
     * }
     */
    public static MemorySegment wgpuSurfaceRelease$address() {
        return wgpuSurfaceRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuSurfaceRelease(WGPUSurface surface)
     * }
     */
    public static void wgpuSurfaceRelease(MemorySegment surface) {
        var mh$ = wgpuSurfaceRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSurfaceRelease", surface);
            }
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuSurfaceCapabilitiesFreeMembers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                WGPUSurfaceCapabilities.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuSurfaceCapabilitiesFreeMembers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities surfaceCapabilities)
     * }
     */
    public static FunctionDescriptor wgpuSurfaceCapabilitiesFreeMembers$descriptor() {
        return wgpuSurfaceCapabilitiesFreeMembers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities surfaceCapabilities)
     * }
     */
    public static MethodHandle wgpuSurfaceCapabilitiesFreeMembers$handle() {
        return wgpuSurfaceCapabilitiesFreeMembers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities surfaceCapabilities)
     * }
     */
    public static MemorySegment wgpuSurfaceCapabilitiesFreeMembers$address() {
        return wgpuSurfaceCapabilitiesFreeMembers.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities surfaceCapabilities)
     * }
     */
    public static void wgpuSurfaceCapabilitiesFreeMembers(MemorySegment surfaceCapabilities) {
        var mh$ = wgpuSurfaceCapabilitiesFreeMembers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuSurfaceCapabilitiesFreeMembers", surfaceCapabilities);
            }
            mh$.invokeExact(surfaceCapabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureCreateView {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureCreateView");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, const WGPUTextureViewDescriptor *descriptor)
     * }
     */
    public static FunctionDescriptor wgpuTextureCreateView$descriptor() {
        return wgpuTextureCreateView.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, const WGPUTextureViewDescriptor *descriptor)
     * }
     */
    public static MethodHandle wgpuTextureCreateView$handle() {
        return wgpuTextureCreateView.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, const WGPUTextureViewDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuTextureCreateView$address() {
        return wgpuTextureCreateView.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, const WGPUTextureViewDescriptor *descriptor)
     * }
     */
    public static MemorySegment wgpuTextureCreateView(MemorySegment texture, MemorySegment descriptor) {
        var mh$ = wgpuTextureCreateView.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureCreateView", texture, descriptor);
            }
            return (MemorySegment) mh$.invokeExact(texture, descriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuTextureDestroy(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureDestroy$descriptor() {
        return wgpuTextureDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuTextureDestroy(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureDestroy$handle() {
        return wgpuTextureDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuTextureDestroy(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureDestroy$address() {
        return wgpuTextureDestroy.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuTextureDestroy(WGPUTexture texture)
     * }
     */
    public static void wgpuTextureDestroy(MemorySegment texture) {
        var mh$ = wgpuTextureDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureDestroy", texture);
            }
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureGetDepthOrArrayLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureGetDepthOrArrayLayers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureGetDepthOrArrayLayers$descriptor() {
        return wgpuTextureGetDepthOrArrayLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureGetDepthOrArrayLayers$handle() {
        return wgpuTextureGetDepthOrArrayLayers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureGetDepthOrArrayLayers$address() {
        return wgpuTextureGetDepthOrArrayLayers.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture)
     * }
     */
    public static int wgpuTextureGetDepthOrArrayLayers(MemorySegment texture) {
        var mh$ = wgpuTextureGetDepthOrArrayLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureGetDepthOrArrayLayers", texture);
            }
            return (int) mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureGetDimension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureGetDimension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureGetDimension$descriptor() {
        return wgpuTextureGetDimension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureGetDimension$handle() {
        return wgpuTextureGetDimension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureGetDimension$address() {
        return wgpuTextureGetDimension.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture)
     * }
     */
    public static int wgpuTextureGetDimension(MemorySegment texture) {
        var mh$ = wgpuTextureGetDimension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureGetDimension", texture);
            }
            return (int) mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureGetFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureGetFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureGetFormat$descriptor() {
        return wgpuTextureGetFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureGetFormat$handle() {
        return wgpuTextureGetFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureGetFormat$address() {
        return wgpuTextureGetFormat.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture)
     * }
     */
    public static int wgpuTextureGetFormat(MemorySegment texture) {
        var mh$ = wgpuTextureGetFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureGetFormat", texture);
            }
            return (int) mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureGetHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureGetHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * uint32_t wgpuTextureGetHeight(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureGetHeight$descriptor() {
        return wgpuTextureGetHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * uint32_t wgpuTextureGetHeight(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureGetHeight$handle() {
        return wgpuTextureGetHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * uint32_t wgpuTextureGetHeight(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureGetHeight$address() {
        return wgpuTextureGetHeight.ADDR;
    }

    /**
     * {@snippet lang = c : * uint32_t wgpuTextureGetHeight(WGPUTexture texture)
     * }
     */
    public static int wgpuTextureGetHeight(MemorySegment texture) {
        var mh$ = wgpuTextureGetHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureGetHeight", texture);
            }
            return (int) mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureGetMipLevelCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureGetMipLevelCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetMipLevelCount(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureGetMipLevelCount$descriptor() {
        return wgpuTextureGetMipLevelCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetMipLevelCount(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureGetMipLevelCount$handle() {
        return wgpuTextureGetMipLevelCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetMipLevelCount(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureGetMipLevelCount$address() {
        return wgpuTextureGetMipLevelCount.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetMipLevelCount(WGPUTexture texture)
     * }
     */
    public static int wgpuTextureGetMipLevelCount(MemorySegment texture) {
        var mh$ = wgpuTextureGetMipLevelCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureGetMipLevelCount", texture);
            }
            return (int) mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureGetSampleCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureGetSampleCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetSampleCount(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureGetSampleCount$descriptor() {
        return wgpuTextureGetSampleCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetSampleCount(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureGetSampleCount$handle() {
        return wgpuTextureGetSampleCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetSampleCount(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureGetSampleCount$address() {
        return wgpuTextureGetSampleCount.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * uint32_t wgpuTextureGetSampleCount(WGPUTexture texture)
     * }
     */
    public static int wgpuTextureGetSampleCount(MemorySegment texture) {
        var mh$ = wgpuTextureGetSampleCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureGetSampleCount", texture);
            }
            return (int) mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureGetUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureGetUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * WGPUTextureUsage wgpuTextureGetUsage(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureGetUsage$descriptor() {
        return wgpuTextureGetUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * WGPUTextureUsage wgpuTextureGetUsage(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureGetUsage$handle() {
        return wgpuTextureGetUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * WGPUTextureUsage wgpuTextureGetUsage(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureGetUsage$address() {
        return wgpuTextureGetUsage.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * WGPUTextureUsage wgpuTextureGetUsage(WGPUTexture texture)
     * }
     */
    public static long wgpuTextureGetUsage(MemorySegment texture) {
        var mh$ = wgpuTextureGetUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureGetUsage", texture);
            }
            return (long) mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureGetWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureGetWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * uint32_t wgpuTextureGetWidth(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureGetWidth$descriptor() {
        return wgpuTextureGetWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * uint32_t wgpuTextureGetWidth(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureGetWidth$handle() {
        return wgpuTextureGetWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * uint32_t wgpuTextureGetWidth(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureGetWidth$address() {
        return wgpuTextureGetWidth.ADDR;
    }

    /**
     * {@snippet lang = c : * uint32_t wgpuTextureGetWidth(WGPUTexture texture)
     * }
     */
    public static int wgpuTextureGetWidth(MemorySegment texture) {
        var mh$ = wgpuTextureGetWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureGetWidth", texture);
            }
            return (int) mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuTextureSetLabel(WGPUTexture texture, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuTextureSetLabel$descriptor() {
        return wgpuTextureSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuTextureSetLabel(WGPUTexture texture, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuTextureSetLabel$handle() {
        return wgpuTextureSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuTextureSetLabel(WGPUTexture texture, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuTextureSetLabel$address() {
        return wgpuTextureSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuTextureSetLabel(WGPUTexture texture, WGPUStringView label)
     * }
     */
    public static void wgpuTextureSetLabel(MemorySegment texture, MemorySegment label) {
        var mh$ = wgpuTextureSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureSetLabel", texture, label);
            }
            mh$.invokeExact(texture, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuTextureAddRef(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureAddRef$descriptor() {
        return wgpuTextureAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuTextureAddRef(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureAddRef$handle() {
        return wgpuTextureAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuTextureAddRef(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureAddRef$address() {
        return wgpuTextureAddRef.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuTextureAddRef(WGPUTexture texture)
     * }
     */
    public static void wgpuTextureAddRef(MemorySegment texture) {
        var mh$ = wgpuTextureAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureAddRef", texture);
            }
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * void wgpuTextureRelease(WGPUTexture texture)
     * }
     */
    public static FunctionDescriptor wgpuTextureRelease$descriptor() {
        return wgpuTextureRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * void wgpuTextureRelease(WGPUTexture texture)
     * }
     */
    public static MethodHandle wgpuTextureRelease$handle() {
        return wgpuTextureRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * void wgpuTextureRelease(WGPUTexture texture)
     * }
     */
    public static MemorySegment wgpuTextureRelease$address() {
        return wgpuTextureRelease.ADDR;
    }

    /**
     * {@snippet lang = c : * void wgpuTextureRelease(WGPUTexture texture)
     * }
     */
    public static void wgpuTextureRelease(MemorySegment texture) {
        var mh$ = wgpuTextureRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureRelease", texture);
            }
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureViewSetLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER,
                WGPUStringView.layout());

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureViewSetLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuTextureViewSetLabel(WGPUTextureView textureView, WGPUStringView label)
     * }
     */
    public static FunctionDescriptor wgpuTextureViewSetLabel$descriptor() {
        return wgpuTextureViewSetLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuTextureViewSetLabel(WGPUTextureView textureView, WGPUStringView label)
     * }
     */
    public static MethodHandle wgpuTextureViewSetLabel$handle() {
        return wgpuTextureViewSetLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuTextureViewSetLabel(WGPUTextureView textureView, WGPUStringView label)
     * }
     */
    public static MemorySegment wgpuTextureViewSetLabel$address() {
        return wgpuTextureViewSetLabel.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuTextureViewSetLabel(WGPUTextureView textureView, WGPUStringView label)
     * }
     */
    public static void wgpuTextureViewSetLabel(MemorySegment textureView, MemorySegment label) {
        var mh$ = wgpuTextureViewSetLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureViewSetLabel", textureView, label);
            }
            mh$.invokeExact(textureView, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureViewAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureViewAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuTextureViewAddRef(WGPUTextureView textureView)
     * }
     */
    public static FunctionDescriptor wgpuTextureViewAddRef$descriptor() {
        return wgpuTextureViewAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuTextureViewAddRef(WGPUTextureView textureView)
     * }
     */
    public static MethodHandle wgpuTextureViewAddRef$handle() {
        return wgpuTextureViewAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuTextureViewAddRef(WGPUTextureView textureView)
     * }
     */
    public static MemorySegment wgpuTextureViewAddRef$address() {
        return wgpuTextureViewAddRef.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuTextureViewAddRef(WGPUTextureView textureView)
     * }
     */
    public static void wgpuTextureViewAddRef(MemorySegment textureView) {
        var mh$ = wgpuTextureViewAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureViewAddRef", textureView);
            }
            mh$.invokeExact(textureView);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wgpuTextureViewRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("wgpuTextureViewRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c
     * : * void wgpuTextureViewRelease(WGPUTextureView textureView)
     * }
     */
    public static FunctionDescriptor wgpuTextureViewRelease$descriptor() {
        return wgpuTextureViewRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c
     * : * void wgpuTextureViewRelease(WGPUTextureView textureView)
     * }
     */
    public static MethodHandle wgpuTextureViewRelease$handle() {
        return wgpuTextureViewRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c
     * : * void wgpuTextureViewRelease(WGPUTextureView textureView)
     * }
     */
    public static MemorySegment wgpuTextureViewRelease$address() {
        return wgpuTextureViewRelease.ADDR;
    }

    /**
     * {@snippet lang = c
     * : * void wgpuTextureViewRelease(WGPUTextureView textureView)
     * }
     */
    public static void wgpuTextureViewRelease(MemorySegment textureView) {
        var mh$ = wgpuTextureViewRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wgpuTextureViewRelease", textureView);
            }
            mh$.invokeExact(textureView);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet lang = c : * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN = webgpu_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }

    private static final long __DARWIN_C_ANSI = 4096L;

    /**
     * {@snippet lang = c : * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }

    private static final long __DARWIN_C_FULL = 900000L;

    /**
     * {@snippet lang = c : * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }

    private static final long __DARWIN_C_LEVEL = 900000L;

    /**
     * {@snippet lang = c : * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }

    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);

    /**
     * {@snippet lang = c : * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }

    private static final long INT64_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c : * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }

    private static final int INT8_MIN = (int) -128L;

    /**
     * {@snippet lang = c : * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }

    private static final int INT16_MIN = (int) -32768L;

    /**
     * {@snippet lang = c : * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }

    private static final int INT32_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c : * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }

    private static final long INT64_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c : * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }

    private static final int UINT32_MAX = (int) 4294967295L;

    /**
     * {@snippet lang = c : * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }

    private static final long UINT64_MAX = -1L;

    /**
     * {@snippet lang = c : * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }

    private static final int INT_LEAST8_MIN = (int) -128L;

    /**
     * {@snippet lang = c : * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }

    private static final int INT_LEAST16_MIN = (int) -32768L;

    /**
     * {@snippet lang = c : * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }

    private static final int INT_LEAST32_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c : * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }

    private static final long INT_LEAST64_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c : * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }

    private static final int INT_LEAST8_MAX = (int) 127L;

    /**
     * {@snippet lang = c : * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }

    private static final int INT_LEAST16_MAX = (int) 32767L;

    /**
     * {@snippet lang = c : * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }

    private static final int INT_LEAST32_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c : * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }

    private static final long INT_LEAST64_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c : * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }

    private static final int UINT_LEAST8_MAX = (int) 255L;

    /**
     * {@snippet lang = c : * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }

    private static final int UINT_LEAST16_MAX = (int) 65535L;

    /**
     * {@snippet lang = c : * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }

    private static final int UINT_LEAST32_MAX = (int) 4294967295L;

    /**
     * {@snippet lang = c : * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }

    private static final long UINT_LEAST64_MAX = -1L;

    /**
     * {@snippet lang = c : * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }

    private static final int INT_FAST8_MIN = (int) -128L;

    /**
     * {@snippet lang = c : * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }

    private static final int INT_FAST16_MIN = (int) -32768L;

    /**
     * {@snippet lang = c : * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }

    private static final int INT_FAST32_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c : * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }

    private static final long INT_FAST64_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c : * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }

    private static final int INT_FAST8_MAX = (int) 127L;

    /**
     * {@snippet lang = c : * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }

    private static final int INT_FAST16_MAX = (int) 32767L;

    /**
     * {@snippet lang = c : * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }

    private static final int INT_FAST32_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c : * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }

    private static final long INT_FAST64_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c : * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }

    private static final int UINT_FAST8_MAX = (int) 255L;

    /**
     * {@snippet lang = c : * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }

    private static final int UINT_FAST16_MAX = (int) 65535L;

    /**
     * {@snippet lang = c : * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }

    private static final int UINT_FAST32_MAX = (int) 4294967295L;

    /**
     * {@snippet lang = c : * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }

    private static final long UINT_FAST64_MAX = -1L;

    /**
     * {@snippet lang = c : * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }

    private static final long INTPTR_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c : * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }

    private static final long INTPTR_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c : * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }

    private static final long UINTPTR_MAX = -1L;

    /**
     * {@snippet lang = c : * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }

    private static final long INTMAX_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c : * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }

    private static final long UINTMAX_MAX = -1L;

    /**
     * {@snippet lang = c : * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }

    private static final long INTMAX_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c : * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }

    private static final long PTRDIFF_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c : * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }

    private static final long PTRDIFF_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c : * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }

    private static final long SIZE_MAX = -1L;

    /**
     * {@snippet lang = c : * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }

    private static final long RSIZE_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c : * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }

    private static final int WCHAR_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c : * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }

    private static final int WCHAR_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c : * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }

    private static final int WINT_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c : * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }

    private static final int WINT_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c : * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }

    private static final int SIG_ATOMIC_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c : * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }

    private static final int SIG_ATOMIC_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c : * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }

    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);

    /**
     * {@snippet lang = c : * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }

    private static final int MAC_OS_X_VERSION_10_0 = (int) 1000L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_0 1000
     * }
     */
    public static int MAC_OS_X_VERSION_10_0() {
        return MAC_OS_X_VERSION_10_0;
    }

    private static final int MAC_OS_X_VERSION_10_1 = (int) 1010L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_1 1010
     * }
     */
    public static int MAC_OS_X_VERSION_10_1() {
        return MAC_OS_X_VERSION_10_1;
    }

    private static final int MAC_OS_X_VERSION_10_2 = (int) 1020L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_2 1020
     * }
     */
    public static int MAC_OS_X_VERSION_10_2() {
        return MAC_OS_X_VERSION_10_2;
    }

    private static final int MAC_OS_X_VERSION_10_3 = (int) 1030L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_3 1030
     * }
     */
    public static int MAC_OS_X_VERSION_10_3() {
        return MAC_OS_X_VERSION_10_3;
    }

    private static final int MAC_OS_X_VERSION_10_4 = (int) 1040L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_4 1040
     * }
     */
    public static int MAC_OS_X_VERSION_10_4() {
        return MAC_OS_X_VERSION_10_4;
    }

    private static final int MAC_OS_X_VERSION_10_5 = (int) 1050L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_5 1050
     * }
     */
    public static int MAC_OS_X_VERSION_10_5() {
        return MAC_OS_X_VERSION_10_5;
    }

    private static final int MAC_OS_X_VERSION_10_6 = (int) 1060L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_6 1060
     * }
     */
    public static int MAC_OS_X_VERSION_10_6() {
        return MAC_OS_X_VERSION_10_6;
    }

    private static final int MAC_OS_X_VERSION_10_7 = (int) 1070L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_7 1070
     * }
     */
    public static int MAC_OS_X_VERSION_10_7() {
        return MAC_OS_X_VERSION_10_7;
    }

    private static final int MAC_OS_X_VERSION_10_8 = (int) 1080L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_8 1080
     * }
     */
    public static int MAC_OS_X_VERSION_10_8() {
        return MAC_OS_X_VERSION_10_8;
    }

    private static final int MAC_OS_X_VERSION_10_9 = (int) 1090L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_9 1090
     * }
     */
    public static int MAC_OS_X_VERSION_10_9() {
        return MAC_OS_X_VERSION_10_9;
    }

    private static final int MAC_OS_X_VERSION_10_10 = (int) 101000L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_10 101000
     * }
     */
    public static int MAC_OS_X_VERSION_10_10() {
        return MAC_OS_X_VERSION_10_10;
    }

    private static final int MAC_OS_X_VERSION_10_10_2 = (int) 101002L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_10_2 101002
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_2() {
        return MAC_OS_X_VERSION_10_10_2;
    }

    private static final int MAC_OS_X_VERSION_10_10_3 = (int) 101003L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_10_3 101003
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_3() {
        return MAC_OS_X_VERSION_10_10_3;
    }

    private static final int MAC_OS_X_VERSION_10_11 = (int) 101100L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_11 101100
     * }
     */
    public static int MAC_OS_X_VERSION_10_11() {
        return MAC_OS_X_VERSION_10_11;
    }

    private static final int MAC_OS_X_VERSION_10_11_2 = (int) 101102L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_11_2 101102
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_2() {
        return MAC_OS_X_VERSION_10_11_2;
    }

    private static final int MAC_OS_X_VERSION_10_11_3 = (int) 101103L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_11_3 101103
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_3() {
        return MAC_OS_X_VERSION_10_11_3;
    }

    private static final int MAC_OS_X_VERSION_10_11_4 = (int) 101104L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_11_4 101104
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_4() {
        return MAC_OS_X_VERSION_10_11_4;
    }

    private static final int MAC_OS_X_VERSION_10_12 = (int) 101200L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_12 101200
     * }
     */
    public static int MAC_OS_X_VERSION_10_12() {
        return MAC_OS_X_VERSION_10_12;
    }

    private static final int MAC_OS_X_VERSION_10_12_1 = (int) 101201L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_12_1 101201
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_1() {
        return MAC_OS_X_VERSION_10_12_1;
    }

    private static final int MAC_OS_X_VERSION_10_12_2 = (int) 101202L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_12_2 101202
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_2() {
        return MAC_OS_X_VERSION_10_12_2;
    }

    private static final int MAC_OS_X_VERSION_10_12_4 = (int) 101204L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_12_4 101204
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_4() {
        return MAC_OS_X_VERSION_10_12_4;
    }

    private static final int MAC_OS_X_VERSION_10_13 = (int) 101300L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_13 101300
     * }
     */
    public static int MAC_OS_X_VERSION_10_13() {
        return MAC_OS_X_VERSION_10_13;
    }

    private static final int MAC_OS_X_VERSION_10_13_1 = (int) 101301L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_13_1 101301
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_1() {
        return MAC_OS_X_VERSION_10_13_1;
    }

    private static final int MAC_OS_X_VERSION_10_13_2 = (int) 101302L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_13_2 101302
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_2() {
        return MAC_OS_X_VERSION_10_13_2;
    }

    private static final int MAC_OS_X_VERSION_10_13_4 = (int) 101304L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_13_4 101304
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_4() {
        return MAC_OS_X_VERSION_10_13_4;
    }

    private static final int MAC_OS_X_VERSION_10_14 = (int) 101400L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_14 101400
     * }
     */
    public static int MAC_OS_X_VERSION_10_14() {
        return MAC_OS_X_VERSION_10_14;
    }

    private static final int MAC_OS_X_VERSION_10_14_1 = (int) 101401L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_14_1 101401
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_1() {
        return MAC_OS_X_VERSION_10_14_1;
    }

    private static final int MAC_OS_X_VERSION_10_14_4 = (int) 101404L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_14_4 101404
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_4() {
        return MAC_OS_X_VERSION_10_14_4;
    }

    private static final int MAC_OS_X_VERSION_10_14_5 = (int) 101405L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_14_5 101405
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_5() {
        return MAC_OS_X_VERSION_10_14_5;
    }

    private static final int MAC_OS_X_VERSION_10_14_6 = (int) 101406L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_14_6 101406
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_6() {
        return MAC_OS_X_VERSION_10_14_6;
    }

    private static final int MAC_OS_X_VERSION_10_15 = (int) 101500L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_15 101500
     * }
     */
    public static int MAC_OS_X_VERSION_10_15() {
        return MAC_OS_X_VERSION_10_15;
    }

    private static final int MAC_OS_X_VERSION_10_15_1 = (int) 101501L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_15_1 101501
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_1() {
        return MAC_OS_X_VERSION_10_15_1;
    }

    private static final int MAC_OS_X_VERSION_10_15_4 = (int) 101504L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_15_4 101504
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_4() {
        return MAC_OS_X_VERSION_10_15_4;
    }

    private static final int MAC_OS_X_VERSION_10_16 = (int) 101600L;

    /**
     * {@snippet lang = c : * #define MAC_OS_X_VERSION_10_16 101600
     * }
     */
    public static int MAC_OS_X_VERSION_10_16() {
        return MAC_OS_X_VERSION_10_16;
    }

    private static final int MAC_OS_VERSION_11_0 = (int) 110000L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_11_0 110000
     * }
     */
    public static int MAC_OS_VERSION_11_0() {
        return MAC_OS_VERSION_11_0;
    }

    private static final int MAC_OS_VERSION_11_1 = (int) 110100L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_11_1 110100
     * }
     */
    public static int MAC_OS_VERSION_11_1() {
        return MAC_OS_VERSION_11_1;
    }

    private static final int MAC_OS_VERSION_11_3 = (int) 110300L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_11_3 110300
     * }
     */
    public static int MAC_OS_VERSION_11_3() {
        return MAC_OS_VERSION_11_3;
    }

    private static final int MAC_OS_VERSION_11_4 = (int) 110400L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_11_4 110400
     * }
     */
    public static int MAC_OS_VERSION_11_4() {
        return MAC_OS_VERSION_11_4;
    }

    private static final int MAC_OS_VERSION_11_5 = (int) 110500L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_11_5 110500
     * }
     */
    public static int MAC_OS_VERSION_11_5() {
        return MAC_OS_VERSION_11_5;
    }

    private static final int MAC_OS_VERSION_11_6 = (int) 110600L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_11_6 110600
     * }
     */
    public static int MAC_OS_VERSION_11_6() {
        return MAC_OS_VERSION_11_6;
    }

    private static final int MAC_OS_VERSION_12_0 = (int) 120000L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_12_0 120000
     * }
     */
    public static int MAC_OS_VERSION_12_0() {
        return MAC_OS_VERSION_12_0;
    }

    private static final int MAC_OS_VERSION_12_1 = (int) 120100L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_12_1 120100
     * }
     */
    public static int MAC_OS_VERSION_12_1() {
        return MAC_OS_VERSION_12_1;
    }

    private static final int MAC_OS_VERSION_12_2 = (int) 120200L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_12_2 120200
     * }
     */
    public static int MAC_OS_VERSION_12_2() {
        return MAC_OS_VERSION_12_2;
    }

    private static final int MAC_OS_VERSION_12_3 = (int) 120300L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_12_3 120300
     * }
     */
    public static int MAC_OS_VERSION_12_3() {
        return MAC_OS_VERSION_12_3;
    }

    private static final int MAC_OS_VERSION_12_4 = (int) 120400L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_12_4 120400
     * }
     */
    public static int MAC_OS_VERSION_12_4() {
        return MAC_OS_VERSION_12_4;
    }

    private static final int MAC_OS_VERSION_12_5 = (int) 120500L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_12_5 120500
     * }
     */
    public static int MAC_OS_VERSION_12_5() {
        return MAC_OS_VERSION_12_5;
    }

    private static final int MAC_OS_VERSION_12_6 = (int) 120600L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_12_6 120600
     * }
     */
    public static int MAC_OS_VERSION_12_6() {
        return MAC_OS_VERSION_12_6;
    }

    private static final int MAC_OS_VERSION_12_7 = (int) 120700L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_12_7 120700
     * }
     */
    public static int MAC_OS_VERSION_12_7() {
        return MAC_OS_VERSION_12_7;
    }

    private static final int MAC_OS_VERSION_13_0 = (int) 130000L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_13_0 130000
     * }
     */
    public static int MAC_OS_VERSION_13_0() {
        return MAC_OS_VERSION_13_0;
    }

    private static final int MAC_OS_VERSION_13_1 = (int) 130100L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_13_1 130100
     * }
     */
    public static int MAC_OS_VERSION_13_1() {
        return MAC_OS_VERSION_13_1;
    }

    private static final int MAC_OS_VERSION_13_2 = (int) 130200L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_13_2 130200
     * }
     */
    public static int MAC_OS_VERSION_13_2() {
        return MAC_OS_VERSION_13_2;
    }

    private static final int MAC_OS_VERSION_13_3 = (int) 130300L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_13_3 130300
     * }
     */
    public static int MAC_OS_VERSION_13_3() {
        return MAC_OS_VERSION_13_3;
    }

    private static final int MAC_OS_VERSION_13_4 = (int) 130400L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_13_4 130400
     * }
     */
    public static int MAC_OS_VERSION_13_4() {
        return MAC_OS_VERSION_13_4;
    }

    private static final int MAC_OS_VERSION_13_5 = (int) 130500L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_13_5 130500
     * }
     */
    public static int MAC_OS_VERSION_13_5() {
        return MAC_OS_VERSION_13_5;
    }

    private static final int MAC_OS_VERSION_13_6 = (int) 130600L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_13_6 130600
     * }
     */
    public static int MAC_OS_VERSION_13_6() {
        return MAC_OS_VERSION_13_6;
    }

    private static final int MAC_OS_VERSION_13_7 = (int) 130700L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_13_7 130700
     * }
     */
    public static int MAC_OS_VERSION_13_7() {
        return MAC_OS_VERSION_13_7;
    }

    private static final int MAC_OS_VERSION_14_0 = (int) 140000L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_14_0 140000
     * }
     */
    public static int MAC_OS_VERSION_14_0() {
        return MAC_OS_VERSION_14_0;
    }

    private static final int MAC_OS_VERSION_14_1 = (int) 140100L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_14_1 140100
     * }
     */
    public static int MAC_OS_VERSION_14_1() {
        return MAC_OS_VERSION_14_1;
    }

    private static final int MAC_OS_VERSION_14_2 = (int) 140200L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_14_2 140200
     * }
     */
    public static int MAC_OS_VERSION_14_2() {
        return MAC_OS_VERSION_14_2;
    }

    private static final int MAC_OS_VERSION_14_3 = (int) 140300L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_14_3 140300
     * }
     */
    public static int MAC_OS_VERSION_14_3() {
        return MAC_OS_VERSION_14_3;
    }

    private static final int MAC_OS_VERSION_14_4 = (int) 140400L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_14_4 140400
     * }
     */
    public static int MAC_OS_VERSION_14_4() {
        return MAC_OS_VERSION_14_4;
    }

    private static final int MAC_OS_VERSION_14_5 = (int) 140500L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_14_5 140500
     * }
     */
    public static int MAC_OS_VERSION_14_5() {
        return MAC_OS_VERSION_14_5;
    }

    private static final int MAC_OS_VERSION_14_6 = (int) 140600L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_14_6 140600
     * }
     */
    public static int MAC_OS_VERSION_14_6() {
        return MAC_OS_VERSION_14_6;
    }

    private static final int MAC_OS_VERSION_14_7 = (int) 140700L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_14_7 140700
     * }
     */
    public static int MAC_OS_VERSION_14_7() {
        return MAC_OS_VERSION_14_7;
    }

    private static final int MAC_OS_VERSION_15_0 = (int) 150000L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_15_0 150000
     * }
     */
    public static int MAC_OS_VERSION_15_0() {
        return MAC_OS_VERSION_15_0;
    }

    private static final int MAC_OS_VERSION_15_1 = (int) 150100L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_15_1 150100
     * }
     */
    public static int MAC_OS_VERSION_15_1() {
        return MAC_OS_VERSION_15_1;
    }

    private static final int MAC_OS_VERSION_15_2 = (int) 150200L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_15_2 150200
     * }
     */
    public static int MAC_OS_VERSION_15_2() {
        return MAC_OS_VERSION_15_2;
    }

    private static final int MAC_OS_VERSION_15_3 = (int) 150300L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_15_3 150300
     * }
     */
    public static int MAC_OS_VERSION_15_3() {
        return MAC_OS_VERSION_15_3;
    }

    private static final int MAC_OS_VERSION_15_4 = (int) 150400L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_15_4 150400
     * }
     */
    public static int MAC_OS_VERSION_15_4() {
        return MAC_OS_VERSION_15_4;
    }

    private static final int MAC_OS_VERSION_15_5 = (int) 150500L;

    /**
     * {@snippet lang = c : * #define MAC_OS_VERSION_15_5 150500
     * }
     */
    public static int MAC_OS_VERSION_15_5() {
        return MAC_OS_VERSION_15_5;
    }

    private static final int __AVAILABILITY_VERSIONS_VERSION_HASH = (int) 93585900L;

    /**
     * {@snippet lang = c : * #define __AVAILABILITY_VERSIONS_VERSION_HASH 93585900
     * }
     */
    public static int __AVAILABILITY_VERSIONS_VERSION_HASH() {
        return __AVAILABILITY_VERSIONS_VERSION_HASH;
    }

    /**
     * {@snippet lang = c : * #define __AVAILABILITY_VERSIONS_VERSION_STRING "Local"
     * }
     */
    public static MemorySegment __AVAILABILITY_VERSIONS_VERSION_STRING() {
        class Holder {
            static final MemorySegment __AVAILABILITY_VERSIONS_VERSION_STRING = webgpu_h.LIBRARY_ARENA
                    .allocateFrom("Local");
        }
        return Holder.__AVAILABILITY_VERSIONS_VERSION_STRING;
    }

    /**
     * {@snippet lang = c : * #define __AVAILABILITY_FILE "AvailabilityVersions.h"
     * }
     */
    public static MemorySegment __AVAILABILITY_FILE() {
        class Holder {
            static final MemorySegment __AVAILABILITY_FILE = webgpu_h.LIBRARY_ARENA
                    .allocateFrom("AvailabilityVersions.h");
        }
        return Holder.__AVAILABILITY_FILE;
    }

    private static final int __MAC_OS_X_VERSION_MAX_ALLOWED = (int) 150500L;

    /**
     * {@snippet lang = c : * #define __MAC_OS_X_VERSION_MAX_ALLOWED 150500
     * }
     */
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return __MAC_OS_X_VERSION_MAX_ALLOWED;
    }

    private static final double HUGE_VAL = Double.valueOf("Infinity");

    /**
     * {@snippet lang = c : * #define HUGE_VAL Infinity
     * }
     */
    public static double HUGE_VAL() {
        return HUGE_VAL;
    }

    private static final float HUGE_VALF = Float.valueOf("Infinity");

    /**
     * {@snippet lang = c : * #define HUGE_VALF Infinity
     * }
     */
    public static float HUGE_VALF() {
        return HUGE_VALF;
    }

    private static final float NAN = Float.valueOf("NaN");

    /**
     * {@snippet lang = c : * #define NAN NaN
     * }
     */
    public static float NAN() {
        return NAN;
    }

    private static final float INFINITY = Float.valueOf("Infinity");

    /**
     * {@snippet lang = c : * #define INFINITY Infinity
     * }
     */
    public static float INFINITY() {
        return INFINITY;
    }

    private static final int FP_ILOGB0 = (int) -2147483648L;

    /**
     * {@snippet lang = c : * #define FP_ILOGB0 -2147483648
     * }
     */
    public static int FP_ILOGB0() {
        return FP_ILOGB0;
    }

    private static final int FP_ILOGBNAN = (int) -2147483648L;

    /**
     * {@snippet lang = c : * #define FP_ILOGBNAN -2147483648
     * }
     */
    public static int FP_ILOGBNAN() {
        return FP_ILOGBNAN;
    }

    private static final double M_E = 2.718281828459045d;

    /**
     * {@snippet lang = c : * #define M_E 2.718281828459045
     * }
     */
    public static double M_E() {
        return M_E;
    }

    private static final double M_LOG2E = 1.4426950408889634d;

    /**
     * {@snippet lang = c : * #define M_LOG2E 1.4426950408889634
     * }
     */
    public static double M_LOG2E() {
        return M_LOG2E;
    }

    private static final double M_LOG10E = 0.4342944819032518d;

    /**
     * {@snippet lang = c : * #define M_LOG10E 0.4342944819032518
     * }
     */
    public static double M_LOG10E() {
        return M_LOG10E;
    }

    private static final double M_LN2 = 0.6931471805599453d;

    /**
     * {@snippet lang = c : * #define M_LN2 0.6931471805599453
     * }
     */
    public static double M_LN2() {
        return M_LN2;
    }

    private static final double M_LN10 = 2.302585092994046d;

    /**
     * {@snippet lang = c : * #define M_LN10 2.302585092994046
     * }
     */
    public static double M_LN10() {
        return M_LN10;
    }

    private static final double M_PI = 3.141592653589793d;

    /**
     * {@snippet lang = c : * #define M_PI 3.141592653589793
     * }
     */
    public static double M_PI() {
        return M_PI;
    }

    private static final double M_PI_2 = 1.5707963267948966d;

    /**
     * {@snippet lang = c : * #define M_PI_2 1.5707963267948966
     * }
     */
    public static double M_PI_2() {
        return M_PI_2;
    }

    private static final double M_PI_4 = 0.7853981633974483d;

    /**
     * {@snippet lang = c : * #define M_PI_4 0.7853981633974483
     * }
     */
    public static double M_PI_4() {
        return M_PI_4;
    }

    private static final double M_1_PI = 0.3183098861837907d;

    /**
     * {@snippet lang = c : * #define M_1_PI 0.3183098861837907
     * }
     */
    public static double M_1_PI() {
        return M_1_PI;
    }

    private static final double M_2_PI = 0.6366197723675814d;

    /**
     * {@snippet lang = c : * #define M_2_PI 0.6366197723675814
     * }
     */
    public static double M_2_PI() {
        return M_2_PI;
    }

    private static final double M_2_SQRTPI = 1.1283791670955126d;

    /**
     * {@snippet lang = c : * #define M_2_SQRTPI 1.1283791670955126
     * }
     */
    public static double M_2_SQRTPI() {
        return M_2_SQRTPI;
    }

    private static final double M_SQRT2 = 1.4142135623730951d;

    /**
     * {@snippet lang = c : * #define M_SQRT2 1.4142135623730951
     * }
     */
    public static double M_SQRT2() {
        return M_SQRT2;
    }

    private static final double M_SQRT1_2 = 0.7071067811865476d;

    /**
     * {@snippet lang = c : * #define M_SQRT1_2 0.7071067811865476
     * }
     */
    public static double M_SQRT1_2() {
        return M_SQRT1_2;
    }

    private static final float MAXFLOAT = 3.4028234663852886E38f;

    /**
     * {@snippet lang = c : * #define MAXFLOAT 3.4028234663852886E38
     * }
     */
    public static float MAXFLOAT() {
        return MAXFLOAT;
    }

    private static final int FP_SNAN = (int) 1L;

    /**
     * {@snippet lang = c : * #define FP_SNAN 1
     * }
     */
    public static int FP_SNAN() {
        return FP_SNAN;
    }

    private static final int FP_QNAN = (int) 1L;

    /**
     * {@snippet lang = c : * #define FP_QNAN 1
     * }
     */
    public static int FP_QNAN() {
        return FP_QNAN;
    }

    private static final float HUGE = 3.4028234663852886E38f;

    /**
     * {@snippet lang = c : * #define HUGE 3.4028234663852886E38
     * }
     */
    public static float HUGE() {
        return HUGE;
    }

    private static final double X_TLOSS = 1.414847550405688E16d;

    /**
     * {@snippet lang = c : * #define X_TLOSS 1.414847550405688E16
     * }
     */
    public static double X_TLOSS() {
        return X_TLOSS;
    }

    private static final int WGPU_TRUE = (int) 1L;

    /**
     * {@snippet lang = c : * #define WGPU_TRUE 1
     * }
     */
    public static int WGPU_TRUE() {
        return WGPU_TRUE;
    }

    private static final int WGPU_FALSE = (int) 0L;

    /**
     * {@snippet lang = c : * #define WGPU_FALSE 0
     * }
     */
    public static int WGPU_FALSE() {
        return WGPU_FALSE;
    }

    private static final int WGPU_ARRAY_LAYER_COUNT_UNDEFINED = (int) 4294967295L;

    /**
     * {@snippet lang = c : * #define WGPU_ARRAY_LAYER_COUNT_UNDEFINED 4294967295
     * }
     */
    public static int WGPU_ARRAY_LAYER_COUNT_UNDEFINED() {
        return WGPU_ARRAY_LAYER_COUNT_UNDEFINED;
    }

    private static final int WGPU_COPY_STRIDE_UNDEFINED = (int) 4294967295L;

    /**
     * {@snippet lang = c : * #define WGPU_COPY_STRIDE_UNDEFINED 4294967295
     * }
     */
    public static int WGPU_COPY_STRIDE_UNDEFINED() {
        return WGPU_COPY_STRIDE_UNDEFINED;
    }

    private static final float WGPU_DEPTH_CLEAR_VALUE_UNDEFINED = Float.valueOf("NaN");

    /**
     * {@snippet lang = c : * #define WGPU_DEPTH_CLEAR_VALUE_UNDEFINED NaN
     * }
     */
    public static float WGPU_DEPTH_CLEAR_VALUE_UNDEFINED() {
        return WGPU_DEPTH_CLEAR_VALUE_UNDEFINED;
    }

    private static final int WGPU_DEPTH_SLICE_UNDEFINED = (int) 4294967295L;

    /**
     * {@snippet lang = c : * #define WGPU_DEPTH_SLICE_UNDEFINED 4294967295
     * }
     */
    public static int WGPU_DEPTH_SLICE_UNDEFINED() {
        return WGPU_DEPTH_SLICE_UNDEFINED;
    }

    private static final int WGPU_LIMIT_U32_UNDEFINED = (int) 4294967295L;

    /**
     * {@snippet lang = c : * #define WGPU_LIMIT_U32_UNDEFINED 4294967295
     * }
     */
    public static int WGPU_LIMIT_U32_UNDEFINED() {
        return WGPU_LIMIT_U32_UNDEFINED;
    }

    private static final long WGPU_LIMIT_U64_UNDEFINED = -1L;

    /**
     * {@snippet lang = c : * #define WGPU_LIMIT_U64_UNDEFINED -1
     * }
     */
    public static long WGPU_LIMIT_U64_UNDEFINED() {
        return WGPU_LIMIT_U64_UNDEFINED;
    }

    private static final int WGPU_MIP_LEVEL_COUNT_UNDEFINED = (int) 4294967295L;

    /**
     * {@snippet lang = c : * #define WGPU_MIP_LEVEL_COUNT_UNDEFINED 4294967295
     * }
     */
    public static int WGPU_MIP_LEVEL_COUNT_UNDEFINED() {
        return WGPU_MIP_LEVEL_COUNT_UNDEFINED;
    }

    private static final int WGPU_QUERY_SET_INDEX_UNDEFINED = (int) 4294967295L;

    /**
     * {@snippet lang = c : * #define WGPU_QUERY_SET_INDEX_UNDEFINED 4294967295
     * }
     */
    public static int WGPU_QUERY_SET_INDEX_UNDEFINED() {
        return WGPU_QUERY_SET_INDEX_UNDEFINED;
    }

    private static final long WGPU_STRLEN = -1L;

    /**
     * {@snippet lang = c : * #define WGPU_STRLEN -1
     * }
     */
    public static long WGPU_STRLEN() {
        return WGPU_STRLEN;
    }

    private static final long WGPU_WHOLE_MAP_SIZE = -1L;

    /**
     * {@snippet lang = c : * #define WGPU_WHOLE_MAP_SIZE -1
     * }
     */
    public static long WGPU_WHOLE_MAP_SIZE() {
        return WGPU_WHOLE_MAP_SIZE;
    }

    private static final long WGPU_WHOLE_SIZE = -1L;

    /**
     * {@snippet lang = c : * #define WGPU_WHOLE_SIZE -1
     * }
     */
    public static long WGPU_WHOLE_SIZE() {
        return WGPU_WHOLE_SIZE;
    }
}
