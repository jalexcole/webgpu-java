// Generated by jextract
package org.webgpu.extract;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class webgpu_h_1 {

    webgpu_h_1() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
        String traceArgs = Arrays.stream(args)
                .map(Object::toString)
                .collect(Collectors.joining(", "));
        System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
                .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ? MemoryLayout.structLayout(alignedMembers)
                        : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int __WORDSIZE = (int) 64L;

    /**
     * {@snippet lang = c : * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }

    private static final int __has_safe_buffers = (int) 0L;

    /**
     * {@snippet lang = c : * #define __has_safe_buffers 0
     * }
     */
    public static int __has_safe_buffers() {
        return __has_safe_buffers;
    }

    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int) 1L;

    /**
     * {@snippet lang = c : * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }

    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int) 1L;

    /**
     * {@snippet lang = c : * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }

    private static final int __DARWIN_ONLY_VERS_1050 = (int) 1L;

    /**
     * {@snippet lang = c : * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }

    private static final int __DARWIN_UNIX03 = (int) 1L;

    /**
     * {@snippet lang = c : * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }

    private static final int __DARWIN_64_BIT_INO_T = (int) 1L;

    /**
     * {@snippet lang = c : * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }

    private static final int __DARWIN_VERS_1050 = (int) 1L;

    /**
     * {@snippet lang = c : * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }

    private static final int __DARWIN_NON_CANCELABLE = (int) 0L;

    /**
     * {@snippet lang = c : * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }

    private static final int __STDC_WANT_LIB_EXT1__ = (int) 1L;

    /**
     * {@snippet lang = c : * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }

    private static final int __DARWIN_NO_LONG_LONG = (int) 0L;

    /**
     * {@snippet lang = c : * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }

    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int) 1L;

    /**
     * {@snippet lang = c : * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }

    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int) 1L;

    /**
     * {@snippet lang = c : * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }

    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int) 1L;

    /**
     * {@snippet lang = c : * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }

    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int) 1L;

    /**
     * {@snippet lang = c : * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }

    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int) 3L;

    /**
     * {@snippet lang = c : * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }

    private static final int __has_ptrcheck = (int) 0L;

    /**
     * {@snippet lang = c : * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }

    private static final int USE_CLANG_TYPES = (int) 0L;

    /**
     * {@snippet lang = c : * #define USE_CLANG_TYPES 0
     * }
     */
    public static int USE_CLANG_TYPES() {
        return USE_CLANG_TYPES;
    }

    private static final int __PTHREAD_SIZE__ = (int) 8176L;

    /**
     * {@snippet lang = c : * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }

    private static final int __PTHREAD_ATTR_SIZE__ = (int) 56L;

    /**
     * {@snippet lang = c : * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }

    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int) 8L;

    /**
     * {@snippet lang = c : * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }

    private static final int __PTHREAD_MUTEX_SIZE__ = (int) 56L;

    /**
     * {@snippet lang = c : * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }

    private static final int __PTHREAD_CONDATTR_SIZE__ = (int) 8L;

    /**
     * {@snippet lang = c : * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }

    private static final int __PTHREAD_COND_SIZE__ = (int) 40L;

    /**
     * {@snippet lang = c : * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }

    private static final int __PTHREAD_ONCE_SIZE__ = (int) 8L;

    /**
     * {@snippet lang = c : * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }

    private static final int __PTHREAD_RWLOCK_SIZE__ = (int) 192L;

    /**
     * {@snippet lang = c : * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }

    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int) 16L;

    /**
     * {@snippet lang = c : * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }

    private static final int INT8_MAX = (int) 127L;

    /**
     * {@snippet lang = c : * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }

    private static final int INT16_MAX = (int) 32767L;

    /**
     * {@snippet lang = c : * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }

    private static final int INT32_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c : * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }

    private static final int UINT8_MAX = (int) 255L;

    /**
     * {@snippet lang = c : * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }

    private static final int UINT16_MAX = (int) 65535L;

    /**
     * {@snippet lang = c : * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }

    private static final int __API_TO_BE_DEPRECATED = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __API_TO_BE_DEPRECATED 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED() {
        return __API_TO_BE_DEPRECATED;
    }

    private static final int __API_TO_BE_DEPRECATED_MACOS = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __API_TO_BE_DEPRECATED_MACOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACOS() {
        return __API_TO_BE_DEPRECATED_MACOS;
    }

    private static final int __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION = (int) 100000L;

    /**
     * {@snippet lang = c
     * : * #define __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION;
    }

    private static final int __API_TO_BE_DEPRECATED_IOS = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __API_TO_BE_DEPRECATED_IOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_IOS() {
        return __API_TO_BE_DEPRECATED_IOS;
    }

    private static final int __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION = (int) 100000L;

    /**
     * {@snippet lang = c
     * : * #define __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION;
    }

    private static final int __API_TO_BE_DEPRECATED_MACCATALYST = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __API_TO_BE_DEPRECATED_MACCATALYST 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACCATALYST() {
        return __API_TO_BE_DEPRECATED_MACCATALYST;
    }

    private static final int __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION = (int) 100000L;

    /**
     * {@snippet lang = c
     * : * #define __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION;
    }

    private static final int __API_TO_BE_DEPRECATED_WATCHOS = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __API_TO_BE_DEPRECATED_WATCHOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_WATCHOS() {
        return __API_TO_BE_DEPRECATED_WATCHOS;
    }

    private static final int __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION = (int) 100000L;

    /**
     * {@snippet lang = c
     * : * #define __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION;
    }

    private static final int __API_TO_BE_DEPRECATED_TVOS = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __API_TO_BE_DEPRECATED_TVOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_TVOS() {
        return __API_TO_BE_DEPRECATED_TVOS;
    }

    private static final int __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION = (int) 100000L;

    /**
     * {@snippet lang = c
     * : * #define __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION;
    }

    private static final int __API_TO_BE_DEPRECATED_DRIVERKIT = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __API_TO_BE_DEPRECATED_DRIVERKIT 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_DRIVERKIT() {
        return __API_TO_BE_DEPRECATED_DRIVERKIT;
    }

    private static final int __API_TO_BE_DEPRECATED_VISIONOS = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __API_TO_BE_DEPRECATED_VISIONOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_VISIONOS() {
        return __API_TO_BE_DEPRECATED_VISIONOS;
    }

    private static final int __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION = (int) 100000L;

    /**
     * {@snippet lang = c
     * : * #define __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION;
    }

    private static final int __API_TO_BE_DEPRECATED_KERNELKIT = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __API_TO_BE_DEPRECATED_KERNELKIT 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_KERNELKIT() {
        return __API_TO_BE_DEPRECATED_KERNELKIT;
    }

    private static final int __MAC_10_0 = (int) 1000L;

    /**
     * {@snippet lang = c : * #define __MAC_10_0 1000
     * }
     */
    public static int __MAC_10_0() {
        return __MAC_10_0;
    }

    private static final int __MAC_10_1 = (int) 1010L;

    /**
     * {@snippet lang = c : * #define __MAC_10_1 1010
     * }
     */
    public static int __MAC_10_1() {
        return __MAC_10_1;
    }

    private static final int __MAC_10_2 = (int) 1020L;

    /**
     * {@snippet lang = c : * #define __MAC_10_2 1020
     * }
     */
    public static int __MAC_10_2() {
        return __MAC_10_2;
    }

    private static final int __MAC_10_3 = (int) 1030L;

    /**
     * {@snippet lang = c : * #define __MAC_10_3 1030
     * }
     */
    public static int __MAC_10_3() {
        return __MAC_10_3;
    }

    private static final int __MAC_10_4 = (int) 1040L;

    /**
     * {@snippet lang = c : * #define __MAC_10_4 1040
     * }
     */
    public static int __MAC_10_4() {
        return __MAC_10_4;
    }

    private static final int __MAC_10_5 = (int) 1050L;

    /**
     * {@snippet lang = c : * #define __MAC_10_5 1050
     * }
     */
    public static int __MAC_10_5() {
        return __MAC_10_5;
    }

    private static final int __MAC_10_6 = (int) 1060L;

    /**
     * {@snippet lang = c : * #define __MAC_10_6 1060
     * }
     */
    public static int __MAC_10_6() {
        return __MAC_10_6;
    }

    private static final int __MAC_10_7 = (int) 1070L;

    /**
     * {@snippet lang = c : * #define __MAC_10_7 1070
     * }
     */
    public static int __MAC_10_7() {
        return __MAC_10_7;
    }

    private static final int __MAC_10_8 = (int) 1080L;

    /**
     * {@snippet lang = c : * #define __MAC_10_8 1080
     * }
     */
    public static int __MAC_10_8() {
        return __MAC_10_8;
    }

    private static final int __MAC_10_9 = (int) 1090L;

    /**
     * {@snippet lang = c : * #define __MAC_10_9 1090
     * }
     */
    public static int __MAC_10_9() {
        return __MAC_10_9;
    }

    private static final int __MAC_10_10 = (int) 101000L;

    /**
     * {@snippet lang = c : * #define __MAC_10_10 101000
     * }
     */
    public static int __MAC_10_10() {
        return __MAC_10_10;
    }

    private static final int __MAC_10_10_2 = (int) 101002L;

    /**
     * {@snippet lang = c : * #define __MAC_10_10_2 101002
     * }
     */
    public static int __MAC_10_10_2() {
        return __MAC_10_10_2;
    }

    private static final int __MAC_10_10_3 = (int) 101003L;

    /**
     * {@snippet lang = c : * #define __MAC_10_10_3 101003
     * }
     */
    public static int __MAC_10_10_3() {
        return __MAC_10_10_3;
    }

    private static final int __MAC_10_11 = (int) 101100L;

    /**
     * {@snippet lang = c : * #define __MAC_10_11 101100
     * }
     */
    public static int __MAC_10_11() {
        return __MAC_10_11;
    }

    private static final int __MAC_10_11_2 = (int) 101102L;

    /**
     * {@snippet lang = c : * #define __MAC_10_11_2 101102
     * }
     */
    public static int __MAC_10_11_2() {
        return __MAC_10_11_2;
    }

    private static final int __MAC_10_11_3 = (int) 101103L;

    /**
     * {@snippet lang = c : * #define __MAC_10_11_3 101103
     * }
     */
    public static int __MAC_10_11_3() {
        return __MAC_10_11_3;
    }

    private static final int __MAC_10_11_4 = (int) 101104L;

    /**
     * {@snippet lang = c : * #define __MAC_10_11_4 101104
     * }
     */
    public static int __MAC_10_11_4() {
        return __MAC_10_11_4;
    }

    private static final int __MAC_10_12 = (int) 101200L;

    /**
     * {@snippet lang = c : * #define __MAC_10_12 101200
     * }
     */
    public static int __MAC_10_12() {
        return __MAC_10_12;
    }

    private static final int __MAC_10_12_1 = (int) 101201L;

    /**
     * {@snippet lang = c : * #define __MAC_10_12_1 101201
     * }
     */
    public static int __MAC_10_12_1() {
        return __MAC_10_12_1;
    }

    private static final int __MAC_10_12_2 = (int) 101202L;

    /**
     * {@snippet lang = c : * #define __MAC_10_12_2 101202
     * }
     */
    public static int __MAC_10_12_2() {
        return __MAC_10_12_2;
    }

    private static final int __MAC_10_12_4 = (int) 101204L;

    /**
     * {@snippet lang = c : * #define __MAC_10_12_4 101204
     * }
     */
    public static int __MAC_10_12_4() {
        return __MAC_10_12_4;
    }

    private static final int __MAC_10_13 = (int) 101300L;

    /**
     * {@snippet lang = c : * #define __MAC_10_13 101300
     * }
     */
    public static int __MAC_10_13() {
        return __MAC_10_13;
    }

    private static final int __MAC_10_13_1 = (int) 101301L;

    /**
     * {@snippet lang = c : * #define __MAC_10_13_1 101301
     * }
     */
    public static int __MAC_10_13_1() {
        return __MAC_10_13_1;
    }

    private static final int __MAC_10_13_2 = (int) 101302L;

    /**
     * {@snippet lang = c : * #define __MAC_10_13_2 101302
     * }
     */
    public static int __MAC_10_13_2() {
        return __MAC_10_13_2;
    }

    private static final int __MAC_10_13_4 = (int) 101304L;

    /**
     * {@snippet lang = c : * #define __MAC_10_13_4 101304
     * }
     */
    public static int __MAC_10_13_4() {
        return __MAC_10_13_4;
    }

    private static final int __MAC_10_14 = (int) 101400L;

    /**
     * {@snippet lang = c : * #define __MAC_10_14 101400
     * }
     */
    public static int __MAC_10_14() {
        return __MAC_10_14;
    }

    private static final int __MAC_10_14_1 = (int) 101401L;

    /**
     * {@snippet lang = c : * #define __MAC_10_14_1 101401
     * }
     */
    public static int __MAC_10_14_1() {
        return __MAC_10_14_1;
    }

    private static final int __MAC_10_14_4 = (int) 101404L;

    /**
     * {@snippet lang = c : * #define __MAC_10_14_4 101404
     * }
     */
    public static int __MAC_10_14_4() {
        return __MAC_10_14_4;
    }

    private static final int __MAC_10_14_5 = (int) 101405L;

    /**
     * {@snippet lang = c : * #define __MAC_10_14_5 101405
     * }
     */
    public static int __MAC_10_14_5() {
        return __MAC_10_14_5;
    }

    private static final int __MAC_10_14_6 = (int) 101406L;

    /**
     * {@snippet lang = c : * #define __MAC_10_14_6 101406
     * }
     */
    public static int __MAC_10_14_6() {
        return __MAC_10_14_6;
    }

    private static final int __MAC_10_15 = (int) 101500L;

    /**
     * {@snippet lang = c : * #define __MAC_10_15 101500
     * }
     */
    public static int __MAC_10_15() {
        return __MAC_10_15;
    }

    private static final int __MAC_10_15_1 = (int) 101501L;

    /**
     * {@snippet lang = c : * #define __MAC_10_15_1 101501
     * }
     */
    public static int __MAC_10_15_1() {
        return __MAC_10_15_1;
    }

    private static final int __MAC_10_15_4 = (int) 101504L;

    /**
     * {@snippet lang = c : * #define __MAC_10_15_4 101504
     * }
     */
    public static int __MAC_10_15_4() {
        return __MAC_10_15_4;
    }

    private static final int __MAC_10_16 = (int) 101600L;

    /**
     * {@snippet lang = c : * #define __MAC_10_16 101600
     * }
     */
    public static int __MAC_10_16() {
        return __MAC_10_16;
    }

    private static final int __MAC_11_0 = (int) 110000L;

    /**
     * {@snippet lang = c : * #define __MAC_11_0 110000
     * }
     */
    public static int __MAC_11_0() {
        return __MAC_11_0;
    }

    private static final int __MAC_11_1 = (int) 110100L;

    /**
     * {@snippet lang = c : * #define __MAC_11_1 110100
     * }
     */
    public static int __MAC_11_1() {
        return __MAC_11_1;
    }

    private static final int __MAC_11_3 = (int) 110300L;

    /**
     * {@snippet lang = c : * #define __MAC_11_3 110300
     * }
     */
    public static int __MAC_11_3() {
        return __MAC_11_3;
    }

    private static final int __MAC_11_4 = (int) 110400L;

    /**
     * {@snippet lang = c : * #define __MAC_11_4 110400
     * }
     */
    public static int __MAC_11_4() {
        return __MAC_11_4;
    }

    private static final int __MAC_11_5 = (int) 110500L;

    /**
     * {@snippet lang = c : * #define __MAC_11_5 110500
     * }
     */
    public static int __MAC_11_5() {
        return __MAC_11_5;
    }

    private static final int __MAC_11_6 = (int) 110600L;

    /**
     * {@snippet lang = c : * #define __MAC_11_6 110600
     * }
     */
    public static int __MAC_11_6() {
        return __MAC_11_6;
    }

    private static final int __MAC_12_0 = (int) 120000L;

    /**
     * {@snippet lang = c : * #define __MAC_12_0 120000
     * }
     */
    public static int __MAC_12_0() {
        return __MAC_12_0;
    }

    private static final int __MAC_12_1 = (int) 120100L;

    /**
     * {@snippet lang = c : * #define __MAC_12_1 120100
     * }
     */
    public static int __MAC_12_1() {
        return __MAC_12_1;
    }

    private static final int __MAC_12_2 = (int) 120200L;

    /**
     * {@snippet lang = c : * #define __MAC_12_2 120200
     * }
     */
    public static int __MAC_12_2() {
        return __MAC_12_2;
    }

    private static final int __MAC_12_3 = (int) 120300L;

    /**
     * {@snippet lang = c : * #define __MAC_12_3 120300
     * }
     */
    public static int __MAC_12_3() {
        return __MAC_12_3;
    }

    private static final int __MAC_12_4 = (int) 120400L;

    /**
     * {@snippet lang = c : * #define __MAC_12_4 120400
     * }
     */
    public static int __MAC_12_4() {
        return __MAC_12_4;
    }

    private static final int __MAC_12_5 = (int) 120500L;

    /**
     * {@snippet lang = c : * #define __MAC_12_5 120500
     * }
     */
    public static int __MAC_12_5() {
        return __MAC_12_5;
    }

    private static final int __MAC_12_6 = (int) 120600L;

    /**
     * {@snippet lang = c : * #define __MAC_12_6 120600
     * }
     */
    public static int __MAC_12_6() {
        return __MAC_12_6;
    }

    private static final int __MAC_12_7 = (int) 120700L;

    /**
     * {@snippet lang = c : * #define __MAC_12_7 120700
     * }
     */
    public static int __MAC_12_7() {
        return __MAC_12_7;
    }

    private static final int __MAC_13_0 = (int) 130000L;

    /**
     * {@snippet lang = c : * #define __MAC_13_0 130000
     * }
     */
    public static int __MAC_13_0() {
        return __MAC_13_0;
    }

    private static final int __MAC_13_1 = (int) 130100L;

    /**
     * {@snippet lang = c : * #define __MAC_13_1 130100
     * }
     */
    public static int __MAC_13_1() {
        return __MAC_13_1;
    }

    private static final int __MAC_13_2 = (int) 130200L;

    /**
     * {@snippet lang = c : * #define __MAC_13_2 130200
     * }
     */
    public static int __MAC_13_2() {
        return __MAC_13_2;
    }

    private static final int __MAC_13_3 = (int) 130300L;

    /**
     * {@snippet lang = c : * #define __MAC_13_3 130300
     * }
     */
    public static int __MAC_13_3() {
        return __MAC_13_3;
    }

    private static final int __MAC_13_4 = (int) 130400L;

    /**
     * {@snippet lang = c : * #define __MAC_13_4 130400
     * }
     */
    public static int __MAC_13_4() {
        return __MAC_13_4;
    }

    private static final int __MAC_13_5 = (int) 130500L;

    /**
     * {@snippet lang = c : * #define __MAC_13_5 130500
     * }
     */
    public static int __MAC_13_5() {
        return __MAC_13_5;
    }

    private static final int __MAC_13_6 = (int) 130600L;

    /**
     * {@snippet lang = c : * #define __MAC_13_6 130600
     * }
     */
    public static int __MAC_13_6() {
        return __MAC_13_6;
    }

    private static final int __MAC_13_7 = (int) 130700L;

    /**
     * {@snippet lang = c : * #define __MAC_13_7 130700
     * }
     */
    public static int __MAC_13_7() {
        return __MAC_13_7;
    }

    private static final int __MAC_14_0 = (int) 140000L;

    /**
     * {@snippet lang = c : * #define __MAC_14_0 140000
     * }
     */
    public static int __MAC_14_0() {
        return __MAC_14_0;
    }

    private static final int __MAC_14_1 = (int) 140100L;

    /**
     * {@snippet lang = c : * #define __MAC_14_1 140100
     * }
     */
    public static int __MAC_14_1() {
        return __MAC_14_1;
    }

    private static final int __MAC_14_2 = (int) 140200L;

    /**
     * {@snippet lang = c : * #define __MAC_14_2 140200
     * }
     */
    public static int __MAC_14_2() {
        return __MAC_14_2;
    }

    private static final int __MAC_14_3 = (int) 140300L;

    /**
     * {@snippet lang = c : * #define __MAC_14_3 140300
     * }
     */
    public static int __MAC_14_3() {
        return __MAC_14_3;
    }

    private static final int __MAC_14_4 = (int) 140400L;

    /**
     * {@snippet lang = c : * #define __MAC_14_4 140400
     * }
     */
    public static int __MAC_14_4() {
        return __MAC_14_4;
    }

    private static final int __MAC_14_5 = (int) 140500L;

    /**
     * {@snippet lang = c : * #define __MAC_14_5 140500
     * }
     */
    public static int __MAC_14_5() {
        return __MAC_14_5;
    }

    private static final int __MAC_14_6 = (int) 140600L;

    /**
     * {@snippet lang = c : * #define __MAC_14_6 140600
     * }
     */
    public static int __MAC_14_6() {
        return __MAC_14_6;
    }

    private static final int __MAC_14_7 = (int) 140700L;

    /**
     * {@snippet lang = c : * #define __MAC_14_7 140700
     * }
     */
    public static int __MAC_14_7() {
        return __MAC_14_7;
    }

    private static final int __MAC_15_0 = (int) 150000L;

    /**
     * {@snippet lang = c : * #define __MAC_15_0 150000
     * }
     */
    public static int __MAC_15_0() {
        return __MAC_15_0;
    }

    private static final int __MAC_15_1 = (int) 150100L;

    /**
     * {@snippet lang = c : * #define __MAC_15_1 150100
     * }
     */
    public static int __MAC_15_1() {
        return __MAC_15_1;
    }

    private static final int __MAC_15_2 = (int) 150200L;

    /**
     * {@snippet lang = c : * #define __MAC_15_2 150200
     * }
     */
    public static int __MAC_15_2() {
        return __MAC_15_2;
    }

    private static final int __MAC_15_3 = (int) 150300L;

    /**
     * {@snippet lang = c : * #define __MAC_15_3 150300
     * }
     */
    public static int __MAC_15_3() {
        return __MAC_15_3;
    }

    private static final int __MAC_15_4 = (int) 150400L;

    /**
     * {@snippet lang = c : * #define __MAC_15_4 150400
     * }
     */
    public static int __MAC_15_4() {
        return __MAC_15_4;
    }

    private static final int __MAC_15_5 = (int) 150500L;

    /**
     * {@snippet lang = c : * #define __MAC_15_5 150500
     * }
     */
    public static int __MAC_15_5() {
        return __MAC_15_5;
    }

    private static final int __IPHONE_2_0 = (int) 20000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_2_0 20000
     * }
     */
    public static int __IPHONE_2_0() {
        return __IPHONE_2_0;
    }

    private static final int __IPHONE_2_1 = (int) 20100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_2_1 20100
     * }
     */
    public static int __IPHONE_2_1() {
        return __IPHONE_2_1;
    }

    private static final int __IPHONE_2_2 = (int) 20200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_2_2 20200
     * }
     */
    public static int __IPHONE_2_2() {
        return __IPHONE_2_2;
    }

    private static final int __IPHONE_3_0 = (int) 30000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_3_0 30000
     * }
     */
    public static int __IPHONE_3_0() {
        return __IPHONE_3_0;
    }

    private static final int __IPHONE_3_1 = (int) 30100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_3_1 30100
     * }
     */
    public static int __IPHONE_3_1() {
        return __IPHONE_3_1;
    }

    private static final int __IPHONE_3_2 = (int) 30200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_3_2 30200
     * }
     */
    public static int __IPHONE_3_2() {
        return __IPHONE_3_2;
    }

    private static final int __IPHONE_4_0 = (int) 40000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_4_0 40000
     * }
     */
    public static int __IPHONE_4_0() {
        return __IPHONE_4_0;
    }

    private static final int __IPHONE_4_1 = (int) 40100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_4_1 40100
     * }
     */
    public static int __IPHONE_4_1() {
        return __IPHONE_4_1;
    }

    private static final int __IPHONE_4_2 = (int) 40200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_4_2 40200
     * }
     */
    public static int __IPHONE_4_2() {
        return __IPHONE_4_2;
    }

    private static final int __IPHONE_4_3 = (int) 40300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_4_3 40300
     * }
     */
    public static int __IPHONE_4_3() {
        return __IPHONE_4_3;
    }

    private static final int __IPHONE_5_0 = (int) 50000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_5_0 50000
     * }
     */
    public static int __IPHONE_5_0() {
        return __IPHONE_5_0;
    }

    private static final int __IPHONE_5_1 = (int) 50100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_5_1 50100
     * }
     */
    public static int __IPHONE_5_1() {
        return __IPHONE_5_1;
    }

    private static final int __IPHONE_6_0 = (int) 60000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_6_0 60000
     * }
     */
    public static int __IPHONE_6_0() {
        return __IPHONE_6_0;
    }

    private static final int __IPHONE_6_1 = (int) 60100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_6_1 60100
     * }
     */
    public static int __IPHONE_6_1() {
        return __IPHONE_6_1;
    }

    private static final int __IPHONE_7_0 = (int) 70000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_7_0 70000
     * }
     */
    public static int __IPHONE_7_0() {
        return __IPHONE_7_0;
    }

    private static final int __IPHONE_7_1 = (int) 70100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_7_1 70100
     * }
     */
    public static int __IPHONE_7_1() {
        return __IPHONE_7_1;
    }

    private static final int __IPHONE_8_0 = (int) 80000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_8_0 80000
     * }
     */
    public static int __IPHONE_8_0() {
        return __IPHONE_8_0;
    }

    private static final int __IPHONE_8_1 = (int) 80100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_8_1 80100
     * }
     */
    public static int __IPHONE_8_1() {
        return __IPHONE_8_1;
    }

    private static final int __IPHONE_8_2 = (int) 80200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_8_2 80200
     * }
     */
    public static int __IPHONE_8_2() {
        return __IPHONE_8_2;
    }

    private static final int __IPHONE_8_3 = (int) 80300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_8_3 80300
     * }
     */
    public static int __IPHONE_8_3() {
        return __IPHONE_8_3;
    }

    private static final int __IPHONE_8_4 = (int) 80400L;

    /**
     * {@snippet lang = c : * #define __IPHONE_8_4 80400
     * }
     */
    public static int __IPHONE_8_4() {
        return __IPHONE_8_4;
    }

    private static final int __IPHONE_9_0 = (int) 90000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_9_0 90000
     * }
     */
    public static int __IPHONE_9_0() {
        return __IPHONE_9_0;
    }

    private static final int __IPHONE_9_1 = (int) 90100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_9_1 90100
     * }
     */
    public static int __IPHONE_9_1() {
        return __IPHONE_9_1;
    }

    private static final int __IPHONE_9_2 = (int) 90200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_9_2 90200
     * }
     */
    public static int __IPHONE_9_2() {
        return __IPHONE_9_2;
    }

    private static final int __IPHONE_9_3 = (int) 90300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_9_3 90300
     * }
     */
    public static int __IPHONE_9_3() {
        return __IPHONE_9_3;
    }

    private static final int __IPHONE_10_0 = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_10_0 100000
     * }
     */
    public static int __IPHONE_10_0() {
        return __IPHONE_10_0;
    }

    private static final int __IPHONE_10_1 = (int) 100100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_10_1 100100
     * }
     */
    public static int __IPHONE_10_1() {
        return __IPHONE_10_1;
    }

    private static final int __IPHONE_10_2 = (int) 100200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_10_2 100200
     * }
     */
    public static int __IPHONE_10_2() {
        return __IPHONE_10_2;
    }

    private static final int __IPHONE_10_3 = (int) 100300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_10_3 100300
     * }
     */
    public static int __IPHONE_10_3() {
        return __IPHONE_10_3;
    }

    private static final int __IPHONE_11_0 = (int) 110000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_11_0 110000
     * }
     */
    public static int __IPHONE_11_0() {
        return __IPHONE_11_0;
    }

    private static final int __IPHONE_11_1 = (int) 110100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_11_1 110100
     * }
     */
    public static int __IPHONE_11_1() {
        return __IPHONE_11_1;
    }

    private static final int __IPHONE_11_2 = (int) 110200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_11_2 110200
     * }
     */
    public static int __IPHONE_11_2() {
        return __IPHONE_11_2;
    }

    private static final int __IPHONE_11_3 = (int) 110300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_11_3 110300
     * }
     */
    public static int __IPHONE_11_3() {
        return __IPHONE_11_3;
    }

    private static final int __IPHONE_11_4 = (int) 110400L;

    /**
     * {@snippet lang = c : * #define __IPHONE_11_4 110400
     * }
     */
    public static int __IPHONE_11_4() {
        return __IPHONE_11_4;
    }

    private static final int __IPHONE_12_0 = (int) 120000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_12_0 120000
     * }
     */
    public static int __IPHONE_12_0() {
        return __IPHONE_12_0;
    }

    private static final int __IPHONE_12_1 = (int) 120100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_12_1 120100
     * }
     */
    public static int __IPHONE_12_1() {
        return __IPHONE_12_1;
    }

    private static final int __IPHONE_12_2 = (int) 120200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_12_2 120200
     * }
     */
    public static int __IPHONE_12_2() {
        return __IPHONE_12_2;
    }

    private static final int __IPHONE_12_3 = (int) 120300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_12_3 120300
     * }
     */
    public static int __IPHONE_12_3() {
        return __IPHONE_12_3;
    }

    private static final int __IPHONE_12_4 = (int) 120400L;

    /**
     * {@snippet lang = c : * #define __IPHONE_12_4 120400
     * }
     */
    public static int __IPHONE_12_4() {
        return __IPHONE_12_4;
    }

    private static final int __IPHONE_13_0 = (int) 130000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_13_0 130000
     * }
     */
    public static int __IPHONE_13_0() {
        return __IPHONE_13_0;
    }

    private static final int __IPHONE_13_1 = (int) 130100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_13_1 130100
     * }
     */
    public static int __IPHONE_13_1() {
        return __IPHONE_13_1;
    }

    private static final int __IPHONE_13_2 = (int) 130200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_13_2 130200
     * }
     */
    public static int __IPHONE_13_2() {
        return __IPHONE_13_2;
    }

    private static final int __IPHONE_13_3 = (int) 130300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_13_3 130300
     * }
     */
    public static int __IPHONE_13_3() {
        return __IPHONE_13_3;
    }

    private static final int __IPHONE_13_4 = (int) 130400L;

    /**
     * {@snippet lang = c : * #define __IPHONE_13_4 130400
     * }
     */
    public static int __IPHONE_13_4() {
        return __IPHONE_13_4;
    }

    private static final int __IPHONE_13_5 = (int) 130500L;

    /**
     * {@snippet lang = c : * #define __IPHONE_13_5 130500
     * }
     */
    public static int __IPHONE_13_5() {
        return __IPHONE_13_5;
    }

    private static final int __IPHONE_13_6 = (int) 130600L;

    /**
     * {@snippet lang = c : * #define __IPHONE_13_6 130600
     * }
     */
    public static int __IPHONE_13_6() {
        return __IPHONE_13_6;
    }

    private static final int __IPHONE_13_7 = (int) 130700L;

    /**
     * {@snippet lang = c : * #define __IPHONE_13_7 130700
     * }
     */
    public static int __IPHONE_13_7() {
        return __IPHONE_13_7;
    }

    private static final int __IPHONE_14_0 = (int) 140000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_14_0 140000
     * }
     */
    public static int __IPHONE_14_0() {
        return __IPHONE_14_0;
    }

    private static final int __IPHONE_14_1 = (int) 140100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_14_1 140100
     * }
     */
    public static int __IPHONE_14_1() {
        return __IPHONE_14_1;
    }

    private static final int __IPHONE_14_2 = (int) 140200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_14_2 140200
     * }
     */
    public static int __IPHONE_14_2() {
        return __IPHONE_14_2;
    }

    private static final int __IPHONE_14_3 = (int) 140300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_14_3 140300
     * }
     */
    public static int __IPHONE_14_3() {
        return __IPHONE_14_3;
    }

    private static final int __IPHONE_14_5 = (int) 140500L;

    /**
     * {@snippet lang = c : * #define __IPHONE_14_5 140500
     * }
     */
    public static int __IPHONE_14_5() {
        return __IPHONE_14_5;
    }

    private static final int __IPHONE_14_4 = (int) 140400L;

    /**
     * {@snippet lang = c : * #define __IPHONE_14_4 140400
     * }
     */
    public static int __IPHONE_14_4() {
        return __IPHONE_14_4;
    }

    private static final int __IPHONE_14_6 = (int) 140600L;

    /**
     * {@snippet lang = c : * #define __IPHONE_14_6 140600
     * }
     */
    public static int __IPHONE_14_6() {
        return __IPHONE_14_6;
    }

    private static final int __IPHONE_14_7 = (int) 140700L;

    /**
     * {@snippet lang = c : * #define __IPHONE_14_7 140700
     * }
     */
    public static int __IPHONE_14_7() {
        return __IPHONE_14_7;
    }

    private static final int __IPHONE_14_8 = (int) 140800L;

    /**
     * {@snippet lang = c : * #define __IPHONE_14_8 140800
     * }
     */
    public static int __IPHONE_14_8() {
        return __IPHONE_14_8;
    }

    private static final int __IPHONE_15_0 = (int) 150000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_15_0 150000
     * }
     */
    public static int __IPHONE_15_0() {
        return __IPHONE_15_0;
    }

    private static final int __IPHONE_15_1 = (int) 150100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_15_1 150100
     * }
     */
    public static int __IPHONE_15_1() {
        return __IPHONE_15_1;
    }

    private static final int __IPHONE_15_2 = (int) 150200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_15_2 150200
     * }
     */
    public static int __IPHONE_15_2() {
        return __IPHONE_15_2;
    }

    private static final int __IPHONE_15_3 = (int) 150300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_15_3 150300
     * }
     */
    public static int __IPHONE_15_3() {
        return __IPHONE_15_3;
    }

    private static final int __IPHONE_15_4 = (int) 150400L;

    /**
     * {@snippet lang = c : * #define __IPHONE_15_4 150400
     * }
     */
    public static int __IPHONE_15_4() {
        return __IPHONE_15_4;
    }

    private static final int __IPHONE_15_5 = (int) 150500L;

    /**
     * {@snippet lang = c : * #define __IPHONE_15_5 150500
     * }
     */
    public static int __IPHONE_15_5() {
        return __IPHONE_15_5;
    }

    private static final int __IPHONE_15_6 = (int) 150600L;

    /**
     * {@snippet lang = c : * #define __IPHONE_15_6 150600
     * }
     */
    public static int __IPHONE_15_6() {
        return __IPHONE_15_6;
    }

    private static final int __IPHONE_15_7 = (int) 150700L;

    /**
     * {@snippet lang = c : * #define __IPHONE_15_7 150700
     * }
     */
    public static int __IPHONE_15_7() {
        return __IPHONE_15_7;
    }

    private static final int __IPHONE_15_8 = (int) 150800L;

    /**
     * {@snippet lang = c : * #define __IPHONE_15_8 150800
     * }
     */
    public static int __IPHONE_15_8() {
        return __IPHONE_15_8;
    }

    private static final int __IPHONE_16_0 = (int) 160000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_16_0 160000
     * }
     */
    public static int __IPHONE_16_0() {
        return __IPHONE_16_0;
    }

    private static final int __IPHONE_16_1 = (int) 160100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_16_1 160100
     * }
     */
    public static int __IPHONE_16_1() {
        return __IPHONE_16_1;
    }

    private static final int __IPHONE_16_2 = (int) 160200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_16_2 160200
     * }
     */
    public static int __IPHONE_16_2() {
        return __IPHONE_16_2;
    }

    private static final int __IPHONE_16_3 = (int) 160300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_16_3 160300
     * }
     */
    public static int __IPHONE_16_3() {
        return __IPHONE_16_3;
    }

    private static final int __IPHONE_16_4 = (int) 160400L;

    /**
     * {@snippet lang = c : * #define __IPHONE_16_4 160400
     * }
     */
    public static int __IPHONE_16_4() {
        return __IPHONE_16_4;
    }

    private static final int __IPHONE_16_5 = (int) 160500L;

    /**
     * {@snippet lang = c : * #define __IPHONE_16_5 160500
     * }
     */
    public static int __IPHONE_16_5() {
        return __IPHONE_16_5;
    }

    private static final int __IPHONE_16_6 = (int) 160600L;

    /**
     * {@snippet lang = c : * #define __IPHONE_16_6 160600
     * }
     */
    public static int __IPHONE_16_6() {
        return __IPHONE_16_6;
    }

    private static final int __IPHONE_16_7 = (int) 160700L;

    /**
     * {@snippet lang = c : * #define __IPHONE_16_7 160700
     * }
     */
    public static int __IPHONE_16_7() {
        return __IPHONE_16_7;
    }

    private static final int __IPHONE_17_0 = (int) 170000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_17_0 170000
     * }
     */
    public static int __IPHONE_17_0() {
        return __IPHONE_17_0;
    }

    private static final int __IPHONE_17_1 = (int) 170100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_17_1 170100
     * }
     */
    public static int __IPHONE_17_1() {
        return __IPHONE_17_1;
    }

    private static final int __IPHONE_17_2 = (int) 170200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_17_2 170200
     * }
     */
    public static int __IPHONE_17_2() {
        return __IPHONE_17_2;
    }

    private static final int __IPHONE_17_3 = (int) 170300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_17_3 170300
     * }
     */
    public static int __IPHONE_17_3() {
        return __IPHONE_17_3;
    }

    private static final int __IPHONE_17_4 = (int) 170400L;

    /**
     * {@snippet lang = c : * #define __IPHONE_17_4 170400
     * }
     */
    public static int __IPHONE_17_4() {
        return __IPHONE_17_4;
    }

    private static final int __IPHONE_17_5 = (int) 170500L;

    /**
     * {@snippet lang = c : * #define __IPHONE_17_5 170500
     * }
     */
    public static int __IPHONE_17_5() {
        return __IPHONE_17_5;
    }

    private static final int __IPHONE_17_6 = (int) 170600L;

    /**
     * {@snippet lang = c : * #define __IPHONE_17_6 170600
     * }
     */
    public static int __IPHONE_17_6() {
        return __IPHONE_17_6;
    }

    private static final int __IPHONE_17_7 = (int) 170700L;

    /**
     * {@snippet lang = c : * #define __IPHONE_17_7 170700
     * }
     */
    public static int __IPHONE_17_7() {
        return __IPHONE_17_7;
    }

    private static final int __IPHONE_18_0 = (int) 180000L;

    /**
     * {@snippet lang = c : * #define __IPHONE_18_0 180000
     * }
     */
    public static int __IPHONE_18_0() {
        return __IPHONE_18_0;
    }

    private static final int __IPHONE_18_1 = (int) 180100L;

    /**
     * {@snippet lang = c : * #define __IPHONE_18_1 180100
     * }
     */
    public static int __IPHONE_18_1() {
        return __IPHONE_18_1;
    }

    private static final int __IPHONE_18_2 = (int) 180200L;

    /**
     * {@snippet lang = c : * #define __IPHONE_18_2 180200
     * }
     */
    public static int __IPHONE_18_2() {
        return __IPHONE_18_2;
    }

    private static final int __IPHONE_18_3 = (int) 180300L;

    /**
     * {@snippet lang = c : * #define __IPHONE_18_3 180300
     * }
     */
    public static int __IPHONE_18_3() {
        return __IPHONE_18_3;
    }

    private static final int __IPHONE_18_4 = (int) 180400L;

    /**
     * {@snippet lang = c : * #define __IPHONE_18_4 180400
     * }
     */
    public static int __IPHONE_18_4() {
        return __IPHONE_18_4;
    }

    private static final int __IPHONE_18_5 = (int) 180500L;

    /**
     * {@snippet lang = c : * #define __IPHONE_18_5 180500
     * }
     */
    public static int __IPHONE_18_5() {
        return __IPHONE_18_5;
    }

    private static final int __WATCHOS_1_0 = (int) 10000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_1_0 10000
     * }
     */
    public static int __WATCHOS_1_0() {
        return __WATCHOS_1_0;
    }

    private static final int __WATCHOS_2_0 = (int) 20000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_2_0 20000
     * }
     */
    public static int __WATCHOS_2_0() {
        return __WATCHOS_2_0;
    }

    private static final int __WATCHOS_2_1 = (int) 20100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_2_1 20100
     * }
     */
    public static int __WATCHOS_2_1() {
        return __WATCHOS_2_1;
    }

    private static final int __WATCHOS_2_2 = (int) 20200L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_2_2 20200
     * }
     */
    public static int __WATCHOS_2_2() {
        return __WATCHOS_2_2;
    }

    private static final int __WATCHOS_3_0 = (int) 30000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_3_0 30000
     * }
     */
    public static int __WATCHOS_3_0() {
        return __WATCHOS_3_0;
    }

    private static final int __WATCHOS_3_1 = (int) 30100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_3_1 30100
     * }
     */
    public static int __WATCHOS_3_1() {
        return __WATCHOS_3_1;
    }

    private static final int __WATCHOS_3_1_1 = (int) 30101L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_3_1_1 30101
     * }
     */
    public static int __WATCHOS_3_1_1() {
        return __WATCHOS_3_1_1;
    }

    private static final int __WATCHOS_3_2 = (int) 30200L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_3_2 30200
     * }
     */
    public static int __WATCHOS_3_2() {
        return __WATCHOS_3_2;
    }

    private static final int __WATCHOS_4_0 = (int) 40000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_4_0 40000
     * }
     */
    public static int __WATCHOS_4_0() {
        return __WATCHOS_4_0;
    }

    private static final int __WATCHOS_4_1 = (int) 40100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_4_1 40100
     * }
     */
    public static int __WATCHOS_4_1() {
        return __WATCHOS_4_1;
    }

    private static final int __WATCHOS_4_2 = (int) 40200L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_4_2 40200
     * }
     */
    public static int __WATCHOS_4_2() {
        return __WATCHOS_4_2;
    }

    private static final int __WATCHOS_4_3 = (int) 40300L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_4_3 40300
     * }
     */
    public static int __WATCHOS_4_3() {
        return __WATCHOS_4_3;
    }

    private static final int __WATCHOS_5_0 = (int) 50000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_5_0 50000
     * }
     */
    public static int __WATCHOS_5_0() {
        return __WATCHOS_5_0;
    }

    private static final int __WATCHOS_5_1 = (int) 50100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_5_1 50100
     * }
     */
    public static int __WATCHOS_5_1() {
        return __WATCHOS_5_1;
    }

    private static final int __WATCHOS_5_2 = (int) 50200L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_5_2 50200
     * }
     */
    public static int __WATCHOS_5_2() {
        return __WATCHOS_5_2;
    }

    private static final int __WATCHOS_5_3 = (int) 50300L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_5_3 50300
     * }
     */
    public static int __WATCHOS_5_3() {
        return __WATCHOS_5_3;
    }

    private static final int __WATCHOS_6_0 = (int) 60000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_6_0 60000
     * }
     */
    public static int __WATCHOS_6_0() {
        return __WATCHOS_6_0;
    }

    private static final int __WATCHOS_6_1 = (int) 60100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_6_1 60100
     * }
     */
    public static int __WATCHOS_6_1() {
        return __WATCHOS_6_1;
    }

    private static final int __WATCHOS_6_2 = (int) 60200L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_6_2 60200
     * }
     */
    public static int __WATCHOS_6_2() {
        return __WATCHOS_6_2;
    }

    private static final int __WATCHOS_7_0 = (int) 70000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_7_0 70000
     * }
     */
    public static int __WATCHOS_7_0() {
        return __WATCHOS_7_0;
    }

    private static final int __WATCHOS_7_1 = (int) 70100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_7_1 70100
     * }
     */
    public static int __WATCHOS_7_1() {
        return __WATCHOS_7_1;
    }

    private static final int __WATCHOS_7_2 = (int) 70200L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_7_2 70200
     * }
     */
    public static int __WATCHOS_7_2() {
        return __WATCHOS_7_2;
    }

    private static final int __WATCHOS_7_3 = (int) 70300L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_7_3 70300
     * }
     */
    public static int __WATCHOS_7_3() {
        return __WATCHOS_7_3;
    }

    private static final int __WATCHOS_7_4 = (int) 70400L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_7_4 70400
     * }
     */
    public static int __WATCHOS_7_4() {
        return __WATCHOS_7_4;
    }

    private static final int __WATCHOS_7_5 = (int) 70500L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_7_5 70500
     * }
     */
    public static int __WATCHOS_7_5() {
        return __WATCHOS_7_5;
    }

    private static final int __WATCHOS_7_6 = (int) 70600L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_7_6 70600
     * }
     */
    public static int __WATCHOS_7_6() {
        return __WATCHOS_7_6;
    }

    private static final int __WATCHOS_8_0 = (int) 80000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_8_0 80000
     * }
     */
    public static int __WATCHOS_8_0() {
        return __WATCHOS_8_0;
    }

    private static final int __WATCHOS_8_1 = (int) 80100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_8_1 80100
     * }
     */
    public static int __WATCHOS_8_1() {
        return __WATCHOS_8_1;
    }

    private static final int __WATCHOS_8_3 = (int) 80300L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_8_3 80300
     * }
     */
    public static int __WATCHOS_8_3() {
        return __WATCHOS_8_3;
    }

    private static final int __WATCHOS_8_4 = (int) 80400L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_8_4 80400
     * }
     */
    public static int __WATCHOS_8_4() {
        return __WATCHOS_8_4;
    }

    private static final int __WATCHOS_8_5 = (int) 80500L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_8_5 80500
     * }
     */
    public static int __WATCHOS_8_5() {
        return __WATCHOS_8_5;
    }

    private static final int __WATCHOS_8_6 = (int) 80600L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_8_6 80600
     * }
     */
    public static int __WATCHOS_8_6() {
        return __WATCHOS_8_6;
    }

    private static final int __WATCHOS_8_7 = (int) 80700L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_8_7 80700
     * }
     */
    public static int __WATCHOS_8_7() {
        return __WATCHOS_8_7;
    }

    private static final int __WATCHOS_8_8 = (int) 80800L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_8_8 80800
     * }
     */
    public static int __WATCHOS_8_8() {
        return __WATCHOS_8_8;
    }

    private static final int __WATCHOS_9_0 = (int) 90000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_9_0 90000
     * }
     */
    public static int __WATCHOS_9_0() {
        return __WATCHOS_9_0;
    }

    private static final int __WATCHOS_9_1 = (int) 90100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_9_1 90100
     * }
     */
    public static int __WATCHOS_9_1() {
        return __WATCHOS_9_1;
    }

    private static final int __WATCHOS_9_2 = (int) 90200L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_9_2 90200
     * }
     */
    public static int __WATCHOS_9_2() {
        return __WATCHOS_9_2;
    }

    private static final int __WATCHOS_9_3 = (int) 90300L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_9_3 90300
     * }
     */
    public static int __WATCHOS_9_3() {
        return __WATCHOS_9_3;
    }

    private static final int __WATCHOS_9_4 = (int) 90400L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_9_4 90400
     * }
     */
    public static int __WATCHOS_9_4() {
        return __WATCHOS_9_4;
    }

    private static final int __WATCHOS_9_5 = (int) 90500L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_9_5 90500
     * }
     */
    public static int __WATCHOS_9_5() {
        return __WATCHOS_9_5;
    }

    private static final int __WATCHOS_9_6 = (int) 90600L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_9_6 90600
     * }
     */
    public static int __WATCHOS_9_6() {
        return __WATCHOS_9_6;
    }

    private static final int __WATCHOS_10_0 = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_10_0 100000
     * }
     */
    public static int __WATCHOS_10_0() {
        return __WATCHOS_10_0;
    }

    private static final int __WATCHOS_10_1 = (int) 100100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_10_1 100100
     * }
     */
    public static int __WATCHOS_10_1() {
        return __WATCHOS_10_1;
    }

    private static final int __WATCHOS_10_2 = (int) 100200L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_10_2 100200
     * }
     */
    public static int __WATCHOS_10_2() {
        return __WATCHOS_10_2;
    }

    private static final int __WATCHOS_10_3 = (int) 100300L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_10_3 100300
     * }
     */
    public static int __WATCHOS_10_3() {
        return __WATCHOS_10_3;
    }

    private static final int __WATCHOS_10_4 = (int) 100400L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_10_4 100400
     * }
     */
    public static int __WATCHOS_10_4() {
        return __WATCHOS_10_4;
    }

    private static final int __WATCHOS_10_5 = (int) 100500L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_10_5 100500
     * }
     */
    public static int __WATCHOS_10_5() {
        return __WATCHOS_10_5;
    }

    private static final int __WATCHOS_10_6 = (int) 100600L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_10_6 100600
     * }
     */
    public static int __WATCHOS_10_6() {
        return __WATCHOS_10_6;
    }

    private static final int __WATCHOS_10_7 = (int) 100700L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_10_7 100700
     * }
     */
    public static int __WATCHOS_10_7() {
        return __WATCHOS_10_7;
    }

    private static final int __WATCHOS_11_0 = (int) 110000L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_11_0 110000
     * }
     */
    public static int __WATCHOS_11_0() {
        return __WATCHOS_11_0;
    }

    private static final int __WATCHOS_11_1 = (int) 110100L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_11_1 110100
     * }
     */
    public static int __WATCHOS_11_1() {
        return __WATCHOS_11_1;
    }

    private static final int __WATCHOS_11_2 = (int) 110200L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_11_2 110200
     * }
     */
    public static int __WATCHOS_11_2() {
        return __WATCHOS_11_2;
    }

    private static final int __WATCHOS_11_3 = (int) 110300L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_11_3 110300
     * }
     */
    public static int __WATCHOS_11_3() {
        return __WATCHOS_11_3;
    }

    private static final int __WATCHOS_11_4 = (int) 110400L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_11_4 110400
     * }
     */
    public static int __WATCHOS_11_4() {
        return __WATCHOS_11_4;
    }

    private static final int __WATCHOS_11_5 = (int) 110500L;

    /**
     * {@snippet lang = c : * #define __WATCHOS_11_5 110500
     * }
     */
    public static int __WATCHOS_11_5() {
        return __WATCHOS_11_5;
    }

    private static final int __TVOS_9_0 = (int) 90000L;

    /**
     * {@snippet lang = c : * #define __TVOS_9_0 90000
     * }
     */
    public static int __TVOS_9_0() {
        return __TVOS_9_0;
    }

    private static final int __TVOS_9_1 = (int) 90100L;

    /**
     * {@snippet lang = c : * #define __TVOS_9_1 90100
     * }
     */
    public static int __TVOS_9_1() {
        return __TVOS_9_1;
    }

    private static final int __TVOS_9_2 = (int) 90200L;

    /**
     * {@snippet lang = c : * #define __TVOS_9_2 90200
     * }
     */
    public static int __TVOS_9_2() {
        return __TVOS_9_2;
    }

    private static final int __TVOS_10_0 = (int) 100000L;

    /**
     * {@snippet lang = c : * #define __TVOS_10_0 100000
     * }
     */
    public static int __TVOS_10_0() {
        return __TVOS_10_0;
    }

    private static final int __TVOS_10_0_1 = (int) 100001L;

    /**
     * {@snippet lang = c : * #define __TVOS_10_0_1 100001
     * }
     */
    public static int __TVOS_10_0_1() {
        return __TVOS_10_0_1;
    }

    private static final int __TVOS_10_1 = (int) 100100L;

    /**
     * {@snippet lang = c : * #define __TVOS_10_1 100100
     * }
     */
    public static int __TVOS_10_1() {
        return __TVOS_10_1;
    }

    private static final int __TVOS_10_2 = (int) 100200L;

    /**
     * {@snippet lang = c : * #define __TVOS_10_2 100200
     * }
     */
    public static int __TVOS_10_2() {
        return __TVOS_10_2;
    }

    private static final int __TVOS_11_0 = (int) 110000L;

    /**
     * {@snippet lang = c : * #define __TVOS_11_0 110000
     * }
     */
    public static int __TVOS_11_0() {
        return __TVOS_11_0;
    }

    private static final int __TVOS_11_1 = (int) 110100L;

    /**
     * {@snippet lang = c : * #define __TVOS_11_1 110100
     * }
     */
    public static int __TVOS_11_1() {
        return __TVOS_11_1;
    }

    private static final int __TVOS_11_2 = (int) 110200L;

    /**
     * {@snippet lang = c : * #define __TVOS_11_2 110200
     * }
     */
    public static int __TVOS_11_2() {
        return __TVOS_11_2;
    }

    private static final int __TVOS_11_3 = (int) 110300L;

    /**
     * {@snippet lang = c : * #define __TVOS_11_3 110300
     * }
     */
    public static int __TVOS_11_3() {
        return __TVOS_11_3;
    }

    private static final int __TVOS_11_4 = (int) 110400L;

    /**
     * {@snippet lang = c : * #define __TVOS_11_4 110400
     * }
     */
    public static int __TVOS_11_4() {
        return __TVOS_11_4;
    }

    private static final int __TVOS_12_0 = (int) 120000L;

    /**
     * {@snippet lang = c : * #define __TVOS_12_0 120000
     * }
     */
    public static int __TVOS_12_0() {
        return __TVOS_12_0;
    }

    private static final int __TVOS_12_1 = (int) 120100L;

    /**
     * {@snippet lang = c : * #define __TVOS_12_1 120100
     * }
     */
    public static int __TVOS_12_1() {
        return __TVOS_12_1;
    }

    private static final int __TVOS_12_2 = (int) 120200L;

    /**
     * {@snippet lang = c : * #define __TVOS_12_2 120200
     * }
     */
    public static int __TVOS_12_2() {
        return __TVOS_12_2;
    }

    private static final int __TVOS_12_3 = (int) 120300L;

    /**
     * {@snippet lang = c : * #define __TVOS_12_3 120300
     * }
     */
    public static int __TVOS_12_3() {
        return __TVOS_12_3;
    }

    private static final int __TVOS_12_4 = (int) 120400L;

    /**
     * {@snippet lang = c : * #define __TVOS_12_4 120400
     * }
     */
    public static int __TVOS_12_4() {
        return __TVOS_12_4;
    }

    private static final int __TVOS_13_0 = (int) 130000L;

    /**
     * {@snippet lang = c : * #define __TVOS_13_0 130000
     * }
     */
    public static int __TVOS_13_0() {
        return __TVOS_13_0;
    }

    private static final int __TVOS_13_2 = (int) 130200L;

    /**
     * {@snippet lang = c : * #define __TVOS_13_2 130200
     * }
     */
    public static int __TVOS_13_2() {
        return __TVOS_13_2;
    }

    private static final int __TVOS_13_3 = (int) 130300L;

    /**
     * {@snippet lang = c : * #define __TVOS_13_3 130300
     * }
     */
    public static int __TVOS_13_3() {
        return __TVOS_13_3;
    }

    private static final int __TVOS_13_4 = (int) 130400L;

    /**
     * {@snippet lang = c : * #define __TVOS_13_4 130400
     * }
     */
    public static int __TVOS_13_4() {
        return __TVOS_13_4;
    }

    private static final int __TVOS_14_0 = (int) 140000L;

    /**
     * {@snippet lang = c : * #define __TVOS_14_0 140000
     * }
     */
    public static int __TVOS_14_0() {
        return __TVOS_14_0;
    }

    private static final int __TVOS_14_1 = (int) 140100L;

    /**
     * {@snippet lang = c : * #define __TVOS_14_1 140100
     * }
     */
    public static int __TVOS_14_1() {
        return __TVOS_14_1;
    }

    private static final int __TVOS_14_2 = (int) 140200L;

    /**
     * {@snippet lang = c : * #define __TVOS_14_2 140200
     * }
     */
    public static int __TVOS_14_2() {
        return __TVOS_14_2;
    }

    private static final int __TVOS_14_3 = (int) 140300L;

    /**
     * {@snippet lang = c : * #define __TVOS_14_3 140300
     * }
     */
    public static int __TVOS_14_3() {
        return __TVOS_14_3;
    }

    private static final int __TVOS_14_5 = (int) 140500L;

    /**
     * {@snippet lang = c : * #define __TVOS_14_5 140500
     * }
     */
    public static int __TVOS_14_5() {
        return __TVOS_14_5;
    }

    private static final int __TVOS_14_6 = (int) 140600L;

    /**
     * {@snippet lang = c : * #define __TVOS_14_6 140600
     * }
     */
    public static int __TVOS_14_6() {
        return __TVOS_14_6;
    }

    private static final int __TVOS_14_7 = (int) 140700L;

    /**
     * {@snippet lang = c : * #define __TVOS_14_7 140700
     * }
     */
    public static int __TVOS_14_7() {
        return __TVOS_14_7;
    }

    private static final int __TVOS_15_0 = (int) 150000L;

    /**
     * {@snippet lang = c : * #define __TVOS_15_0 150000
     * }
     */
    public static int __TVOS_15_0() {
        return __TVOS_15_0;
    }

    private static final int __TVOS_15_1 = (int) 150100L;

    /**
     * {@snippet lang = c : * #define __TVOS_15_1 150100
     * }
     */
    public static int __TVOS_15_1() {
        return __TVOS_15_1;
    }

    private static final int __TVOS_15_2 = (int) 150200L;

    /**
     * {@snippet lang = c : * #define __TVOS_15_2 150200
     * }
     */
    public static int __TVOS_15_2() {
        return __TVOS_15_2;
    }

    private static final int __TVOS_15_3 = (int) 150300L;

    /**
     * {@snippet lang = c : * #define __TVOS_15_3 150300
     * }
     */
    public static int __TVOS_15_3() {
        return __TVOS_15_3;
    }

    private static final int __TVOS_15_4 = (int) 150400L;

    /**
     * {@snippet lang = c : * #define __TVOS_15_4 150400
     * }
     */
    public static int __TVOS_15_4() {
        return __TVOS_15_4;
    }

    private static final int __TVOS_15_5 = (int) 150500L;

    /**
     * {@snippet lang = c : * #define __TVOS_15_5 150500
     * }
     */
    public static int __TVOS_15_5() {
        return __TVOS_15_5;
    }

    private static final int __TVOS_15_6 = (int) 150600L;

    /**
     * {@snippet lang = c : * #define __TVOS_15_6 150600
     * }
     */
    public static int __TVOS_15_6() {
        return __TVOS_15_6;
    }

    private static final int __TVOS_16_0 = (int) 160000L;

    /**
     * {@snippet lang = c : * #define __TVOS_16_0 160000
     * }
     */
    public static int __TVOS_16_0() {
        return __TVOS_16_0;
    }

    private static final int __TVOS_16_1 = (int) 160100L;

    /**
     * {@snippet lang = c : * #define __TVOS_16_1 160100
     * }
     */
    public static int __TVOS_16_1() {
        return __TVOS_16_1;
    }

    private static final int __TVOS_16_2 = (int) 160200L;

    /**
     * {@snippet lang = c : * #define __TVOS_16_2 160200
     * }
     */
    public static int __TVOS_16_2() {
        return __TVOS_16_2;
    }

    private static final int __TVOS_16_3 = (int) 160300L;

    /**
     * {@snippet lang = c : * #define __TVOS_16_3 160300
     * }
     */
    public static int __TVOS_16_3() {
        return __TVOS_16_3;
    }

    private static final int __TVOS_16_4 = (int) 160400L;

    /**
     * {@snippet lang = c : * #define __TVOS_16_4 160400
     * }
     */
    public static int __TVOS_16_4() {
        return __TVOS_16_4;
    }

    private static final int __TVOS_16_5 = (int) 160500L;

    /**
     * {@snippet lang = c : * #define __TVOS_16_5 160500
     * }
     */
    public static int __TVOS_16_5() {
        return __TVOS_16_5;
    }

    private static final int __TVOS_16_6 = (int) 160600L;

    /**
     * {@snippet lang = c : * #define __TVOS_16_6 160600
     * }
     */
    public static int __TVOS_16_6() {
        return __TVOS_16_6;
    }

    private static final int __TVOS_17_0 = (int) 170000L;

    /**
     * {@snippet lang = c : * #define __TVOS_17_0 170000
     * }
     */
    public static int __TVOS_17_0() {
        return __TVOS_17_0;
    }

    private static final int __TVOS_17_1 = (int) 170100L;

    /**
     * {@snippet lang = c : * #define __TVOS_17_1 170100
     * }
     */
    public static int __TVOS_17_1() {
        return __TVOS_17_1;
    }

    private static final int __TVOS_17_2 = (int) 170200L;

    /**
     * {@snippet lang = c : * #define __TVOS_17_2 170200
     * }
     */
    public static int __TVOS_17_2() {
        return __TVOS_17_2;
    }

    private static final int __TVOS_17_3 = (int) 170300L;

    /**
     * {@snippet lang = c : * #define __TVOS_17_3 170300
     * }
     */
    public static int __TVOS_17_3() {
        return __TVOS_17_3;
    }

    private static final int __TVOS_17_4 = (int) 170400L;

    /**
     * {@snippet lang = c : * #define __TVOS_17_4 170400
     * }
     */
    public static int __TVOS_17_4() {
        return __TVOS_17_4;
    }

    private static final int __TVOS_17_5 = (int) 170500L;

    /**
     * {@snippet lang = c : * #define __TVOS_17_5 170500
     * }
     */
    public static int __TVOS_17_5() {
        return __TVOS_17_5;
    }

    private static final int __TVOS_17_6 = (int) 170600L;

    /**
     * {@snippet lang = c : * #define __TVOS_17_6 170600
     * }
     */
    public static int __TVOS_17_6() {
        return __TVOS_17_6;
    }

    private static final int __TVOS_18_0 = (int) 180000L;

    /**
     * {@snippet lang = c : * #define __TVOS_18_0 180000
     * }
     */
    public static int __TVOS_18_0() {
        return __TVOS_18_0;
    }

    private static final int __TVOS_18_1 = (int) 180100L;

    /**
     * {@snippet lang = c : * #define __TVOS_18_1 180100
     * }
     */
    public static int __TVOS_18_1() {
        return __TVOS_18_1;
    }

    private static final int __TVOS_18_2 = (int) 180200L;

    /**
     * {@snippet lang = c : * #define __TVOS_18_2 180200
     * }
     */
    public static int __TVOS_18_2() {
        return __TVOS_18_2;
    }

    private static final int __TVOS_18_3 = (int) 180300L;

    /**
     * {@snippet lang = c : * #define __TVOS_18_3 180300
     * }
     */
    public static int __TVOS_18_3() {
        return __TVOS_18_3;
    }

    private static final int __TVOS_18_4 = (int) 180400L;

    /**
     * {@snippet lang = c : * #define __TVOS_18_4 180400
     * }
     */
    public static int __TVOS_18_4() {
        return __TVOS_18_4;
    }

    private static final int __TVOS_18_5 = (int) 180500L;

    /**
     * {@snippet lang = c : * #define __TVOS_18_5 180500
     * }
     */
    public static int __TVOS_18_5() {
        return __TVOS_18_5;
    }

    private static final int __BRIDGEOS_2_0 = (int) 20000L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_2_0 20000
     * }
     */
    public static int __BRIDGEOS_2_0() {
        return __BRIDGEOS_2_0;
    }

    private static final int __BRIDGEOS_3_0 = (int) 30000L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_3_0 30000
     * }
     */
    public static int __BRIDGEOS_3_0() {
        return __BRIDGEOS_3_0;
    }

    private static final int __BRIDGEOS_3_1 = (int) 30100L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_3_1 30100
     * }
     */
    public static int __BRIDGEOS_3_1() {
        return __BRIDGEOS_3_1;
    }

    private static final int __BRIDGEOS_3_4 = (int) 30400L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_3_4 30400
     * }
     */
    public static int __BRIDGEOS_3_4() {
        return __BRIDGEOS_3_4;
    }

    private static final int __BRIDGEOS_4_0 = (int) 40000L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_4_0 40000
     * }
     */
    public static int __BRIDGEOS_4_0() {
        return __BRIDGEOS_4_0;
    }

    private static final int __BRIDGEOS_4_1 = (int) 40100L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_4_1 40100
     * }
     */
    public static int __BRIDGEOS_4_1() {
        return __BRIDGEOS_4_1;
    }

    private static final int __BRIDGEOS_5_0 = (int) 50000L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_5_0 50000
     * }
     */
    public static int __BRIDGEOS_5_0() {
        return __BRIDGEOS_5_0;
    }

    private static final int __BRIDGEOS_5_1 = (int) 50100L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_5_1 50100
     * }
     */
    public static int __BRIDGEOS_5_1() {
        return __BRIDGEOS_5_1;
    }

    private static final int __BRIDGEOS_5_3 = (int) 50300L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_5_3 50300
     * }
     */
    public static int __BRIDGEOS_5_3() {
        return __BRIDGEOS_5_3;
    }

    private static final int __BRIDGEOS_6_0 = (int) 60000L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_6_0 60000
     * }
     */
    public static int __BRIDGEOS_6_0() {
        return __BRIDGEOS_6_0;
    }

    private static final int __BRIDGEOS_6_2 = (int) 60200L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_6_2 60200
     * }
     */
    public static int __BRIDGEOS_6_2() {
        return __BRIDGEOS_6_2;
    }

    private static final int __BRIDGEOS_6_4 = (int) 60400L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_6_4 60400
     * }
     */
    public static int __BRIDGEOS_6_4() {
        return __BRIDGEOS_6_4;
    }

    private static final int __BRIDGEOS_6_5 = (int) 60500L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_6_5 60500
     * }
     */
    public static int __BRIDGEOS_6_5() {
        return __BRIDGEOS_6_5;
    }

    private static final int __BRIDGEOS_6_6 = (int) 60600L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_6_6 60600
     * }
     */
    public static int __BRIDGEOS_6_6() {
        return __BRIDGEOS_6_6;
    }

    private static final int __BRIDGEOS_7_0 = (int) 70000L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_7_0 70000
     * }
     */
    public static int __BRIDGEOS_7_0() {
        return __BRIDGEOS_7_0;
    }

    private static final int __BRIDGEOS_7_1 = (int) 70100L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_7_1 70100
     * }
     */
    public static int __BRIDGEOS_7_1() {
        return __BRIDGEOS_7_1;
    }

    private static final int __BRIDGEOS_7_2 = (int) 70200L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_7_2 70200
     * }
     */
    public static int __BRIDGEOS_7_2() {
        return __BRIDGEOS_7_2;
    }

    private static final int __BRIDGEOS_7_3 = (int) 70300L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_7_3 70300
     * }
     */
    public static int __BRIDGEOS_7_3() {
        return __BRIDGEOS_7_3;
    }

    private static final int __BRIDGEOS_7_4 = (int) 70400L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_7_4 70400
     * }
     */
    public static int __BRIDGEOS_7_4() {
        return __BRIDGEOS_7_4;
    }

    private static final int __BRIDGEOS_7_6 = (int) 70600L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_7_6 70600
     * }
     */
    public static int __BRIDGEOS_7_6() {
        return __BRIDGEOS_7_6;
    }

    private static final int __BRIDGEOS_8_0 = (int) 80000L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_8_0 80000
     * }
     */
    public static int __BRIDGEOS_8_0() {
        return __BRIDGEOS_8_0;
    }

    private static final int __BRIDGEOS_8_1 = (int) 80100L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_8_1 80100
     * }
     */
    public static int __BRIDGEOS_8_1() {
        return __BRIDGEOS_8_1;
    }

    private static final int __BRIDGEOS_8_2 = (int) 80200L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_8_2 80200
     * }
     */
    public static int __BRIDGEOS_8_2() {
        return __BRIDGEOS_8_2;
    }

    private static final int __BRIDGEOS_8_3 = (int) 80300L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_8_3 80300
     * }
     */
    public static int __BRIDGEOS_8_3() {
        return __BRIDGEOS_8_3;
    }

    private static final int __BRIDGEOS_8_4 = (int) 80400L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_8_4 80400
     * }
     */
    public static int __BRIDGEOS_8_4() {
        return __BRIDGEOS_8_4;
    }

    private static final int __BRIDGEOS_8_5 = (int) 80500L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_8_5 80500
     * }
     */
    public static int __BRIDGEOS_8_5() {
        return __BRIDGEOS_8_5;
    }

    private static final int __BRIDGEOS_8_6 = (int) 80600L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_8_6 80600
     * }
     */
    public static int __BRIDGEOS_8_6() {
        return __BRIDGEOS_8_6;
    }

    private static final int __BRIDGEOS_9_0 = (int) 90000L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_9_0 90000
     * }
     */
    public static int __BRIDGEOS_9_0() {
        return __BRIDGEOS_9_0;
    }

    private static final int __BRIDGEOS_9_1 = (int) 90100L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_9_1 90100
     * }
     */
    public static int __BRIDGEOS_9_1() {
        return __BRIDGEOS_9_1;
    }

    private static final int __BRIDGEOS_9_2 = (int) 90200L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_9_2 90200
     * }
     */
    public static int __BRIDGEOS_9_2() {
        return __BRIDGEOS_9_2;
    }

    private static final int __BRIDGEOS_9_3 = (int) 90300L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_9_3 90300
     * }
     */
    public static int __BRIDGEOS_9_3() {
        return __BRIDGEOS_9_3;
    }

    private static final int __BRIDGEOS_9_4 = (int) 90400L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_9_4 90400
     * }
     */
    public static int __BRIDGEOS_9_4() {
        return __BRIDGEOS_9_4;
    }

    private static final int __BRIDGEOS_9_5 = (int) 90500L;

    /**
     * {@snippet lang = c : * #define __BRIDGEOS_9_5 90500
     * }
     */
    public static int __BRIDGEOS_9_5() {
        return __BRIDGEOS_9_5;
    }

    private static final int __DRIVERKIT_19_0 = (int) 190000L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_19_0 190000
     * }
     */
    public static int __DRIVERKIT_19_0() {
        return __DRIVERKIT_19_0;
    }

    private static final int __DRIVERKIT_20_0 = (int) 200000L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_20_0 200000
     * }
     */
    public static int __DRIVERKIT_20_0() {
        return __DRIVERKIT_20_0;
    }

    private static final int __DRIVERKIT_21_0 = (int) 210000L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_21_0 210000
     * }
     */
    public static int __DRIVERKIT_21_0() {
        return __DRIVERKIT_21_0;
    }

    private static final int __DRIVERKIT_22_0 = (int) 220000L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_22_0 220000
     * }
     */
    public static int __DRIVERKIT_22_0() {
        return __DRIVERKIT_22_0;
    }

    private static final int __DRIVERKIT_22_4 = (int) 220400L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_22_4 220400
     * }
     */
    public static int __DRIVERKIT_22_4() {
        return __DRIVERKIT_22_4;
    }

    private static final int __DRIVERKIT_22_5 = (int) 220500L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_22_5 220500
     * }
     */
    public static int __DRIVERKIT_22_5() {
        return __DRIVERKIT_22_5;
    }

    private static final int __DRIVERKIT_22_6 = (int) 220600L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_22_6 220600
     * }
     */
    public static int __DRIVERKIT_22_6() {
        return __DRIVERKIT_22_6;
    }

    private static final int __DRIVERKIT_23_0 = (int) 230000L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_23_0 230000
     * }
     */
    public static int __DRIVERKIT_23_0() {
        return __DRIVERKIT_23_0;
    }

    private static final int __DRIVERKIT_23_1 = (int) 230100L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_23_1 230100
     * }
     */
    public static int __DRIVERKIT_23_1() {
        return __DRIVERKIT_23_1;
    }

    private static final int __DRIVERKIT_23_2 = (int) 230200L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_23_2 230200
     * }
     */
    public static int __DRIVERKIT_23_2() {
        return __DRIVERKIT_23_2;
    }

    private static final int __DRIVERKIT_23_3 = (int) 230300L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_23_3 230300
     * }
     */
    public static int __DRIVERKIT_23_3() {
        return __DRIVERKIT_23_3;
    }

    private static final int __DRIVERKIT_23_4 = (int) 230400L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_23_4 230400
     * }
     */
    public static int __DRIVERKIT_23_4() {
        return __DRIVERKIT_23_4;
    }

    private static final int __DRIVERKIT_23_5 = (int) 230500L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_23_5 230500
     * }
     */
    public static int __DRIVERKIT_23_5() {
        return __DRIVERKIT_23_5;
    }

    private static final int __DRIVERKIT_23_6 = (int) 230600L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_23_6 230600
     * }
     */
    public static int __DRIVERKIT_23_6() {
        return __DRIVERKIT_23_6;
    }

    private static final int __DRIVERKIT_24_0 = (int) 240000L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_24_0 240000
     * }
     */
    public static int __DRIVERKIT_24_0() {
        return __DRIVERKIT_24_0;
    }

    private static final int __DRIVERKIT_24_1 = (int) 240100L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_24_1 240100
     * }
     */
    public static int __DRIVERKIT_24_1() {
        return __DRIVERKIT_24_1;
    }

    private static final int __DRIVERKIT_24_2 = (int) 240200L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_24_2 240200
     * }
     */
    public static int __DRIVERKIT_24_2() {
        return __DRIVERKIT_24_2;
    }

    private static final int __DRIVERKIT_24_3 = (int) 240300L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_24_3 240300
     * }
     */
    public static int __DRIVERKIT_24_3() {
        return __DRIVERKIT_24_3;
    }

    private static final int __DRIVERKIT_24_4 = (int) 240400L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_24_4 240400
     * }
     */
    public static int __DRIVERKIT_24_4() {
        return __DRIVERKIT_24_4;
    }

    private static final int __DRIVERKIT_24_5 = (int) 240500L;

    /**
     * {@snippet lang = c : * #define __DRIVERKIT_24_5 240500
     * }
     */
    public static int __DRIVERKIT_24_5() {
        return __DRIVERKIT_24_5;
    }

    private static final int __VISIONOS_1_0 = (int) 10000L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_1_0 10000
     * }
     */
    public static int __VISIONOS_1_0() {
        return __VISIONOS_1_0;
    }

    private static final int __VISIONOS_1_1 = (int) 10100L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_1_1 10100
     * }
     */
    public static int __VISIONOS_1_1() {
        return __VISIONOS_1_1;
    }

    private static final int __VISIONOS_1_2 = (int) 10200L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_1_2 10200
     * }
     */
    public static int __VISIONOS_1_2() {
        return __VISIONOS_1_2;
    }

    private static final int __VISIONOS_1_3 = (int) 10300L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_1_3 10300
     * }
     */
    public static int __VISIONOS_1_3() {
        return __VISIONOS_1_3;
    }

    private static final int __VISIONOS_2_0 = (int) 20000L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_2_0 20000
     * }
     */
    public static int __VISIONOS_2_0() {
        return __VISIONOS_2_0;
    }

    private static final int __VISIONOS_2_1 = (int) 20100L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_2_1 20100
     * }
     */
    public static int __VISIONOS_2_1() {
        return __VISIONOS_2_1;
    }

    private static final int __VISIONOS_2_2 = (int) 20200L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_2_2 20200
     * }
     */
    public static int __VISIONOS_2_2() {
        return __VISIONOS_2_2;
    }

    private static final int __VISIONOS_2_3 = (int) 20300L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_2_3 20300
     * }
     */
    public static int __VISIONOS_2_3() {
        return __VISIONOS_2_3;
    }

    private static final int __VISIONOS_2_4 = (int) 20400L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_2_4 20400
     * }
     */
    public static int __VISIONOS_2_4() {
        return __VISIONOS_2_4;
    }

    private static final int __VISIONOS_2_5 = (int) 20500L;

    /**
     * {@snippet lang = c : * #define __VISIONOS_2_5 20500
     * }
     */
    public static int __VISIONOS_2_5() {
        return __VISIONOS_2_5;
    }

    private static final int __ENABLE_LEGACY_MAC_AVAILABILITY = (int) 1L;

    /**
     * {@snippet lang = c : * #define __ENABLE_LEGACY_MAC_AVAILABILITY 1
     * }
     */
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return __ENABLE_LEGACY_MAC_AVAILABILITY;
    }

    private static final int FP_NAN = (int) 1L;

    /**
     * {@snippet lang = c : * #define FP_NAN 1
     * }
     */
    public static int FP_NAN() {
        return FP_NAN;
    }

    private static final int FP_INFINITE = (int) 2L;

    /**
     * {@snippet lang = c : * #define FP_INFINITE 2
     * }
     */
    public static int FP_INFINITE() {
        return FP_INFINITE;
    }

    private static final int FP_ZERO = (int) 3L;

    /**
     * {@snippet lang = c : * #define FP_ZERO 3
     * }
     */
    public static int FP_ZERO() {
        return FP_ZERO;
    }

    private static final int FP_NORMAL = (int) 4L;

    /**
     * {@snippet lang = c : * #define FP_NORMAL 4
     * }
     */
    public static int FP_NORMAL() {
        return FP_NORMAL;
    }

    private static final int FP_SUBNORMAL = (int) 5L;

    /**
     * {@snippet lang = c : * #define FP_SUBNORMAL 5
     * }
     */
    public static int FP_SUBNORMAL() {
        return FP_SUBNORMAL;
    }

    private static final int FP_SUPERNORMAL = (int) 6L;

    /**
     * {@snippet lang = c : * #define FP_SUPERNORMAL 6
     * }
     */
    public static int FP_SUPERNORMAL() {
        return FP_SUPERNORMAL;
    }

    private static final int FP_FAST_FMA = (int) 1L;

    /**
     * {@snippet lang = c : * #define FP_FAST_FMA 1
     * }
     */
    public static int FP_FAST_FMA() {
        return FP_FAST_FMA;
    }

    private static final int FP_FAST_FMAF = (int) 1L;

    /**
     * {@snippet lang = c : * #define FP_FAST_FMAF 1
     * }
     */
    public static int FP_FAST_FMAF() {
        return FP_FAST_FMAF;
    }

    private static final int FP_FAST_FMAL = (int) 1L;

    /**
     * {@snippet lang = c : * #define FP_FAST_FMAL 1
     * }
     */
    public static int FP_FAST_FMAL() {
        return FP_FAST_FMAL;
    }

    private static final int MATH_ERRNO = (int) 1L;

    /**
     * {@snippet lang = c : * #define MATH_ERRNO 1
     * }
     */
    public static int MATH_ERRNO() {
        return MATH_ERRNO;
    }

    private static final int MATH_ERREXCEPT = (int) 2L;

    /**
     * {@snippet lang = c : * #define MATH_ERREXCEPT 2
     * }
     */
    public static int MATH_ERREXCEPT() {
        return MATH_ERREXCEPT;
    }

    private static final int DOMAIN = (int) 1L;

    /**
     * {@snippet lang = c : * #define DOMAIN 1
     * }
     */
    public static int DOMAIN() {
        return DOMAIN;
    }

    private static final int SING = (int) 2L;

    /**
     * {@snippet lang = c : * #define SING 2
     * }
     */
    public static int SING() {
        return SING;
    }

    private static final int OVERFLOW = (int) 3L;

    /**
     * {@snippet lang = c : * #define OVERFLOW 3
     * }
     */
    public static int OVERFLOW() {
        return OVERFLOW;
    }

    private static final int UNDERFLOW = (int) 4L;

    /**
     * {@snippet lang = c : * #define UNDERFLOW 4
     * }
     */
    public static int UNDERFLOW() {
        return UNDERFLOW;
    }

    private static final int TLOSS = (int) 5L;

    /**
     * {@snippet lang = c : * #define TLOSS 5
     * }
     */
    public static int TLOSS() {
        return TLOSS;
    }

    private static final int PLOSS = (int) 6L;

    /**
     * {@snippet lang = c : * #define PLOSS 6
     * }
     */
    public static int PLOSS() {
        return PLOSS;
    }

    /**
     * {@snippet lang = c : * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang = c : * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang = c : * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang = c : * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang = c : * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang = c : * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang = c : * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang = c : * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang = c : * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang = c : * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang = c : * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang = c : * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang = c : * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang = c : * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = webgpu_h.C_CHAR;
    /**
     * {@snippet lang = c : * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang = c : * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang = c : * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = webgpu_h.C_SHORT;
    /**
     * {@snippet lang = c : * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef unsigned long rsize_t
     * }
     */
    public static final OfLong rsize_t = webgpu_h.C_LONG;
    /**
     * {@snippet lang = c : * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef float float_t
     * }
     */
    public static final OfFloat float_t = webgpu_h.C_FLOAT;
    /**
     * {@snippet lang = c : * typedef double double_t
     * }
     */
    public static final OfDouble double_t = webgpu_h.C_DOUBLE;

    private static class __math_errhandling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__math_errhandling");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern int __math_errhandling()
     * }
     */
    public static FunctionDescriptor __math_errhandling$descriptor() {
        return __math_errhandling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern int __math_errhandling()
     * }
     */
    public static MethodHandle __math_errhandling$handle() {
        return __math_errhandling.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern int __math_errhandling()
     * }
     */
    public static MemorySegment __math_errhandling$address() {
        return __math_errhandling.ADDR;
    }

    /**
     * {@snippet lang = c : * extern int __math_errhandling()
     * }
     */
    public static int __math_errhandling() {
        var mh$ = __math_errhandling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__math_errhandling");
            }
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fpclassifyf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fpclassifyf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern int __fpclassifyf(float)
     * }
     */
    public static FunctionDescriptor __fpclassifyf$descriptor() {
        return __fpclassifyf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern int __fpclassifyf(float)
     * }
     */
    public static MethodHandle __fpclassifyf$handle() {
        return __fpclassifyf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern int __fpclassifyf(float)
     * }
     */
    public static MemorySegment __fpclassifyf$address() {
        return __fpclassifyf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern int __fpclassifyf(float)
     * }
     */
    public static int __fpclassifyf(float x0) {
        var mh$ = __fpclassifyf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fpclassifyf", x0);
            }
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __fpclassifyd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__fpclassifyd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern int __fpclassifyd(double)
     * }
     */
    public static FunctionDescriptor __fpclassifyd$descriptor() {
        return __fpclassifyd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern int __fpclassifyd(double)
     * }
     */
    public static MethodHandle __fpclassifyd$handle() {
        return __fpclassifyd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern int __fpclassifyd(double)
     * }
     */
    public static MemorySegment __fpclassifyd$address() {
        return __fpclassifyd.ADDR;
    }

    /**
     * {@snippet lang = c : * extern int __fpclassifyd(double)
     * }
     */
    public static int __fpclassifyd(double x0) {
        var mh$ = __fpclassifyd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fpclassifyd", x0);
            }
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class acosf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("acosf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float acosf(float)
     * }
     */
    public static FunctionDescriptor acosf$descriptor() {
        return acosf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float acosf(float)
     * }
     */
    public static MethodHandle acosf$handle() {
        return acosf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float acosf(float)
     * }
     */
    public static MemorySegment acosf$address() {
        return acosf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float acosf(float)
     * }
     */
    public static float acosf(float x0) {
        var mh$ = acosf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("acosf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class acos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("acos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double acos(double)
     * }
     */
    public static FunctionDescriptor acos$descriptor() {
        return acos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double acos(double)
     * }
     */
    public static MethodHandle acos$handle() {
        return acos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double acos(double)
     * }
     */
    public static MemorySegment acos$address() {
        return acos.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double acos(double)
     * }
     */
    public static double acos(double x0) {
        var mh$ = acos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("acos", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asinf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("asinf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float asinf(float)
     * }
     */
    public static FunctionDescriptor asinf$descriptor() {
        return asinf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float asinf(float)
     * }
     */
    public static MethodHandle asinf$handle() {
        return asinf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float asinf(float)
     * }
     */
    public static MemorySegment asinf$address() {
        return asinf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float asinf(float)
     * }
     */
    public static float asinf(float x0) {
        var mh$ = asinf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asinf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("asin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double asin(double)
     * }
     */
    public static FunctionDescriptor asin$descriptor() {
        return asin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double asin(double)
     * }
     */
    public static MethodHandle asin$handle() {
        return asin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double asin(double)
     * }
     */
    public static MemorySegment asin$address() {
        return asin.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double asin(double)
     * }
     */
    public static double asin(double x0) {
        var mh$ = asin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asin", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float atanf(float)
     * }
     */
    public static FunctionDescriptor atanf$descriptor() {
        return atanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float atanf(float)
     * }
     */
    public static MethodHandle atanf$handle() {
        return atanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float atanf(float)
     * }
     */
    public static MemorySegment atanf$address() {
        return atanf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float atanf(float)
     * }
     */
    public static float atanf(float x0) {
        var mh$ = atanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atanf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double atan(double)
     * }
     */
    public static FunctionDescriptor atan$descriptor() {
        return atan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double atan(double)
     * }
     */
    public static MethodHandle atan$handle() {
        return atan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double atan(double)
     * }
     */
    public static MemorySegment atan$address() {
        return atan.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double atan(double)
     * }
     */
    public static double atan(double x0) {
        var mh$ = atan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atan", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atan2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atan2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float atan2f(float, float)
     * }
     */
    public static FunctionDescriptor atan2f$descriptor() {
        return atan2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float atan2f(float, float)
     * }
     */
    public static MethodHandle atan2f$handle() {
        return atan2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float atan2f(float, float)
     * }
     */
    public static MemorySegment atan2f$address() {
        return atan2f.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float atan2f(float, float)
     * }
     */
    public static float atan2f(float x0, float x1) {
        var mh$ = atan2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atan2f", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atan2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atan2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double atan2(double, double)
     * }
     */
    public static FunctionDescriptor atan2$descriptor() {
        return atan2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double atan2(double, double)
     * }
     */
    public static MethodHandle atan2$handle() {
        return atan2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double atan2(double, double)
     * }
     */
    public static MemorySegment atan2$address() {
        return atan2.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double atan2(double, double)
     * }
     */
    public static double atan2(double x0, double x1) {
        var mh$ = atan2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atan2", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cosf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cosf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float cosf(float)
     * }
     */
    public static FunctionDescriptor cosf$descriptor() {
        return cosf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float cosf(float)
     * }
     */
    public static MethodHandle cosf$handle() {
        return cosf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float cosf(float)
     * }
     */
    public static MemorySegment cosf$address() {
        return cosf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float cosf(float)
     * }
     */
    public static float cosf(float x0) {
        var mh$ = cosf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cosf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double cos(double)
     * }
     */
    public static FunctionDescriptor cos$descriptor() {
        return cos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double cos(double)
     * }
     */
    public static MethodHandle cos$handle() {
        return cos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double cos(double)
     * }
     */
    public static MemorySegment cos$address() {
        return cos.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double cos(double)
     * }
     */
    public static double cos(double x0) {
        var mh$ = cos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cos", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sinf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sinf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float sinf(float)
     * }
     */
    public static FunctionDescriptor sinf$descriptor() {
        return sinf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float sinf(float)
     * }
     */
    public static MethodHandle sinf$handle() {
        return sinf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float sinf(float)
     * }
     */
    public static MemorySegment sinf$address() {
        return sinf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float sinf(float)
     * }
     */
    public static float sinf(float x0) {
        var mh$ = sinf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sinf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double sin(double)
     * }
     */
    public static FunctionDescriptor sin$descriptor() {
        return sin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double sin(double)
     * }
     */
    public static MethodHandle sin$handle() {
        return sin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double sin(double)
     * }
     */
    public static MemorySegment sin$address() {
        return sin.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double sin(double)
     * }
     */
    public static double sin(double x0) {
        var mh$ = sin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sin", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float tanf(float)
     * }
     */
    public static FunctionDescriptor tanf$descriptor() {
        return tanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float tanf(float)
     * }
     */
    public static MethodHandle tanf$handle() {
        return tanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float tanf(float)
     * }
     */
    public static MemorySegment tanf$address() {
        return tanf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float tanf(float)
     * }
     */
    public static float tanf(float x0) {
        var mh$ = tanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tanf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double tan(double)
     * }
     */
    public static FunctionDescriptor tan$descriptor() {
        return tan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double tan(double)
     * }
     */
    public static MethodHandle tan$handle() {
        return tan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double tan(double)
     * }
     */
    public static MemorySegment tan$address() {
        return tan.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double tan(double)
     * }
     */
    public static double tan(double x0) {
        var mh$ = tan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tan", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class acoshf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("acoshf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float acoshf(float)
     * }
     */
    public static FunctionDescriptor acoshf$descriptor() {
        return acoshf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float acoshf(float)
     * }
     */
    public static MethodHandle acoshf$handle() {
        return acoshf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float acoshf(float)
     * }
     */
    public static MemorySegment acoshf$address() {
        return acoshf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float acoshf(float)
     * }
     */
    public static float acoshf(float x0) {
        var mh$ = acoshf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("acoshf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class acosh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("acosh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double acosh(double)
     * }
     */
    public static FunctionDescriptor acosh$descriptor() {
        return acosh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double acosh(double)
     * }
     */
    public static MethodHandle acosh$handle() {
        return acosh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double acosh(double)
     * }
     */
    public static MemorySegment acosh$address() {
        return acosh.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double acosh(double)
     * }
     */
    public static double acosh(double x0) {
        var mh$ = acosh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("acosh", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asinhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("asinhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float asinhf(float)
     * }
     */
    public static FunctionDescriptor asinhf$descriptor() {
        return asinhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float asinhf(float)
     * }
     */
    public static MethodHandle asinhf$handle() {
        return asinhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float asinhf(float)
     * }
     */
    public static MemorySegment asinhf$address() {
        return asinhf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float asinhf(float)
     * }
     */
    public static float asinhf(float x0) {
        var mh$ = asinhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asinhf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asinh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("asinh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double asinh(double)
     * }
     */
    public static FunctionDescriptor asinh$descriptor() {
        return asinh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double asinh(double)
     * }
     */
    public static MethodHandle asinh$handle() {
        return asinh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double asinh(double)
     * }
     */
    public static MemorySegment asinh$address() {
        return asinh.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double asinh(double)
     * }
     */
    public static double asinh(double x0) {
        var mh$ = asinh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asinh", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atanhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atanhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float atanhf(float)
     * }
     */
    public static FunctionDescriptor atanhf$descriptor() {
        return atanhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float atanhf(float)
     * }
     */
    public static MethodHandle atanhf$handle() {
        return atanhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float atanhf(float)
     * }
     */
    public static MemorySegment atanhf$address() {
        return atanhf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float atanhf(float)
     * }
     */
    public static float atanhf(float x0) {
        var mh$ = atanhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atanhf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atanh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("atanh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double atanh(double)
     * }
     */
    public static FunctionDescriptor atanh$descriptor() {
        return atanh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double atanh(double)
     * }
     */
    public static MethodHandle atanh$handle() {
        return atanh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double atanh(double)
     * }
     */
    public static MemorySegment atanh$address() {
        return atanh.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double atanh(double)
     * }
     */
    public static double atanh(double x0) {
        var mh$ = atanh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atanh", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class coshf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("coshf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float coshf(float)
     * }
     */
    public static FunctionDescriptor coshf$descriptor() {
        return coshf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float coshf(float)
     * }
     */
    public static MethodHandle coshf$handle() {
        return coshf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float coshf(float)
     * }
     */
    public static MemorySegment coshf$address() {
        return coshf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float coshf(float)
     * }
     */
    public static float coshf(float x0) {
        var mh$ = coshf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("coshf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cosh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cosh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double cosh(double)
     * }
     */
    public static FunctionDescriptor cosh$descriptor() {
        return cosh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double cosh(double)
     * }
     */
    public static MethodHandle cosh$handle() {
        return cosh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double cosh(double)
     * }
     */
    public static MemorySegment cosh$address() {
        return cosh.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double cosh(double)
     * }
     */
    public static double cosh(double x0) {
        var mh$ = cosh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cosh", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sinhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sinhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float sinhf(float)
     * }
     */
    public static FunctionDescriptor sinhf$descriptor() {
        return sinhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float sinhf(float)
     * }
     */
    public static MethodHandle sinhf$handle() {
        return sinhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float sinhf(float)
     * }
     */
    public static MemorySegment sinhf$address() {
        return sinhf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float sinhf(float)
     * }
     */
    public static float sinhf(float x0) {
        var mh$ = sinhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sinhf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sinh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sinh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double sinh(double)
     * }
     */
    public static FunctionDescriptor sinh$descriptor() {
        return sinh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double sinh(double)
     * }
     */
    public static MethodHandle sinh$handle() {
        return sinh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double sinh(double)
     * }
     */
    public static MemorySegment sinh$address() {
        return sinh.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double sinh(double)
     * }
     */
    public static double sinh(double x0) {
        var mh$ = sinh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sinh", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tanhf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tanhf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float tanhf(float)
     * }
     */
    public static FunctionDescriptor tanhf$descriptor() {
        return tanhf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float tanhf(float)
     * }
     */
    public static MethodHandle tanhf$handle() {
        return tanhf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float tanhf(float)
     * }
     */
    public static MemorySegment tanhf$address() {
        return tanhf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float tanhf(float)
     * }
     */
    public static float tanhf(float x0) {
        var mh$ = tanhf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tanhf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tanh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tanh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double tanh(double)
     * }
     */
    public static FunctionDescriptor tanh$descriptor() {
        return tanh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double tanh(double)
     * }
     */
    public static MethodHandle tanh$handle() {
        return tanh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double tanh(double)
     * }
     */
    public static MemorySegment tanh$address() {
        return tanh.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double tanh(double)
     * }
     */
    public static double tanh(double x0) {
        var mh$ = tanh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tanh", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class expf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("expf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float expf(float)
     * }
     */
    public static FunctionDescriptor expf$descriptor() {
        return expf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float expf(float)
     * }
     */
    public static MethodHandle expf$handle() {
        return expf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float expf(float)
     * }
     */
    public static MemorySegment expf$address() {
        return expf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float expf(float)
     * }
     */
    public static float expf(float x0) {
        var mh$ = expf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("expf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double exp(double)
     * }
     */
    public static FunctionDescriptor exp$descriptor() {
        return exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double exp(double)
     * }
     */
    public static MethodHandle exp$handle() {
        return exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double exp(double)
     * }
     */
    public static MemorySegment exp$address() {
        return exp.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double exp(double)
     * }
     */
    public static double exp(double x0) {
        var mh$ = exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exp", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exp2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("exp2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float exp2f(float)
     * }
     */
    public static FunctionDescriptor exp2f$descriptor() {
        return exp2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float exp2f(float)
     * }
     */
    public static MethodHandle exp2f$handle() {
        return exp2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float exp2f(float)
     * }
     */
    public static MemorySegment exp2f$address() {
        return exp2f.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float exp2f(float)
     * }
     */
    public static float exp2f(float x0) {
        var mh$ = exp2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exp2f", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exp2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("exp2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double exp2(double)
     * }
     */
    public static FunctionDescriptor exp2$descriptor() {
        return exp2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double exp2(double)
     * }
     */
    public static MethodHandle exp2$handle() {
        return exp2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double exp2(double)
     * }
     */
    public static MemorySegment exp2$address() {
        return exp2.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double exp2(double)
     * }
     */
    public static double exp2(double x0) {
        var mh$ = exp2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exp2", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class expm1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("expm1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float expm1f(float)
     * }
     */
    public static FunctionDescriptor expm1f$descriptor() {
        return expm1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float expm1f(float)
     * }
     */
    public static MethodHandle expm1f$handle() {
        return expm1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float expm1f(float)
     * }
     */
    public static MemorySegment expm1f$address() {
        return expm1f.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float expm1f(float)
     * }
     */
    public static float expm1f(float x0) {
        var mh$ = expm1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("expm1f", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class expm1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("expm1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double expm1(double)
     * }
     */
    public static FunctionDescriptor expm1$descriptor() {
        return expm1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double expm1(double)
     * }
     */
    public static MethodHandle expm1$handle() {
        return expm1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double expm1(double)
     * }
     */
    public static MemorySegment expm1$address() {
        return expm1.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double expm1(double)
     * }
     */
    public static double expm1(double x0) {
        var mh$ = expm1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("expm1", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class logf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("logf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float logf(float)
     * }
     */
    public static FunctionDescriptor logf$descriptor() {
        return logf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float logf(float)
     * }
     */
    public static MethodHandle logf$handle() {
        return logf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float logf(float)
     * }
     */
    public static MemorySegment logf$address() {
        return logf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float logf(float)
     * }
     */
    public static float logf(float x0) {
        var mh$ = logf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("logf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double log(double)
     * }
     */
    public static FunctionDescriptor log$descriptor() {
        return log.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double log(double)
     * }
     */
    public static MethodHandle log$handle() {
        return log.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double log(double)
     * }
     */
    public static MemorySegment log$address() {
        return log.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double log(double)
     * }
     */
    public static double log(double x0) {
        var mh$ = log.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log10f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log10f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float log10f(float)
     * }
     */
    public static FunctionDescriptor log10f$descriptor() {
        return log10f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float log10f(float)
     * }
     */
    public static MethodHandle log10f$handle() {
        return log10f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float log10f(float)
     * }
     */
    public static MemorySegment log10f$address() {
        return log10f.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float log10f(float)
     * }
     */
    public static float log10f(float x0) {
        var mh$ = log10f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log10f", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log10 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log10");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double log10(double)
     * }
     */
    public static FunctionDescriptor log10$descriptor() {
        return log10.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double log10(double)
     * }
     */
    public static MethodHandle log10$handle() {
        return log10.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double log10(double)
     * }
     */
    public static MemorySegment log10$address() {
        return log10.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double log10(double)
     * }
     */
    public static double log10(double x0) {
        var mh$ = log10.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log10", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float log2f(float)
     * }
     */
    public static FunctionDescriptor log2f$descriptor() {
        return log2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float log2f(float)
     * }
     */
    public static MethodHandle log2f$handle() {
        return log2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float log2f(float)
     * }
     */
    public static MemorySegment log2f$address() {
        return log2f.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float log2f(float)
     * }
     */
    public static float log2f(float x0) {
        var mh$ = log2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log2f", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double log2(double)
     * }
     */
    public static FunctionDescriptor log2$descriptor() {
        return log2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double log2(double)
     * }
     */
    public static MethodHandle log2$handle() {
        return log2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double log2(double)
     * }
     */
    public static MemorySegment log2$address() {
        return log2.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double log2(double)
     * }
     */
    public static double log2(double x0) {
        var mh$ = log2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log2", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log1pf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log1pf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float log1pf(float)
     * }
     */
    public static FunctionDescriptor log1pf$descriptor() {
        return log1pf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float log1pf(float)
     * }
     */
    public static MethodHandle log1pf$handle() {
        return log1pf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float log1pf(float)
     * }
     */
    public static MemorySegment log1pf$address() {
        return log1pf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float log1pf(float)
     * }
     */
    public static float log1pf(float x0) {
        var mh$ = log1pf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log1pf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class log1p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("log1p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double log1p(double)
     * }
     */
    public static FunctionDescriptor log1p$descriptor() {
        return log1p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double log1p(double)
     * }
     */
    public static MethodHandle log1p$handle() {
        return log1p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double log1p(double)
     * }
     */
    public static MemorySegment log1p$address() {
        return log1p.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double log1p(double)
     * }
     */
    public static double log1p(double x0) {
        var mh$ = log1p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("log1p", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class logbf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("logbf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float logbf(float)
     * }
     */
    public static FunctionDescriptor logbf$descriptor() {
        return logbf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float logbf(float)
     * }
     */
    public static MethodHandle logbf$handle() {
        return logbf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float logbf(float)
     * }
     */
    public static MemorySegment logbf$address() {
        return logbf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float logbf(float)
     * }
     */
    public static float logbf(float x0) {
        var mh$ = logbf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("logbf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class logb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("logb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double logb(double)
     * }
     */
    public static FunctionDescriptor logb$descriptor() {
        return logb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double logb(double)
     * }
     */
    public static MethodHandle logb$handle() {
        return logb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double logb(double)
     * }
     */
    public static MemorySegment logb$address() {
        return logb.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double logb(double)
     * }
     */
    public static double logb(double x0) {
        var mh$ = logb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("logb", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class modff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("modff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float modff(float, float *)
     * }
     */
    public static FunctionDescriptor modff$descriptor() {
        return modff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float modff(float, float *)
     * }
     */
    public static MethodHandle modff$handle() {
        return modff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float modff(float, float *)
     * }
     */
    public static MemorySegment modff$address() {
        return modff.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float modff(float, float *)
     * }
     */
    public static float modff(float x0, MemorySegment x1) {
        var mh$ = modff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("modff", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class modf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("modf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double modf(double, double *)
     * }
     */
    public static FunctionDescriptor modf$descriptor() {
        return modf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double modf(double, double *)
     * }
     */
    public static MethodHandle modf$handle() {
        return modf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double modf(double, double *)
     * }
     */
    public static MemorySegment modf$address() {
        return modf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double modf(double, double *)
     * }
     */
    public static double modf(double x0, MemorySegment x1) {
        var mh$ = modf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("modf", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ldexpf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ldexpf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float ldexpf(float, int)
     * }
     */
    public static FunctionDescriptor ldexpf$descriptor() {
        return ldexpf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float ldexpf(float, int)
     * }
     */
    public static MethodHandle ldexpf$handle() {
        return ldexpf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float ldexpf(float, int)
     * }
     */
    public static MemorySegment ldexpf$address() {
        return ldexpf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float ldexpf(float, int)
     * }
     */
    public static float ldexpf(float x0, int x1) {
        var mh$ = ldexpf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ldexpf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ldexp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ldexp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double ldexp(double, int)
     * }
     */
    public static FunctionDescriptor ldexp$descriptor() {
        return ldexp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double ldexp(double, int)
     * }
     */
    public static MethodHandle ldexp$handle() {
        return ldexp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double ldexp(double, int)
     * }
     */
    public static MemorySegment ldexp$address() {
        return ldexp.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double ldexp(double, int)
     * }
     */
    public static double ldexp(double x0, int x1) {
        var mh$ = ldexp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ldexp", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class frexpf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("frexpf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float frexpf(float, int *)
     * }
     */
    public static FunctionDescriptor frexpf$descriptor() {
        return frexpf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float frexpf(float, int *)
     * }
     */
    public static MethodHandle frexpf$handle() {
        return frexpf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float frexpf(float, int *)
     * }
     */
    public static MemorySegment frexpf$address() {
        return frexpf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float frexpf(float, int *)
     * }
     */
    public static float frexpf(float x0, MemorySegment x1) {
        var mh$ = frexpf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("frexpf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class frexp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("frexp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double frexp(double, int *)
     * }
     */
    public static FunctionDescriptor frexp$descriptor() {
        return frexp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double frexp(double, int *)
     * }
     */
    public static MethodHandle frexp$handle() {
        return frexp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double frexp(double, int *)
     * }
     */
    public static MemorySegment frexp$address() {
        return frexp.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double frexp(double, int *)
     * }
     */
    public static double frexp(double x0, MemorySegment x1) {
        var mh$ = frexp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("frexp", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ilogbf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ilogbf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern int ilogbf(float)
     * }
     */
    public static FunctionDescriptor ilogbf$descriptor() {
        return ilogbf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern int ilogbf(float)
     * }
     */
    public static MethodHandle ilogbf$handle() {
        return ilogbf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern int ilogbf(float)
     * }
     */
    public static MemorySegment ilogbf$address() {
        return ilogbf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern int ilogbf(float)
     * }
     */
    public static int ilogbf(float x0) {
        var mh$ = ilogbf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ilogbf", x0);
            }
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ilogb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_INT,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ilogb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern int ilogb(double)
     * }
     */
    public static FunctionDescriptor ilogb$descriptor() {
        return ilogb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern int ilogb(double)
     * }
     */
    public static MethodHandle ilogb$handle() {
        return ilogb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern int ilogb(double)
     * }
     */
    public static MemorySegment ilogb$address() {
        return ilogb.ADDR;
    }

    /**
     * {@snippet lang = c : * extern int ilogb(double)
     * }
     */
    public static int ilogb(double x0) {
        var mh$ = ilogb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ilogb", x0);
            }
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalbnf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalbnf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float scalbnf(float, int)
     * }
     */
    public static FunctionDescriptor scalbnf$descriptor() {
        return scalbnf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float scalbnf(float, int)
     * }
     */
    public static MethodHandle scalbnf$handle() {
        return scalbnf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float scalbnf(float, int)
     * }
     */
    public static MemorySegment scalbnf$address() {
        return scalbnf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float scalbnf(float, int)
     * }
     */
    public static float scalbnf(float x0, int x1) {
        var mh$ = scalbnf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalbnf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalbn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_INT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalbn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double scalbn(double, int)
     * }
     */
    public static FunctionDescriptor scalbn$descriptor() {
        return scalbn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double scalbn(double, int)
     * }
     */
    public static MethodHandle scalbn$handle() {
        return scalbn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double scalbn(double, int)
     * }
     */
    public static MemorySegment scalbn$address() {
        return scalbn.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double scalbn(double, int)
     * }
     */
    public static double scalbn(double x0, int x1) {
        var mh$ = scalbn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalbn", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalblnf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalblnf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float scalblnf(float, long)
     * }
     */
    public static FunctionDescriptor scalblnf$descriptor() {
        return scalblnf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float scalblnf(float, long)
     * }
     */
    public static MethodHandle scalblnf$handle() {
        return scalblnf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float scalblnf(float, long)
     * }
     */
    public static MemorySegment scalblnf$address() {
        return scalblnf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float scalblnf(float, long)
     * }
     */
    public static float scalblnf(float x0, long x1) {
        var mh$ = scalblnf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalblnf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalbln {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_LONG);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalbln");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double scalbln(double, long)
     * }
     */
    public static FunctionDescriptor scalbln$descriptor() {
        return scalbln.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double scalbln(double, long)
     * }
     */
    public static MethodHandle scalbln$handle() {
        return scalbln.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double scalbln(double, long)
     * }
     */
    public static MemorySegment scalbln$address() {
        return scalbln.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double scalbln(double, long)
     * }
     */
    public static double scalbln(double x0, long x1) {
        var mh$ = scalbln.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalbln", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fabsf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fabsf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float fabsf(float)
     * }
     */
    public static FunctionDescriptor fabsf$descriptor() {
        return fabsf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float fabsf(float)
     * }
     */
    public static MethodHandle fabsf$handle() {
        return fabsf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float fabsf(float)
     * }
     */
    public static MemorySegment fabsf$address() {
        return fabsf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float fabsf(float)
     * }
     */
    public static float fabsf(float x0) {
        var mh$ = fabsf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fabsf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fabs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double fabs(double)
     * }
     */
    public static FunctionDescriptor fabs$descriptor() {
        return fabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double fabs(double)
     * }
     */
    public static MethodHandle fabs$handle() {
        return fabs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double fabs(double)
     * }
     */
    public static MemorySegment fabs$address() {
        return fabs.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double fabs(double)
     * }
     */
    public static double fabs(double x0) {
        var mh$ = fabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fabs", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cbrtf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cbrtf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float cbrtf(float)
     * }
     */
    public static FunctionDescriptor cbrtf$descriptor() {
        return cbrtf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float cbrtf(float)
     * }
     */
    public static MethodHandle cbrtf$handle() {
        return cbrtf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float cbrtf(float)
     * }
     */
    public static MemorySegment cbrtf$address() {
        return cbrtf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float cbrtf(float)
     * }
     */
    public static float cbrtf(float x0) {
        var mh$ = cbrtf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cbrtf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cbrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("cbrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double cbrt(double)
     * }
     */
    public static FunctionDescriptor cbrt$descriptor() {
        return cbrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double cbrt(double)
     * }
     */
    public static MethodHandle cbrt$handle() {
        return cbrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double cbrt(double)
     * }
     */
    public static MemorySegment cbrt$address() {
        return cbrt.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double cbrt(double)
     * }
     */
    public static double cbrt(double x0) {
        var mh$ = cbrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cbrt", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hypotf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("hypotf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float hypotf(float, float)
     * }
     */
    public static FunctionDescriptor hypotf$descriptor() {
        return hypotf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float hypotf(float, float)
     * }
     */
    public static MethodHandle hypotf$handle() {
        return hypotf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float hypotf(float, float)
     * }
     */
    public static MemorySegment hypotf$address() {
        return hypotf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float hypotf(float, float)
     * }
     */
    public static float hypotf(float x0, float x1) {
        var mh$ = hypotf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hypotf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hypot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("hypot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double hypot(double, double)
     * }
     */
    public static FunctionDescriptor hypot$descriptor() {
        return hypot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double hypot(double, double)
     * }
     */
    public static MethodHandle hypot$handle() {
        return hypot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double hypot(double, double)
     * }
     */
    public static MemorySegment hypot$address() {
        return hypot.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double hypot(double, double)
     * }
     */
    public static double hypot(double x0, double x1) {
        var mh$ = hypot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hypot", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class powf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("powf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float powf(float, float)
     * }
     */
    public static FunctionDescriptor powf$descriptor() {
        return powf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float powf(float, float)
     * }
     */
    public static MethodHandle powf$handle() {
        return powf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float powf(float, float)
     * }
     */
    public static MemorySegment powf$address() {
        return powf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float powf(float, float)
     * }
     */
    public static float powf(float x0, float x1) {
        var mh$ = powf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("powf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("pow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double pow(double, double)
     * }
     */
    public static FunctionDescriptor pow$descriptor() {
        return pow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double pow(double, double)
     * }
     */
    public static MethodHandle pow$handle() {
        return pow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double pow(double, double)
     * }
     */
    public static MemorySegment pow$address() {
        return pow.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double pow(double, double)
     * }
     */
    public static double pow(double x0, double x1) {
        var mh$ = pow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pow", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqrtf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sqrtf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float sqrtf(float)
     * }
     */
    public static FunctionDescriptor sqrtf$descriptor() {
        return sqrtf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float sqrtf(float)
     * }
     */
    public static MethodHandle sqrtf$handle() {
        return sqrtf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float sqrtf(float)
     * }
     */
    public static MemorySegment sqrtf$address() {
        return sqrtf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float sqrtf(float)
     * }
     */
    public static float sqrtf(float x0) {
        var mh$ = sqrtf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqrtf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("sqrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double sqrt(double)
     * }
     */
    public static FunctionDescriptor sqrt$descriptor() {
        return sqrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double sqrt(double)
     * }
     */
    public static MethodHandle sqrt$handle() {
        return sqrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double sqrt(double)
     * }
     */
    public static MemorySegment sqrt$address() {
        return sqrt.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double sqrt(double)
     * }
     */
    public static double sqrt(double x0) {
        var mh$ = sqrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqrt", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("erff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float erff(float)
     * }
     */
    public static FunctionDescriptor erff$descriptor() {
        return erff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float erff(float)
     * }
     */
    public static MethodHandle erff$handle() {
        return erff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float erff(float)
     * }
     */
    public static MemorySegment erff$address() {
        return erff.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float erff(float)
     * }
     */
    public static float erff(float x0) {
        var mh$ = erff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erff", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("erf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double erf(double)
     * }
     */
    public static FunctionDescriptor erf$descriptor() {
        return erf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double erf(double)
     * }
     */
    public static MethodHandle erf$handle() {
        return erf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double erf(double)
     * }
     */
    public static MemorySegment erf$address() {
        return erf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double erf(double)
     * }
     */
    public static double erf(double x0) {
        var mh$ = erf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erf", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erfcf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("erfcf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float erfcf(float)
     * }
     */
    public static FunctionDescriptor erfcf$descriptor() {
        return erfcf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float erfcf(float)
     * }
     */
    public static MethodHandle erfcf$handle() {
        return erfcf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float erfcf(float)
     * }
     */
    public static MemorySegment erfcf$address() {
        return erfcf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float erfcf(float)
     * }
     */
    public static float erfcf(float x0) {
        var mh$ = erfcf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erfcf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erfc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("erfc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double erfc(double)
     * }
     */
    public static FunctionDescriptor erfc$descriptor() {
        return erfc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double erfc(double)
     * }
     */
    public static MethodHandle erfc$handle() {
        return erfc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double erfc(double)
     * }
     */
    public static MemorySegment erfc$address() {
        return erfc.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double erfc(double)
     * }
     */
    public static double erfc(double x0) {
        var mh$ = erfc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erfc", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lgammaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lgammaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float lgammaf(float)
     * }
     */
    public static FunctionDescriptor lgammaf$descriptor() {
        return lgammaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float lgammaf(float)
     * }
     */
    public static MethodHandle lgammaf$handle() {
        return lgammaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float lgammaf(float)
     * }
     */
    public static MemorySegment lgammaf$address() {
        return lgammaf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float lgammaf(float)
     * }
     */
    public static float lgammaf(float x0) {
        var mh$ = lgammaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lgammaf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lgamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lgamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double lgamma(double)
     * }
     */
    public static FunctionDescriptor lgamma$descriptor() {
        return lgamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double lgamma(double)
     * }
     */
    public static MethodHandle lgamma$handle() {
        return lgamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double lgamma(double)
     * }
     */
    public static MemorySegment lgamma$address() {
        return lgamma.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double lgamma(double)
     * }
     */
    public static double lgamma(double x0) {
        var mh$ = lgamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lgamma", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tgammaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tgammaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float tgammaf(float)
     * }
     */
    public static FunctionDescriptor tgammaf$descriptor() {
        return tgammaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float tgammaf(float)
     * }
     */
    public static MethodHandle tgammaf$handle() {
        return tgammaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float tgammaf(float)
     * }
     */
    public static MemorySegment tgammaf$address() {
        return tgammaf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float tgammaf(float)
     * }
     */
    public static float tgammaf(float x0) {
        var mh$ = tgammaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tgammaf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tgamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("tgamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double tgamma(double)
     * }
     */
    public static FunctionDescriptor tgamma$descriptor() {
        return tgamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double tgamma(double)
     * }
     */
    public static MethodHandle tgamma$handle() {
        return tgamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double tgamma(double)
     * }
     */
    public static MemorySegment tgamma$address() {
        return tgamma.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double tgamma(double)
     * }
     */
    public static double tgamma(double x0) {
        var mh$ = tgamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tgamma", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ceilf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ceilf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float ceilf(float)
     * }
     */
    public static FunctionDescriptor ceilf$descriptor() {
        return ceilf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float ceilf(float)
     * }
     */
    public static MethodHandle ceilf$handle() {
        return ceilf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float ceilf(float)
     * }
     */
    public static MemorySegment ceilf$address() {
        return ceilf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float ceilf(float)
     * }
     */
    public static float ceilf(float x0) {
        var mh$ = ceilf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ceilf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ceil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("ceil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double ceil(double)
     * }
     */
    public static FunctionDescriptor ceil$descriptor() {
        return ceil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double ceil(double)
     * }
     */
    public static MethodHandle ceil$handle() {
        return ceil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double ceil(double)
     * }
     */
    public static MemorySegment ceil$address() {
        return ceil.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double ceil(double)
     * }
     */
    public static double ceil(double x0) {
        var mh$ = ceil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ceil", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class floorf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("floorf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float floorf(float)
     * }
     */
    public static FunctionDescriptor floorf$descriptor() {
        return floorf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float floorf(float)
     * }
     */
    public static MethodHandle floorf$handle() {
        return floorf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float floorf(float)
     * }
     */
    public static MemorySegment floorf$address() {
        return floorf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float floorf(float)
     * }
     */
    public static float floorf(float x0) {
        var mh$ = floorf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("floorf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class floor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("floor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double floor(double)
     * }
     */
    public static FunctionDescriptor floor$descriptor() {
        return floor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double floor(double)
     * }
     */
    public static MethodHandle floor$handle() {
        return floor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double floor(double)
     * }
     */
    public static MemorySegment floor$address() {
        return floor.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double floor(double)
     * }
     */
    public static double floor(double x0) {
        var mh$ = floor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("floor", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nearbyintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nearbyintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float nearbyintf(float)
     * }
     */
    public static FunctionDescriptor nearbyintf$descriptor() {
        return nearbyintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float nearbyintf(float)
     * }
     */
    public static MethodHandle nearbyintf$handle() {
        return nearbyintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float nearbyintf(float)
     * }
     */
    public static MemorySegment nearbyintf$address() {
        return nearbyintf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float nearbyintf(float)
     * }
     */
    public static float nearbyintf(float x0) {
        var mh$ = nearbyintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nearbyintf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nearbyint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nearbyint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double nearbyint(double)
     * }
     */
    public static FunctionDescriptor nearbyint$descriptor() {
        return nearbyint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double nearbyint(double)
     * }
     */
    public static MethodHandle nearbyint$handle() {
        return nearbyint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double nearbyint(double)
     * }
     */
    public static MemorySegment nearbyint$address() {
        return nearbyint.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double nearbyint(double)
     * }
     */
    public static double nearbyint(double x0) {
        var mh$ = nearbyint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nearbyint", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("rintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float rintf(float)
     * }
     */
    public static FunctionDescriptor rintf$descriptor() {
        return rintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float rintf(float)
     * }
     */
    public static MethodHandle rintf$handle() {
        return rintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float rintf(float)
     * }
     */
    public static MemorySegment rintf$address() {
        return rintf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float rintf(float)
     * }
     */
    public static float rintf(float x0) {
        var mh$ = rintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rintf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("rint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double rint(double)
     * }
     */
    public static FunctionDescriptor rint$descriptor() {
        return rint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double rint(double)
     * }
     */
    public static MethodHandle rint$handle() {
        return rint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double rint(double)
     * }
     */
    public static MemorySegment rint$address() {
        return rint.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double rint(double)
     * }
     */
    public static double rint(double x0) {
        var mh$ = rint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rint", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lrintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lrintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern long lrintf(float)
     * }
     */
    public static FunctionDescriptor lrintf$descriptor() {
        return lrintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern long lrintf(float)
     * }
     */
    public static MethodHandle lrintf$handle() {
        return lrintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern long lrintf(float)
     * }
     */
    public static MemorySegment lrintf$address() {
        return lrintf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern long lrintf(float)
     * }
     */
    public static long lrintf(float x0) {
        var mh$ = lrintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lrintf", x0);
            }
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lrint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lrint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern long lrint(double)
     * }
     */
    public static FunctionDescriptor lrint$descriptor() {
        return lrint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern long lrint(double)
     * }
     */
    public static MethodHandle lrint$handle() {
        return lrint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern long lrint(double)
     * }
     */
    public static MemorySegment lrint$address() {
        return lrint.ADDR;
    }

    /**
     * {@snippet lang = c : * extern long lrint(double)
     * }
     */
    public static long lrint(double x0) {
        var mh$ = lrint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lrint", x0);
            }
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class roundf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("roundf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float roundf(float)
     * }
     */
    public static FunctionDescriptor roundf$descriptor() {
        return roundf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float roundf(float)
     * }
     */
    public static MethodHandle roundf$handle() {
        return roundf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float roundf(float)
     * }
     */
    public static MemorySegment roundf$address() {
        return roundf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float roundf(float)
     * }
     */
    public static float roundf(float x0) {
        var mh$ = roundf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("roundf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("round");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double round(double)
     * }
     */
    public static FunctionDescriptor round$descriptor() {
        return round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double round(double)
     * }
     */
    public static MethodHandle round$handle() {
        return round.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double round(double)
     * }
     */
    public static MemorySegment round$address() {
        return round.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double round(double)
     * }
     */
    public static double round(double x0) {
        var mh$ = round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("round", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lroundf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lroundf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern long lroundf(float)
     * }
     */
    public static FunctionDescriptor lroundf$descriptor() {
        return lroundf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern long lroundf(float)
     * }
     */
    public static MethodHandle lroundf$handle() {
        return lroundf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern long lroundf(float)
     * }
     */
    public static MemorySegment lroundf$address() {
        return lroundf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern long lroundf(float)
     * }
     */
    public static long lroundf(float x0) {
        var mh$ = lroundf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lroundf", x0);
            }
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lround {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("lround");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern long lround(double)
     * }
     */
    public static FunctionDescriptor lround$descriptor() {
        return lround.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern long lround(double)
     * }
     */
    public static MethodHandle lround$handle() {
        return lround.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern long lround(double)
     * }
     */
    public static MemorySegment lround$address() {
        return lround.ADDR;
    }

    /**
     * {@snippet lang = c : * extern long lround(double)
     * }
     */
    public static long lround(double x0) {
        var mh$ = lround.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lround", x0);
            }
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llrintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("llrintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern long long llrintf(float)
     * }
     */
    public static FunctionDescriptor llrintf$descriptor() {
        return llrintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern long long llrintf(float)
     * }
     */
    public static MethodHandle llrintf$handle() {
        return llrintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern long long llrintf(float)
     * }
     */
    public static MemorySegment llrintf$address() {
        return llrintf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern long long llrintf(float)
     * }
     */
    public static long llrintf(float x0) {
        var mh$ = llrintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llrintf", x0);
            }
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llrint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("llrint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern long long llrint(double)
     * }
     */
    public static FunctionDescriptor llrint$descriptor() {
        return llrint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern long long llrint(double)
     * }
     */
    public static MethodHandle llrint$handle() {
        return llrint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern long long llrint(double)
     * }
     */
    public static MemorySegment llrint$address() {
        return llrint.ADDR;
    }

    /**
     * {@snippet lang = c : * extern long long llrint(double)
     * }
     */
    public static long llrint(double x0) {
        var mh$ = llrint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llrint", x0);
            }
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llroundf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("llroundf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern long long llroundf(float)
     * }
     */
    public static FunctionDescriptor llroundf$descriptor() {
        return llroundf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern long long llroundf(float)
     * }
     */
    public static MethodHandle llroundf$handle() {
        return llroundf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern long long llroundf(float)
     * }
     */
    public static MemorySegment llroundf$address() {
        return llroundf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern long long llroundf(float)
     * }
     */
    public static long llroundf(float x0) {
        var mh$ = llroundf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llroundf", x0);
            }
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llround {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_LONG_LONG,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("llround");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern long long llround(double)
     * }
     */
    public static FunctionDescriptor llround$descriptor() {
        return llround.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern long long llround(double)
     * }
     */
    public static MethodHandle llround$handle() {
        return llround.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern long long llround(double)
     * }
     */
    public static MemorySegment llround$address() {
        return llround.ADDR;
    }

    /**
     * {@snippet lang = c : * extern long long llround(double)
     * }
     */
    public static long llround(double x0) {
        var mh$ = llround.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llround", x0);
            }
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class truncf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("truncf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float truncf(float)
     * }
     */
    public static FunctionDescriptor truncf$descriptor() {
        return truncf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float truncf(float)
     * }
     */
    public static MethodHandle truncf$handle() {
        return truncf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float truncf(float)
     * }
     */
    public static MemorySegment truncf$address() {
        return truncf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float truncf(float)
     * }
     */
    public static float truncf(float x0) {
        var mh$ = truncf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("truncf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class trunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("trunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double trunc(double)
     * }
     */
    public static FunctionDescriptor trunc$descriptor() {
        return trunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double trunc(double)
     * }
     */
    public static MethodHandle trunc$handle() {
        return trunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double trunc(double)
     * }
     */
    public static MemorySegment trunc$address() {
        return trunc.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double trunc(double)
     * }
     */
    public static double trunc(double x0) {
        var mh$ = trunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("trunc", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmodf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmodf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float fmodf(float, float)
     * }
     */
    public static FunctionDescriptor fmodf$descriptor() {
        return fmodf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float fmodf(float, float)
     * }
     */
    public static MethodHandle fmodf$handle() {
        return fmodf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float fmodf(float, float)
     * }
     */
    public static MemorySegment fmodf$address() {
        return fmodf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float fmodf(float, float)
     * }
     */
    public static float fmodf(float x0, float x1) {
        var mh$ = fmodf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmodf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double fmod(double, double)
     * }
     */
    public static FunctionDescriptor fmod$descriptor() {
        return fmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double fmod(double, double)
     * }
     */
    public static MethodHandle fmod$handle() {
        return fmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double fmod(double, double)
     * }
     */
    public static MemorySegment fmod$address() {
        return fmod.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double fmod(double, double)
     * }
     */
    public static double fmod(double x0, double x1) {
        var mh$ = fmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmod", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remainderf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("remainderf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float remainderf(float, float)
     * }
     */
    public static FunctionDescriptor remainderf$descriptor() {
        return remainderf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float remainderf(float, float)
     * }
     */
    public static MethodHandle remainderf$handle() {
        return remainderf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float remainderf(float, float)
     * }
     */
    public static MemorySegment remainderf$address() {
        return remainderf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float remainderf(float, float)
     * }
     */
    public static float remainderf(float x0, float x1) {
        var mh$ = remainderf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remainderf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remainder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("remainder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double remainder(double, double)
     * }
     */
    public static FunctionDescriptor remainder$descriptor() {
        return remainder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double remainder(double, double)
     * }
     */
    public static MethodHandle remainder$handle() {
        return remainder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double remainder(double, double)
     * }
     */
    public static MemorySegment remainder$address() {
        return remainder.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double remainder(double, double)
     * }
     */
    public static double remainder(double x0, double x1) {
        var mh$ = remainder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remainder", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remquof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("remquof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float remquof(float, float, int *)
     * }
     */
    public static FunctionDescriptor remquof$descriptor() {
        return remquof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float remquof(float, float, int *)
     * }
     */
    public static MethodHandle remquof$handle() {
        return remquof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float remquof(float, float, int *)
     * }
     */
    public static MemorySegment remquof$address() {
        return remquof.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float remquof(float, float, int *)
     * }
     */
    public static float remquof(float x0, float x1, MemorySegment x2) {
        var mh$ = remquof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remquof", x0, x1, x2);
            }
            return (float) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remquo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("remquo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double remquo(double, double, int *)
     * }
     */
    public static FunctionDescriptor remquo$descriptor() {
        return remquo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double remquo(double, double, int *)
     * }
     */
    public static MethodHandle remquo$handle() {
        return remquo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double remquo(double, double, int *)
     * }
     */
    public static MemorySegment remquo$address() {
        return remquo.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double remquo(double, double, int *)
     * }
     */
    public static double remquo(double x0, double x1, MemorySegment x2) {
        var mh$ = remquo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remquo", x0, x1, x2);
            }
            return (double) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class copysignf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("copysignf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float copysignf(float, float)
     * }
     */
    public static FunctionDescriptor copysignf$descriptor() {
        return copysignf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float copysignf(float, float)
     * }
     */
    public static MethodHandle copysignf$handle() {
        return copysignf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float copysignf(float, float)
     * }
     */
    public static MemorySegment copysignf$address() {
        return copysignf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float copysignf(float, float)
     * }
     */
    public static float copysignf(float x0, float x1) {
        var mh$ = copysignf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("copysignf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class copysign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("copysign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double copysign(double, double)
     * }
     */
    public static FunctionDescriptor copysign$descriptor() {
        return copysign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double copysign(double, double)
     * }
     */
    public static MethodHandle copysign$handle() {
        return copysign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double copysign(double, double)
     * }
     */
    public static MemorySegment copysign$address() {
        return copysign.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double copysign(double, double)
     * }
     */
    public static double copysign(double x0, double x1) {
        var mh$ = copysign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("copysign", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float nanf(const char *)
     * }
     */
    public static FunctionDescriptor nanf$descriptor() {
        return nanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float nanf(const char *)
     * }
     */
    public static MethodHandle nanf$handle() {
        return nanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float nanf(const char *)
     * }
     */
    public static MemorySegment nanf$address() {
        return nanf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float nanf(const char *)
     * }
     */
    public static float nanf(MemorySegment x0) {
        var mh$ = nanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nanf", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_POINTER);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double nan(const char *)
     * }
     */
    public static FunctionDescriptor nan$descriptor() {
        return nan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double nan(const char *)
     * }
     */
    public static MethodHandle nan$handle() {
        return nan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double nan(const char *)
     * }
     */
    public static MemorySegment nan$address() {
        return nan.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double nan(const char *)
     * }
     */
    public static double nan(MemorySegment x0) {
        var mh$ = nan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nan", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nextafterf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nextafterf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float nextafterf(float, float)
     * }
     */
    public static FunctionDescriptor nextafterf$descriptor() {
        return nextafterf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float nextafterf(float, float)
     * }
     */
    public static MethodHandle nextafterf$handle() {
        return nextafterf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float nextafterf(float, float)
     * }
     */
    public static MemorySegment nextafterf$address() {
        return nextafterf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float nextafterf(float, float)
     * }
     */
    public static float nextafterf(float x0, float x1) {
        var mh$ = nextafterf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nextafterf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nextafter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("nextafter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double nextafter(double, double)
     * }
     */
    public static FunctionDescriptor nextafter$descriptor() {
        return nextafter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double nextafter(double, double)
     * }
     */
    public static MethodHandle nextafter$handle() {
        return nextafter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double nextafter(double, double)
     * }
     */
    public static MemorySegment nextafter$address() {
        return nextafter.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double nextafter(double, double)
     * }
     */
    public static double nextafter(double x0, double x1) {
        var mh$ = nextafter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nextafter", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdimf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fdimf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float fdimf(float, float)
     * }
     */
    public static FunctionDescriptor fdimf$descriptor() {
        return fdimf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float fdimf(float, float)
     * }
     */
    public static MethodHandle fdimf$handle() {
        return fdimf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float fdimf(float, float)
     * }
     */
    public static MemorySegment fdimf$address() {
        return fdimf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float fdimf(float, float)
     * }
     */
    public static float fdimf(float x0, float x1) {
        var mh$ = fdimf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdimf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fdim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double fdim(double, double)
     * }
     */
    public static FunctionDescriptor fdim$descriptor() {
        return fdim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double fdim(double, double)
     * }
     */
    public static MethodHandle fdim$handle() {
        return fdim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double fdim(double, double)
     * }
     */
    public static MemorySegment fdim$address() {
        return fdim.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double fdim(double, double)
     * }
     */
    public static double fdim(double x0, double x1) {
        var mh$ = fdim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdim", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmaxf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmaxf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float fmaxf(float, float)
     * }
     */
    public static FunctionDescriptor fmaxf$descriptor() {
        return fmaxf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float fmaxf(float, float)
     * }
     */
    public static MethodHandle fmaxf$handle() {
        return fmaxf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float fmaxf(float, float)
     * }
     */
    public static MemorySegment fmaxf$address() {
        return fmaxf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float fmaxf(float, float)
     * }
     */
    public static float fmaxf(float x0, float x1) {
        var mh$ = fmaxf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmaxf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double fmax(double, double)
     * }
     */
    public static FunctionDescriptor fmax$descriptor() {
        return fmax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double fmax(double, double)
     * }
     */
    public static MethodHandle fmax$handle() {
        return fmax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double fmax(double, double)
     * }
     */
    public static MemorySegment fmax$address() {
        return fmax.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double fmax(double, double)
     * }
     */
    public static double fmax(double x0, double x1) {
        var mh$ = fmax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmax", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fminf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fminf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float fminf(float, float)
     * }
     */
    public static FunctionDescriptor fminf$descriptor() {
        return fminf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float fminf(float, float)
     * }
     */
    public static MethodHandle fminf$handle() {
        return fminf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float fminf(float, float)
     * }
     */
    public static MemorySegment fminf$address() {
        return fminf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float fminf(float, float)
     * }
     */
    public static float fminf(float x0, float x1) {
        var mh$ = fminf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fminf", x0, x1);
            }
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double fmin(double, double)
     * }
     */
    public static FunctionDescriptor fmin$descriptor() {
        return fmin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double fmin(double, double)
     * }
     */
    public static MethodHandle fmin$handle() {
        return fmin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double fmin(double, double)
     * }
     */
    public static MemorySegment fmin$address() {
        return fmin.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double fmin(double, double)
     * }
     */
    public static double fmin(double x0, double x1) {
        var mh$ = fmin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmin", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fmaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float fmaf(float, float, float)
     * }
     */
    public static FunctionDescriptor fmaf$descriptor() {
        return fmaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float fmaf(float, float, float)
     * }
     */
    public static MethodHandle fmaf$handle() {
        return fmaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float fmaf(float, float, float)
     * }
     */
    public static MemorySegment fmaf$address() {
        return fmaf.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float fmaf(float, float, float)
     * }
     */
    public static float fmaf(float x0, float x1, float x2) {
        var mh$ = fmaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmaf", x0, x1, x2);
            }
            return (float) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("fma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double fma(double, double, double)
     * }
     */
    public static FunctionDescriptor fma$descriptor() {
        return fma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double fma(double, double, double)
     * }
     */
    public static MethodHandle fma$handle() {
        return fma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double fma(double, double, double)
     * }
     */
    public static MemorySegment fma$address() {
        return fma.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double fma(double, double, double)
     * }
     */
    public static double fma(double x0, double x1, double x2) {
        var mh$ = fma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fma", x0, x1, x2);
            }
            return (double) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __exp10f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__exp10f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float __exp10f(float)
     * }
     */
    public static FunctionDescriptor __exp10f$descriptor() {
        return __exp10f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float __exp10f(float)
     * }
     */
    public static MethodHandle __exp10f$handle() {
        return __exp10f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float __exp10f(float)
     * }
     */
    public static MemorySegment __exp10f$address() {
        return __exp10f.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float __exp10f(float)
     * }
     */
    public static float __exp10f(float x0) {
        var mh$ = __exp10f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__exp10f", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __exp10 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__exp10");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double __exp10(double)
     * }
     */
    public static FunctionDescriptor __exp10$descriptor() {
        return __exp10.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double __exp10(double)
     * }
     */
    public static MethodHandle __exp10$handle() {
        return __exp10.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double __exp10(double)
     * }
     */
    public static MemorySegment __exp10$address() {
        return __exp10.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double __exp10(double)
     * }
     */
    public static double __exp10(double x0) {
        var mh$ = __exp10.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__exp10", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __cospif {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__cospif");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float __cospif(float)
     * }
     */
    public static FunctionDescriptor __cospif$descriptor() {
        return __cospif.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float __cospif(float)
     * }
     */
    public static MethodHandle __cospif$handle() {
        return __cospif.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float __cospif(float)
     * }
     */
    public static MemorySegment __cospif$address() {
        return __cospif.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float __cospif(float)
     * }
     */
    public static float __cospif(float x0) {
        var mh$ = __cospif.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__cospif", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __cospi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__cospi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double __cospi(double)
     * }
     */
    public static FunctionDescriptor __cospi$descriptor() {
        return __cospi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double __cospi(double)
     * }
     */
    public static MethodHandle __cospi$handle() {
        return __cospi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double __cospi(double)
     * }
     */
    public static MemorySegment __cospi$address() {
        return __cospi.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double __cospi(double)
     * }
     */
    public static double __cospi(double x0) {
        var mh$ = __cospi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__cospi", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sinpif {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__sinpif");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float __sinpif(float)
     * }
     */
    public static FunctionDescriptor __sinpif$descriptor() {
        return __sinpif.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float __sinpif(float)
     * }
     */
    public static MethodHandle __sinpif$handle() {
        return __sinpif.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float __sinpif(float)
     * }
     */
    public static MemorySegment __sinpif$address() {
        return __sinpif.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float __sinpif(float)
     * }
     */
    public static float __sinpif(float x0) {
        var mh$ = __sinpif.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sinpif", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sinpi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__sinpi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double __sinpi(double)
     * }
     */
    public static FunctionDescriptor __sinpi$descriptor() {
        return __sinpi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double __sinpi(double)
     * }
     */
    public static MethodHandle __sinpi$handle() {
        return __sinpi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double __sinpi(double)
     * }
     */
    public static MemorySegment __sinpi$address() {
        return __sinpi.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double __sinpi(double)
     * }
     */
    public static double __sinpi(double x0) {
        var mh$ = __sinpi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sinpi", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __tanpif {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_FLOAT,
                webgpu_h.C_FLOAT);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__tanpif");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern float __tanpif(float)
     * }
     */
    public static FunctionDescriptor __tanpif$descriptor() {
        return __tanpif.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern float __tanpif(float)
     * }
     */
    public static MethodHandle __tanpif$handle() {
        return __tanpif.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern float __tanpif(float)
     * }
     */
    public static MemorySegment __tanpif$address() {
        return __tanpif.ADDR;
    }

    /**
     * {@snippet lang = c : * extern float __tanpif(float)
     * }
     */
    public static float __tanpif(float x0) {
        var mh$ = __tanpif.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__tanpif", x0);
            }
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __tanpi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("__tanpi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double __tanpi(double)
     * }
     */
    public static FunctionDescriptor __tanpi$descriptor() {
        return __tanpi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double __tanpi(double)
     * }
     */
    public static MethodHandle __tanpi$handle() {
        return __tanpi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double __tanpi(double)
     * }
     */
    public static MemorySegment __tanpi$address() {
        return __tanpi.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double __tanpi(double)
     * }
     */
    public static double __tanpi(double x0) {
        var mh$ = __tanpi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__tanpi", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class j0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("j0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double j0(double)
     * }
     */
    public static FunctionDescriptor j0$descriptor() {
        return j0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double j0(double)
     * }
     */
    public static MethodHandle j0$handle() {
        return j0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double j0(double)
     * }
     */
    public static MemorySegment j0$address() {
        return j0.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double j0(double)
     * }
     */
    public static double j0(double x0) {
        var mh$ = j0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("j0", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class j1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("j1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double j1(double)
     * }
     */
    public static FunctionDescriptor j1$descriptor() {
        return j1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double j1(double)
     * }
     */
    public static MethodHandle j1$handle() {
        return j1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double j1(double)
     * }
     */
    public static MemorySegment j1$address() {
        return j1.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double j1(double)
     * }
     */
    public static double j1(double x0) {
        var mh$ = j1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("j1", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class jn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_INT,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("jn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double jn(int, double)
     * }
     */
    public static FunctionDescriptor jn$descriptor() {
        return jn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double jn(int, double)
     * }
     */
    public static MethodHandle jn$handle() {
        return jn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double jn(int, double)
     * }
     */
    public static MemorySegment jn$address() {
        return jn.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double jn(int, double)
     * }
     */
    public static double jn(int x0, double x1) {
        var mh$ = jn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("jn", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class y0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("y0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double y0(double)
     * }
     */
    public static FunctionDescriptor y0$descriptor() {
        return y0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double y0(double)
     * }
     */
    public static MethodHandle y0$handle() {
        return y0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double y0(double)
     * }
     */
    public static MemorySegment y0$address() {
        return y0.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double y0(double)
     * }
     */
    public static double y0(double x0) {
        var mh$ = y0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("y0", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class y1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("y1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double y1(double)
     * }
     */
    public static FunctionDescriptor y1$descriptor() {
        return y1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double y1(double)
     * }
     */
    public static MethodHandle y1$handle() {
        return y1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double y1(double)
     * }
     */
    public static MemorySegment y1$address() {
        return y1.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double y1(double)
     * }
     */
    public static double y1(double x0) {
        var mh$ = y1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("y1", x0);
            }
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class yn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_INT,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("yn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double yn(int, double)
     * }
     */
    public static FunctionDescriptor yn$descriptor() {
        return yn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double yn(int, double)
     * }
     */
    public static MethodHandle yn$handle() {
        return yn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double yn(int, double)
     * }
     */
    public static MemorySegment yn$address() {
        return yn.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double yn(int, double)
     * }
     */
    public static double yn(int x0, double x1) {
        var mh$ = yn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("yn", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scalb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE,
                webgpu_h.C_DOUBLE);

        public static final MemorySegment ADDR = webgpu_h.findOrThrow("scalb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c : * extern double scalb(double, double)
     * }
     */
    public static FunctionDescriptor scalb$descriptor() {
        return scalb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c : * extern double scalb(double, double)
     * }
     */
    public static MethodHandle scalb$handle() {
        return scalb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c : * extern double scalb(double, double)
     * }
     */
    public static MemorySegment scalb$address() {
        return scalb.ADDR;
    }

    /**
     * {@snippet lang = c : * extern double scalb(double, double)
     * }
     */
    public static double scalb(double x0, double x1) {
        var mh$ = scalb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scalb", x0, x1);
            }
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class signgam$constants {
        public static final OfInt LAYOUT = webgpu_h.C_INT;
        public static final MemorySegment SEGMENT = webgpu_h.findOrThrow("signgam").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang = c : * extern int signgam
     * }
     */
    public static OfInt signgam$layout() {
        return signgam$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang = c : * extern int signgam
     * }
     */
    public static MemorySegment signgam$segment() {
        return signgam$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang = c : * extern int signgam
     * }
     */
    public static int signgam() {
        return signgam$constants.SEGMENT.get(signgam$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang = c : * extern int signgam
     * }
     */
    public static void signgam(int varValue) {
        signgam$constants.SEGMENT.set(signgam$constants.LAYOUT, 0L, varValue);
    }

    /**
     * {@snippet lang = c : * typedef uint64_t WGPUFlags
     * }
     */
    public static final OfLong WGPUFlags = webgpu_h.C_LONG_LONG;
    /**
     * {@snippet lang = c : * typedef uint32_t WGPUBool
     * }
     */
    public static final OfInt WGPUBool = webgpu_h.C_INT;
    /**
     * {@snippet lang = c : * typedef struct WGPUAdapterImpl *WGPUAdapter
     * }
     */
    public static final AddressLayout WGPUAdapter = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUBindGroupImpl *WGPUBindGroup
     * }
     */
    public static final AddressLayout WGPUBindGroup = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c
     * : * typedef struct WGPUBindGroupLayoutImpl *WGPUBindGroupLayout
     * }
     */
    public static final AddressLayout WGPUBindGroupLayout = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUBufferImpl *WGPUBuffer
     * }
     */
    public static final AddressLayout WGPUBuffer = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c
     * : * typedef struct WGPUCommandBufferImpl *WGPUCommandBuffer
     * }
     */
    public static final AddressLayout WGPUCommandBuffer = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c
     * : * typedef struct WGPUCommandEncoderImpl *WGPUCommandEncoder
     * }
     */
    public static final AddressLayout WGPUCommandEncoder = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c
     * : * typedef struct WGPUComputePassEncoderImpl *WGPUComputePassEncoder
     * }
     */
    public static final AddressLayout WGPUComputePassEncoder = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c
     * : * typedef struct WGPUComputePipelineImpl *WGPUComputePipeline
     * }
     */
    public static final AddressLayout WGPUComputePipeline = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUDeviceImpl *WGPUDevice
     * }
     */
    public static final AddressLayout WGPUDevice = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUInstanceImpl *WGPUInstance
     * }
     */
    public static final AddressLayout WGPUInstance = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c
     * : * typedef struct WGPUPipelineLayoutImpl *WGPUPipelineLayout
     * }
     */
    public static final AddressLayout WGPUPipelineLayout = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUQuerySetImpl *WGPUQuerySet
     * }
     */
    public static final AddressLayout WGPUQuerySet = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUQueueImpl *WGPUQueue
     * }
     */
    public static final AddressLayout WGPUQueue = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPURenderBundleImpl *WGPURenderBundle
     * }
     */
    public static final AddressLayout WGPURenderBundle = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c
     * : * typedef struct WGPURenderBundleEncoderImpl *WGPURenderBundleEncoder
     * }
     */
    public static final AddressLayout WGPURenderBundleEncoder = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c
     * : * typedef struct WGPURenderPassEncoderImpl *WGPURenderPassEncoder
     * }
     */
    public static final AddressLayout WGPURenderPassEncoder = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c
     * : * typedef struct WGPURenderPipelineImpl *WGPURenderPipeline
     * }
     */
    public static final AddressLayout WGPURenderPipeline = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUSamplerImpl *WGPUSampler
     * }
     */
    public static final AddressLayout WGPUSampler = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUShaderModuleImpl *WGPUShaderModule
     * }
     */
    public static final AddressLayout WGPUShaderModule = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUSurfaceImpl *WGPUSurface
     * }
     */
    public static final AddressLayout WGPUSurface = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUTextureImpl *WGPUTexture
     * }
     */
    public static final AddressLayout WGPUTexture = webgpu_h.C_POINTER;
    /**
     * {@snippet lang = c : * typedef struct WGPUTextureViewImpl *WGPUTextureView
     * }
     */
    public static final AddressLayout WGPUTextureView = webgpu_h.C_POINTER;
    private static final int WGPUAdapterType_DiscreteGPU = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUAdapterType.WGPUAdapterType_DiscreteGPU = 1
     * }
     */
    public static int WGPUAdapterType_DiscreteGPU() {
        return WGPUAdapterType_DiscreteGPU;
    }

    private static final int WGPUAdapterType_IntegratedGPU = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUAdapterType.WGPUAdapterType_IntegratedGPU = 2
     * }
     */
    public static int WGPUAdapterType_IntegratedGPU() {
        return WGPUAdapterType_IntegratedGPU;
    }

    private static final int WGPUAdapterType_CPU = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUAdapterType.WGPUAdapterType_CPU = 3
     * }
     */
    public static int WGPUAdapterType_CPU() {
        return WGPUAdapterType_CPU;
    }

    private static final int WGPUAdapterType_Unknown = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUAdapterType.WGPUAdapterType_Unknown = 4
     * }
     */
    public static int WGPUAdapterType_Unknown() {
        return WGPUAdapterType_Unknown;
    }

    private static final int WGPUAdapterType_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUAdapterType.WGPUAdapterType_Force32 = 2147483647
     * }
     */
    public static int WGPUAdapterType_Force32() {
        return WGPUAdapterType_Force32;
    }

    private static final int WGPUAddressMode_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUAddressMode.WGPUAddressMode_Undefined = 0
     * }
     */
    public static int WGPUAddressMode_Undefined() {
        return WGPUAddressMode_Undefined;
    }

    private static final int WGPUAddressMode_ClampToEdge = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUAddressMode.WGPUAddressMode_ClampToEdge = 1
     * }
     */
    public static int WGPUAddressMode_ClampToEdge() {
        return WGPUAddressMode_ClampToEdge;
    }

    private static final int WGPUAddressMode_Repeat = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUAddressMode.WGPUAddressMode_Repeat = 2
     * }
     */
    public static int WGPUAddressMode_Repeat() {
        return WGPUAddressMode_Repeat;
    }

    private static final int WGPUAddressMode_MirrorRepeat = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUAddressMode.WGPUAddressMode_MirrorRepeat = 3
     * }
     */
    public static int WGPUAddressMode_MirrorRepeat() {
        return WGPUAddressMode_MirrorRepeat;
    }

    private static final int WGPUAddressMode_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUAddressMode.WGPUAddressMode_Force32 = 2147483647
     * }
     */
    public static int WGPUAddressMode_Force32() {
        return WGPUAddressMode_Force32;
    }

    private static final int WGPUBackendType_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUBackendType.WGPUBackendType_Undefined = 0
     * }
     */
    public static int WGPUBackendType_Undefined() {
        return WGPUBackendType_Undefined;
    }

    private static final int WGPUBackendType_Null = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUBackendType.WGPUBackendType_Null = 1
     * }
     */
    public static int WGPUBackendType_Null() {
        return WGPUBackendType_Null;
    }

    private static final int WGPUBackendType_WebGPU = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUBackendType.WGPUBackendType_WebGPU = 2
     * }
     */
    public static int WGPUBackendType_WebGPU() {
        return WGPUBackendType_WebGPU;
    }

    private static final int WGPUBackendType_D3D11 = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUBackendType.WGPUBackendType_D3D11 = 3
     * }
     */
    public static int WGPUBackendType_D3D11() {
        return WGPUBackendType_D3D11;
    }

    private static final int WGPUBackendType_D3D12 = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUBackendType.WGPUBackendType_D3D12 = 4
     * }
     */
    public static int WGPUBackendType_D3D12() {
        return WGPUBackendType_D3D12;
    }

    private static final int WGPUBackendType_Metal = (int) 5L;

    /**
     * {@snippet lang = c : * enum WGPUBackendType.WGPUBackendType_Metal = 5
     * }
     */
    public static int WGPUBackendType_Metal() {
        return WGPUBackendType_Metal;
    }

    private static final int WGPUBackendType_Vulkan = (int) 6L;

    /**
     * {@snippet lang = c : * enum WGPUBackendType.WGPUBackendType_Vulkan = 6
     * }
     */
    public static int WGPUBackendType_Vulkan() {
        return WGPUBackendType_Vulkan;
    }

    private static final int WGPUBackendType_OpenGL = (int) 7L;

    /**
     * {@snippet lang = c : * enum WGPUBackendType.WGPUBackendType_OpenGL = 7
     * }
     */
    public static int WGPUBackendType_OpenGL() {
        return WGPUBackendType_OpenGL;
    }

    private static final int WGPUBackendType_OpenGLES = (int) 8L;

    /**
     * {@snippet lang = c : * enum WGPUBackendType.WGPUBackendType_OpenGLES = 8
     * }
     */
    public static int WGPUBackendType_OpenGLES() {
        return WGPUBackendType_OpenGLES;
    }

    private static final int WGPUBackendType_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBackendType.WGPUBackendType_Force32 = 2147483647
     * }
     */
    public static int WGPUBackendType_Force32() {
        return WGPUBackendType_Force32;
    }

    private static final int WGPUBlendFactor_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_Undefined = 0
     * }
     */
    public static int WGPUBlendFactor_Undefined() {
        return WGPUBlendFactor_Undefined;
    }

    private static final int WGPUBlendFactor_Zero = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_Zero = 1
     * }
     */
    public static int WGPUBlendFactor_Zero() {
        return WGPUBlendFactor_Zero;
    }

    private static final int WGPUBlendFactor_One = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_One = 2
     * }
     */
    public static int WGPUBlendFactor_One() {
        return WGPUBlendFactor_One;
    }

    private static final int WGPUBlendFactor_Src = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_Src = 3
     * }
     */
    public static int WGPUBlendFactor_Src() {
        return WGPUBlendFactor_Src;
    }

    private static final int WGPUBlendFactor_OneMinusSrc = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusSrc = 4
     * }
     */
    public static int WGPUBlendFactor_OneMinusSrc() {
        return WGPUBlendFactor_OneMinusSrc;
    }

    private static final int WGPUBlendFactor_SrcAlpha = (int) 5L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_SrcAlpha = 5
     * }
     */
    public static int WGPUBlendFactor_SrcAlpha() {
        return WGPUBlendFactor_SrcAlpha;
    }

    private static final int WGPUBlendFactor_OneMinusSrcAlpha = (int) 6L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusSrcAlpha = 6
     * }
     */
    public static int WGPUBlendFactor_OneMinusSrcAlpha() {
        return WGPUBlendFactor_OneMinusSrcAlpha;
    }

    private static final int WGPUBlendFactor_Dst = (int) 7L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_Dst = 7
     * }
     */
    public static int WGPUBlendFactor_Dst() {
        return WGPUBlendFactor_Dst;
    }

    private static final int WGPUBlendFactor_OneMinusDst = (int) 8L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusDst = 8
     * }
     */
    public static int WGPUBlendFactor_OneMinusDst() {
        return WGPUBlendFactor_OneMinusDst;
    }

    private static final int WGPUBlendFactor_DstAlpha = (int) 9L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_DstAlpha = 9
     * }
     */
    public static int WGPUBlendFactor_DstAlpha() {
        return WGPUBlendFactor_DstAlpha;
    }

    private static final int WGPUBlendFactor_OneMinusDstAlpha = (int) 10L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusDstAlpha = 10
     * }
     */
    public static int WGPUBlendFactor_OneMinusDstAlpha() {
        return WGPUBlendFactor_OneMinusDstAlpha;
    }

    private static final int WGPUBlendFactor_SrcAlphaSaturated = (int) 11L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendFactor.WGPUBlendFactor_SrcAlphaSaturated = 11
     * }
     */
    public static int WGPUBlendFactor_SrcAlphaSaturated() {
        return WGPUBlendFactor_SrcAlphaSaturated;
    }

    private static final int WGPUBlendFactor_Constant = (int) 12L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_Constant = 12
     * }
     */
    public static int WGPUBlendFactor_Constant() {
        return WGPUBlendFactor_Constant;
    }

    private static final int WGPUBlendFactor_OneMinusConstant = (int) 13L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusConstant = 13
     * }
     */
    public static int WGPUBlendFactor_OneMinusConstant() {
        return WGPUBlendFactor_OneMinusConstant;
    }

    private static final int WGPUBlendFactor_Src1 = (int) 14L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_Src1 = 14
     * }
     */
    public static int WGPUBlendFactor_Src1() {
        return WGPUBlendFactor_Src1;
    }

    private static final int WGPUBlendFactor_OneMinusSrc1 = (int) 15L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusSrc1 = 15
     * }
     */
    public static int WGPUBlendFactor_OneMinusSrc1() {
        return WGPUBlendFactor_OneMinusSrc1;
    }

    private static final int WGPUBlendFactor_Src1Alpha = (int) 16L;

    /**
     * {@snippet lang = c : * enum WGPUBlendFactor.WGPUBlendFactor_Src1Alpha = 16
     * }
     */
    public static int WGPUBlendFactor_Src1Alpha() {
        return WGPUBlendFactor_Src1Alpha;
    }

    private static final int WGPUBlendFactor_OneMinusSrc1Alpha = (int) 17L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendFactor.WGPUBlendFactor_OneMinusSrc1Alpha = 17
     * }
     */
    public static int WGPUBlendFactor_OneMinusSrc1Alpha() {
        return WGPUBlendFactor_OneMinusSrc1Alpha;
    }

    private static final int WGPUBlendFactor_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendFactor.WGPUBlendFactor_Force32 = 2147483647
     * }
     */
    public static int WGPUBlendFactor_Force32() {
        return WGPUBlendFactor_Force32;
    }

    private static final int WGPUBlendOperation_Undefined = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendOperation.WGPUBlendOperation_Undefined = 0
     * }
     */
    public static int WGPUBlendOperation_Undefined() {
        return WGPUBlendOperation_Undefined;
    }

    private static final int WGPUBlendOperation_Add = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUBlendOperation.WGPUBlendOperation_Add = 1
     * }
     */
    public static int WGPUBlendOperation_Add() {
        return WGPUBlendOperation_Add;
    }

    private static final int WGPUBlendOperation_Subtract = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendOperation.WGPUBlendOperation_Subtract = 2
     * }
     */
    public static int WGPUBlendOperation_Subtract() {
        return WGPUBlendOperation_Subtract;
    }

    private static final int WGPUBlendOperation_ReverseSubtract = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendOperation.WGPUBlendOperation_ReverseSubtract = 3
     * }
     */
    public static int WGPUBlendOperation_ReverseSubtract() {
        return WGPUBlendOperation_ReverseSubtract;
    }

    private static final int WGPUBlendOperation_Min = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUBlendOperation.WGPUBlendOperation_Min = 4
     * }
     */
    public static int WGPUBlendOperation_Min() {
        return WGPUBlendOperation_Min;
    }

    private static final int WGPUBlendOperation_Max = (int) 5L;

    /**
     * {@snippet lang = c : * enum WGPUBlendOperation.WGPUBlendOperation_Max = 5
     * }
     */
    public static int WGPUBlendOperation_Max() {
        return WGPUBlendOperation_Max;
    }

    private static final int WGPUBlendOperation_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBlendOperation.WGPUBlendOperation_Force32 = 2147483647
     * }
     */
    public static int WGPUBlendOperation_Force32() {
        return WGPUBlendOperation_Force32;
    }

    private static final int WGPUBufferBindingType_BindingNotUsed = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBufferBindingType.WGPUBufferBindingType_BindingNotUsed = 0
     * }
     */
    public static int WGPUBufferBindingType_BindingNotUsed() {
        return WGPUBufferBindingType_BindingNotUsed;
    }

    private static final int WGPUBufferBindingType_Undefined = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBufferBindingType.WGPUBufferBindingType_Undefined = 1
     * }
     */
    public static int WGPUBufferBindingType_Undefined() {
        return WGPUBufferBindingType_Undefined;
    }

    private static final int WGPUBufferBindingType_Uniform = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBufferBindingType.WGPUBufferBindingType_Uniform = 2
     * }
     */
    public static int WGPUBufferBindingType_Uniform() {
        return WGPUBufferBindingType_Uniform;
    }

    private static final int WGPUBufferBindingType_Storage = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBufferBindingType.WGPUBufferBindingType_Storage = 3
     * }
     */
    public static int WGPUBufferBindingType_Storage() {
        return WGPUBufferBindingType_Storage;
    }

    private static final int WGPUBufferBindingType_ReadOnlyStorage = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBufferBindingType.WGPUBufferBindingType_ReadOnlyStorage = 4
     * }
     */
    public static int WGPUBufferBindingType_ReadOnlyStorage() {
        return WGPUBufferBindingType_ReadOnlyStorage;
    }

    private static final int WGPUBufferBindingType_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBufferBindingType.WGPUBufferBindingType_Force32 = 2147483647
     * }
     */
    public static int WGPUBufferBindingType_Force32() {
        return WGPUBufferBindingType_Force32;
    }

    private static final int WGPUBufferMapState_Unmapped = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBufferMapState.WGPUBufferMapState_Unmapped = 1
     * }
     */
    public static int WGPUBufferMapState_Unmapped() {
        return WGPUBufferMapState_Unmapped;
    }

    private static final int WGPUBufferMapState_Pending = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUBufferMapState.WGPUBufferMapState_Pending = 2
     * }
     */
    public static int WGPUBufferMapState_Pending() {
        return WGPUBufferMapState_Pending;
    }

    private static final int WGPUBufferMapState_Mapped = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUBufferMapState.WGPUBufferMapState_Mapped = 3
     * }
     */
    public static int WGPUBufferMapState_Mapped() {
        return WGPUBufferMapState_Mapped;
    }

    private static final int WGPUBufferMapState_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUBufferMapState.WGPUBufferMapState_Force32 = 2147483647
     * }
     */
    public static int WGPUBufferMapState_Force32() {
        return WGPUBufferMapState_Force32;
    }

    private static final int WGPUCallbackMode_WaitAnyOnly = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUCallbackMode.WGPUCallbackMode_WaitAnyOnly = 1
     * }
     */
    public static int WGPUCallbackMode_WaitAnyOnly() {
        return WGPUCallbackMode_WaitAnyOnly;
    }

    private static final int WGPUCallbackMode_AllowProcessEvents = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCallbackMode.WGPUCallbackMode_AllowProcessEvents = 2
     * }
     */
    public static int WGPUCallbackMode_AllowProcessEvents() {
        return WGPUCallbackMode_AllowProcessEvents;
    }

    private static final int WGPUCallbackMode_AllowSpontaneous = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCallbackMode.WGPUCallbackMode_AllowSpontaneous = 3
     * }
     */
    public static int WGPUCallbackMode_AllowSpontaneous() {
        return WGPUCallbackMode_AllowSpontaneous;
    }

    private static final int WGPUCallbackMode_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCallbackMode.WGPUCallbackMode_Force32 = 2147483647
     * }
     */
    public static int WGPUCallbackMode_Force32() {
        return WGPUCallbackMode_Force32;
    }

    private static final int WGPUCompareFunction_Undefined = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompareFunction.WGPUCompareFunction_Undefined = 0
     * }
     */
    public static int WGPUCompareFunction_Undefined() {
        return WGPUCompareFunction_Undefined;
    }

    private static final int WGPUCompareFunction_Never = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUCompareFunction.WGPUCompareFunction_Never = 1
     * }
     */
    public static int WGPUCompareFunction_Never() {
        return WGPUCompareFunction_Never;
    }

    private static final int WGPUCompareFunction_Less = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUCompareFunction.WGPUCompareFunction_Less = 2
     * }
     */
    public static int WGPUCompareFunction_Less() {
        return WGPUCompareFunction_Less;
    }

    private static final int WGPUCompareFunction_Equal = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUCompareFunction.WGPUCompareFunction_Equal = 3
     * }
     */
    public static int WGPUCompareFunction_Equal() {
        return WGPUCompareFunction_Equal;
    }

    private static final int WGPUCompareFunction_LessEqual = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompareFunction.WGPUCompareFunction_LessEqual = 4
     * }
     */
    public static int WGPUCompareFunction_LessEqual() {
        return WGPUCompareFunction_LessEqual;
    }

    private static final int WGPUCompareFunction_Greater = (int) 5L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompareFunction.WGPUCompareFunction_Greater = 5
     * }
     */
    public static int WGPUCompareFunction_Greater() {
        return WGPUCompareFunction_Greater;
    }

    private static final int WGPUCompareFunction_NotEqual = (int) 6L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompareFunction.WGPUCompareFunction_NotEqual = 6
     * }
     */
    public static int WGPUCompareFunction_NotEqual() {
        return WGPUCompareFunction_NotEqual;
    }

    private static final int WGPUCompareFunction_GreaterEqual = (int) 7L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompareFunction.WGPUCompareFunction_GreaterEqual = 7
     * }
     */
    public static int WGPUCompareFunction_GreaterEqual() {
        return WGPUCompareFunction_GreaterEqual;
    }

    private static final int WGPUCompareFunction_Always = (int) 8L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompareFunction.WGPUCompareFunction_Always = 8
     * }
     */
    public static int WGPUCompareFunction_Always() {
        return WGPUCompareFunction_Always;
    }

    private static final int WGPUCompareFunction_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompareFunction.WGPUCompareFunction_Force32 = 2147483647
     * }
     */
    public static int WGPUCompareFunction_Force32() {
        return WGPUCompareFunction_Force32;
    }

    private static final int WGPUCompilationInfoRequestStatus_Success = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompilationInfoRequestStatus.WGPUCompilationInfoRequestStatus_Success = 1
     * }
     */
    public static int WGPUCompilationInfoRequestStatus_Success() {
        return WGPUCompilationInfoRequestStatus_Success;
    }

    private static final int WGPUCompilationInfoRequestStatus_CallbackCancelled = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompilationInfoRequestStatus.WGPUCompilationInfoRequestStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUCompilationInfoRequestStatus_CallbackCancelled() {
        return WGPUCompilationInfoRequestStatus_CallbackCancelled;
    }

    private static final int WGPUCompilationInfoRequestStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompilationInfoRequestStatus.WGPUCompilationInfoRequestStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUCompilationInfoRequestStatus_Force32() {
        return WGPUCompilationInfoRequestStatus_Force32;
    }

    private static final int WGPUCompilationMessageType_Error = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompilationMessageType.WGPUCompilationMessageType_Error = 1
     * }
     */
    public static int WGPUCompilationMessageType_Error() {
        return WGPUCompilationMessageType_Error;
    }

    private static final int WGPUCompilationMessageType_Warning = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompilationMessageType.WGPUCompilationMessageType_Warning = 2
     * }
     */
    public static int WGPUCompilationMessageType_Warning() {
        return WGPUCompilationMessageType_Warning;
    }

    private static final int WGPUCompilationMessageType_Info = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompilationMessageType.WGPUCompilationMessageType_Info = 3
     * }
     */
    public static int WGPUCompilationMessageType_Info() {
        return WGPUCompilationMessageType_Info;
    }

    private static final int WGPUCompilationMessageType_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompilationMessageType.WGPUCompilationMessageType_Force32 = 2147483647
     * }
     */
    public static int WGPUCompilationMessageType_Force32() {
        return WGPUCompilationMessageType_Force32;
    }

    private static final int WGPUCompositeAlphaMode_Auto = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Auto = 0
     * }
     */
    public static int WGPUCompositeAlphaMode_Auto() {
        return WGPUCompositeAlphaMode_Auto;
    }

    private static final int WGPUCompositeAlphaMode_Opaque = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Opaque = 1
     * }
     */
    public static int WGPUCompositeAlphaMode_Opaque() {
        return WGPUCompositeAlphaMode_Opaque;
    }

    private static final int WGPUCompositeAlphaMode_Premultiplied = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Premultiplied = 2
     * }
     */
    public static int WGPUCompositeAlphaMode_Premultiplied() {
        return WGPUCompositeAlphaMode_Premultiplied;
    }

    private static final int WGPUCompositeAlphaMode_Unpremultiplied = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Unpremultiplied = 3
     * }
     */
    public static int WGPUCompositeAlphaMode_Unpremultiplied() {
        return WGPUCompositeAlphaMode_Unpremultiplied;
    }

    private static final int WGPUCompositeAlphaMode_Inherit = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Inherit = 4
     * }
     */
    public static int WGPUCompositeAlphaMode_Inherit() {
        return WGPUCompositeAlphaMode_Inherit;
    }

    private static final int WGPUCompositeAlphaMode_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCompositeAlphaMode.WGPUCompositeAlphaMode_Force32 = 2147483647
     * }
     */
    public static int WGPUCompositeAlphaMode_Force32() {
        return WGPUCompositeAlphaMode_Force32;
    }

    private static final int WGPUCreatePipelineAsyncStatus_Success = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_Success = 1
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_Success() {
        return WGPUCreatePipelineAsyncStatus_Success;
    }

    private static final int WGPUCreatePipelineAsyncStatus_CallbackCancelled = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_CallbackCancelled() {
        return WGPUCreatePipelineAsyncStatus_CallbackCancelled;
    }

    private static final int WGPUCreatePipelineAsyncStatus_ValidationError = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_ValidationError = 3
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_ValidationError() {
        return WGPUCreatePipelineAsyncStatus_ValidationError;
    }

    private static final int WGPUCreatePipelineAsyncStatus_InternalError = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_InternalError = 4
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_InternalError() {
        return WGPUCreatePipelineAsyncStatus_InternalError;
    }

    private static final int WGPUCreatePipelineAsyncStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUCreatePipelineAsyncStatus.WGPUCreatePipelineAsyncStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUCreatePipelineAsyncStatus_Force32() {
        return WGPUCreatePipelineAsyncStatus_Force32;
    }

    private static final int WGPUCullMode_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUCullMode.WGPUCullMode_Undefined = 0
     * }
     */
    public static int WGPUCullMode_Undefined() {
        return WGPUCullMode_Undefined;
    }

    private static final int WGPUCullMode_None = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUCullMode.WGPUCullMode_None = 1
     * }
     */
    public static int WGPUCullMode_None() {
        return WGPUCullMode_None;
    }

    private static final int WGPUCullMode_Front = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUCullMode.WGPUCullMode_Front = 2
     * }
     */
    public static int WGPUCullMode_Front() {
        return WGPUCullMode_Front;
    }

    private static final int WGPUCullMode_Back = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUCullMode.WGPUCullMode_Back = 3
     * }
     */
    public static int WGPUCullMode_Back() {
        return WGPUCullMode_Back;
    }

    private static final int WGPUCullMode_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c : * enum WGPUCullMode.WGPUCullMode_Force32 = 2147483647
     * }
     */
    public static int WGPUCullMode_Force32() {
        return WGPUCullMode_Force32;
    }

    private static final int WGPUDeviceLostReason_Unknown = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUDeviceLostReason.WGPUDeviceLostReason_Unknown = 1
     * }
     */
    public static int WGPUDeviceLostReason_Unknown() {
        return WGPUDeviceLostReason_Unknown;
    }

    private static final int WGPUDeviceLostReason_Destroyed = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUDeviceLostReason.WGPUDeviceLostReason_Destroyed = 2
     * }
     */
    public static int WGPUDeviceLostReason_Destroyed() {
        return WGPUDeviceLostReason_Destroyed;
    }

    private static final int WGPUDeviceLostReason_CallbackCancelled = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUDeviceLostReason.WGPUDeviceLostReason_CallbackCancelled = 3
     * }
     */
    public static int WGPUDeviceLostReason_CallbackCancelled() {
        return WGPUDeviceLostReason_CallbackCancelled;
    }

    private static final int WGPUDeviceLostReason_FailedCreation = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUDeviceLostReason.WGPUDeviceLostReason_FailedCreation = 4
     * }
     */
    public static int WGPUDeviceLostReason_FailedCreation() {
        return WGPUDeviceLostReason_FailedCreation;
    }

    private static final int WGPUDeviceLostReason_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUDeviceLostReason.WGPUDeviceLostReason_Force32 = 2147483647
     * }
     */
    public static int WGPUDeviceLostReason_Force32() {
        return WGPUDeviceLostReason_Force32;
    }

    private static final int WGPUErrorFilter_Validation = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUErrorFilter.WGPUErrorFilter_Validation = 1
     * }
     */
    public static int WGPUErrorFilter_Validation() {
        return WGPUErrorFilter_Validation;
    }

    private static final int WGPUErrorFilter_OutOfMemory = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUErrorFilter.WGPUErrorFilter_OutOfMemory = 2
     * }
     */
    public static int WGPUErrorFilter_OutOfMemory() {
        return WGPUErrorFilter_OutOfMemory;
    }

    private static final int WGPUErrorFilter_Internal = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUErrorFilter.WGPUErrorFilter_Internal = 3
     * }
     */
    public static int WGPUErrorFilter_Internal() {
        return WGPUErrorFilter_Internal;
    }

    private static final int WGPUErrorFilter_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUErrorFilter.WGPUErrorFilter_Force32 = 2147483647
     * }
     */
    public static int WGPUErrorFilter_Force32() {
        return WGPUErrorFilter_Force32;
    }

    private static final int WGPUErrorType_NoError = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUErrorType.WGPUErrorType_NoError = 1
     * }
     */
    public static int WGPUErrorType_NoError() {
        return WGPUErrorType_NoError;
    }

    private static final int WGPUErrorType_Validation = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUErrorType.WGPUErrorType_Validation = 2
     * }
     */
    public static int WGPUErrorType_Validation() {
        return WGPUErrorType_Validation;
    }

    private static final int WGPUErrorType_OutOfMemory = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUErrorType.WGPUErrorType_OutOfMemory = 3
     * }
     */
    public static int WGPUErrorType_OutOfMemory() {
        return WGPUErrorType_OutOfMemory;
    }

    private static final int WGPUErrorType_Internal = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUErrorType.WGPUErrorType_Internal = 4
     * }
     */
    public static int WGPUErrorType_Internal() {
        return WGPUErrorType_Internal;
    }

    private static final int WGPUErrorType_Unknown = (int) 5L;

    /**
     * {@snippet lang = c : * enum WGPUErrorType.WGPUErrorType_Unknown = 5
     * }
     */
    public static int WGPUErrorType_Unknown() {
        return WGPUErrorType_Unknown;
    }

    private static final int WGPUErrorType_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c : * enum WGPUErrorType.WGPUErrorType_Force32 = 2147483647
     * }
     */
    public static int WGPUErrorType_Force32() {
        return WGPUErrorType_Force32;
    }

    private static final int WGPUFeatureLevel_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUFeatureLevel.WGPUFeatureLevel_Undefined = 0
     * }
     */
    public static int WGPUFeatureLevel_Undefined() {
        return WGPUFeatureLevel_Undefined;
    }

    private static final int WGPUFeatureLevel_Compatibility = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureLevel.WGPUFeatureLevel_Compatibility = 1
     * }
     */
    public static int WGPUFeatureLevel_Compatibility() {
        return WGPUFeatureLevel_Compatibility;
    }

    private static final int WGPUFeatureLevel_Core = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUFeatureLevel.WGPUFeatureLevel_Core = 2
     * }
     */
    public static int WGPUFeatureLevel_Core() {
        return WGPUFeatureLevel_Core;
    }

    private static final int WGPUFeatureLevel_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureLevel.WGPUFeatureLevel_Force32 = 2147483647
     * }
     */
    public static int WGPUFeatureLevel_Force32() {
        return WGPUFeatureLevel_Force32;
    }

    private static final int WGPUFeatureName_DepthClipControl = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_DepthClipControl = 1
     * }
     */
    public static int WGPUFeatureName_DepthClipControl() {
        return WGPUFeatureName_DepthClipControl;
    }

    private static final int WGPUFeatureName_Depth32FloatStencil8 = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_Depth32FloatStencil8 = 2
     * }
     */
    public static int WGPUFeatureName_Depth32FloatStencil8() {
        return WGPUFeatureName_Depth32FloatStencil8;
    }

    private static final int WGPUFeatureName_TimestampQuery = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_TimestampQuery = 3
     * }
     */
    public static int WGPUFeatureName_TimestampQuery() {
        return WGPUFeatureName_TimestampQuery;
    }

    private static final int WGPUFeatureName_TextureCompressionBC = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionBC = 4
     * }
     */
    public static int WGPUFeatureName_TextureCompressionBC() {
        return WGPUFeatureName_TextureCompressionBC;
    }

    private static final int WGPUFeatureName_TextureCompressionBCSliced3D = (int) 5L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionBCSliced3D = 5
     * }
     */
    public static int WGPUFeatureName_TextureCompressionBCSliced3D() {
        return WGPUFeatureName_TextureCompressionBCSliced3D;
    }

    private static final int WGPUFeatureName_TextureCompressionETC2 = (int) 6L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionETC2 = 6
     * }
     */
    public static int WGPUFeatureName_TextureCompressionETC2() {
        return WGPUFeatureName_TextureCompressionETC2;
    }

    private static final int WGPUFeatureName_TextureCompressionASTC = (int) 7L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionASTC = 7
     * }
     */
    public static int WGPUFeatureName_TextureCompressionASTC() {
        return WGPUFeatureName_TextureCompressionASTC;
    }

    private static final int WGPUFeatureName_TextureCompressionASTCSliced3D = (int) 8L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_TextureCompressionASTCSliced3D = 8
     * }
     */
    public static int WGPUFeatureName_TextureCompressionASTCSliced3D() {
        return WGPUFeatureName_TextureCompressionASTCSliced3D;
    }

    private static final int WGPUFeatureName_IndirectFirstInstance = (int) 9L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_IndirectFirstInstance = 9
     * }
     */
    public static int WGPUFeatureName_IndirectFirstInstance() {
        return WGPUFeatureName_IndirectFirstInstance;
    }

    private static final int WGPUFeatureName_ShaderF16 = (int) 10L;

    /**
     * {@snippet lang = c : * enum WGPUFeatureName.WGPUFeatureName_ShaderF16 = 10
     * }
     */
    public static int WGPUFeatureName_ShaderF16() {
        return WGPUFeatureName_ShaderF16;
    }

    private static final int WGPUFeatureName_RG11B10UfloatRenderable = (int) 11L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_RG11B10UfloatRenderable = 11
     * }
     */
    public static int WGPUFeatureName_RG11B10UfloatRenderable() {
        return WGPUFeatureName_RG11B10UfloatRenderable;
    }

    private static final int WGPUFeatureName_BGRA8UnormStorage = (int) 12L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_BGRA8UnormStorage = 12
     * }
     */
    public static int WGPUFeatureName_BGRA8UnormStorage() {
        return WGPUFeatureName_BGRA8UnormStorage;
    }

    private static final int WGPUFeatureName_Float32Filterable = (int) 13L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_Float32Filterable = 13
     * }
     */
    public static int WGPUFeatureName_Float32Filterable() {
        return WGPUFeatureName_Float32Filterable;
    }

    private static final int WGPUFeatureName_Float32Blendable = (int) 14L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_Float32Blendable = 14
     * }
     */
    public static int WGPUFeatureName_Float32Blendable() {
        return WGPUFeatureName_Float32Blendable;
    }

    private static final int WGPUFeatureName_ClipDistances = (int) 15L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_ClipDistances = 15
     * }
     */
    public static int WGPUFeatureName_ClipDistances() {
        return WGPUFeatureName_ClipDistances;
    }

    private static final int WGPUFeatureName_DualSourceBlending = (int) 16L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_DualSourceBlending = 16
     * }
     */
    public static int WGPUFeatureName_DualSourceBlending() {
        return WGPUFeatureName_DualSourceBlending;
    }

    private static final int WGPUFeatureName_Subgroups = (int) 17L;

    /**
     * {@snippet lang = c : * enum WGPUFeatureName.WGPUFeatureName_Subgroups = 17
     * }
     */
    public static int WGPUFeatureName_Subgroups() {
        return WGPUFeatureName_Subgroups;
    }

    private static final int WGPUFeatureName_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFeatureName.WGPUFeatureName_Force32 = 2147483647
     * }
     */
    public static int WGPUFeatureName_Force32() {
        return WGPUFeatureName_Force32;
    }

    private static final int WGPUFilterMode_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUFilterMode.WGPUFilterMode_Undefined = 0
     * }
     */
    public static int WGPUFilterMode_Undefined() {
        return WGPUFilterMode_Undefined;
    }

    private static final int WGPUFilterMode_Nearest = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUFilterMode.WGPUFilterMode_Nearest = 1
     * }
     */
    public static int WGPUFilterMode_Nearest() {
        return WGPUFilterMode_Nearest;
    }

    private static final int WGPUFilterMode_Linear = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUFilterMode.WGPUFilterMode_Linear = 2
     * }
     */
    public static int WGPUFilterMode_Linear() {
        return WGPUFilterMode_Linear;
    }

    private static final int WGPUFilterMode_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUFilterMode.WGPUFilterMode_Force32 = 2147483647
     * }
     */
    public static int WGPUFilterMode_Force32() {
        return WGPUFilterMode_Force32;
    }

    private static final int WGPUFrontFace_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUFrontFace.WGPUFrontFace_Undefined = 0
     * }
     */
    public static int WGPUFrontFace_Undefined() {
        return WGPUFrontFace_Undefined;
    }

    private static final int WGPUFrontFace_CCW = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUFrontFace.WGPUFrontFace_CCW = 1
     * }
     */
    public static int WGPUFrontFace_CCW() {
        return WGPUFrontFace_CCW;
    }

    private static final int WGPUFrontFace_CW = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUFrontFace.WGPUFrontFace_CW = 2
     * }
     */
    public static int WGPUFrontFace_CW() {
        return WGPUFrontFace_CW;
    }

    private static final int WGPUFrontFace_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c : * enum WGPUFrontFace.WGPUFrontFace_Force32 = 2147483647
     * }
     */
    public static int WGPUFrontFace_Force32() {
        return WGPUFrontFace_Force32;
    }

    private static final int WGPUIndexFormat_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUIndexFormat.WGPUIndexFormat_Undefined = 0
     * }
     */
    public static int WGPUIndexFormat_Undefined() {
        return WGPUIndexFormat_Undefined;
    }

    private static final int WGPUIndexFormat_Uint16 = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUIndexFormat.WGPUIndexFormat_Uint16 = 1
     * }
     */
    public static int WGPUIndexFormat_Uint16() {
        return WGPUIndexFormat_Uint16;
    }

    private static final int WGPUIndexFormat_Uint32 = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUIndexFormat.WGPUIndexFormat_Uint32 = 2
     * }
     */
    public static int WGPUIndexFormat_Uint32() {
        return WGPUIndexFormat_Uint32;
    }

    private static final int WGPUIndexFormat_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUIndexFormat.WGPUIndexFormat_Force32 = 2147483647
     * }
     */
    public static int WGPUIndexFormat_Force32() {
        return WGPUIndexFormat_Force32;
    }

    private static final int WGPUInstanceFeatureName_TimedWaitAnyEnable = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUInstanceFeatureName.WGPUInstanceFeatureName_TimedWaitAnyEnable = 1
     * }
     */
    public static int WGPUInstanceFeatureName_TimedWaitAnyEnable() {
        return WGPUInstanceFeatureName_TimedWaitAnyEnable;
    }

    private static final int WGPUInstanceFeatureName_ShaderSourceSPIRV = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUInstanceFeatureName.WGPUInstanceFeatureName_ShaderSourceSPIRV = 2
     * }
     */
    public static int WGPUInstanceFeatureName_ShaderSourceSPIRV() {
        return WGPUInstanceFeatureName_ShaderSourceSPIRV;
    }

    private static final int WGPUInstanceFeatureName_MultipleDevicesPerAdapter = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUInstanceFeatureName.WGPUInstanceFeatureName_MultipleDevicesPerAdapter = 3
     * }
     */
    public static int WGPUInstanceFeatureName_MultipleDevicesPerAdapter() {
        return WGPUInstanceFeatureName_MultipleDevicesPerAdapter;
    }

    private static final int WGPUInstanceFeatureName_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUInstanceFeatureName.WGPUInstanceFeatureName_Force32 = 2147483647
     * }
     */
    public static int WGPUInstanceFeatureName_Force32() {
        return WGPUInstanceFeatureName_Force32;
    }

    private static final int WGPULoadOp_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPULoadOp.WGPULoadOp_Undefined = 0
     * }
     */
    public static int WGPULoadOp_Undefined() {
        return WGPULoadOp_Undefined;
    }

    private static final int WGPULoadOp_Load = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPULoadOp.WGPULoadOp_Load = 1
     * }
     */
    public static int WGPULoadOp_Load() {
        return WGPULoadOp_Load;
    }

    private static final int WGPULoadOp_Clear = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPULoadOp.WGPULoadOp_Clear = 2
     * }
     */
    public static int WGPULoadOp_Clear() {
        return WGPULoadOp_Clear;
    }

    private static final int WGPULoadOp_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c : * enum WGPULoadOp.WGPULoadOp_Force32 = 2147483647
     * }
     */
    public static int WGPULoadOp_Force32() {
        return WGPULoadOp_Force32;
    }

    private static final int WGPUMapAsyncStatus_Success = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_Success = 1
     * }
     */
    public static int WGPUMapAsyncStatus_Success() {
        return WGPUMapAsyncStatus_Success;
    }

    private static final int WGPUMapAsyncStatus_CallbackCancelled = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUMapAsyncStatus_CallbackCancelled() {
        return WGPUMapAsyncStatus_CallbackCancelled;
    }

    private static final int WGPUMapAsyncStatus_Error = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_Error = 3
     * }
     */
    public static int WGPUMapAsyncStatus_Error() {
        return WGPUMapAsyncStatus_Error;
    }

    private static final int WGPUMapAsyncStatus_Aborted = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_Aborted = 4
     * }
     */
    public static int WGPUMapAsyncStatus_Aborted() {
        return WGPUMapAsyncStatus_Aborted;
    }

    private static final int WGPUMapAsyncStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUMapAsyncStatus.WGPUMapAsyncStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUMapAsyncStatus_Force32() {
        return WGPUMapAsyncStatus_Force32;
    }

    private static final int WGPUMipmapFilterMode_Undefined = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUMipmapFilterMode.WGPUMipmapFilterMode_Undefined = 0
     * }
     */
    public static int WGPUMipmapFilterMode_Undefined() {
        return WGPUMipmapFilterMode_Undefined;
    }

    private static final int WGPUMipmapFilterMode_Nearest = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUMipmapFilterMode.WGPUMipmapFilterMode_Nearest = 1
     * }
     */
    public static int WGPUMipmapFilterMode_Nearest() {
        return WGPUMipmapFilterMode_Nearest;
    }

    private static final int WGPUMipmapFilterMode_Linear = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUMipmapFilterMode.WGPUMipmapFilterMode_Linear = 2
     * }
     */
    public static int WGPUMipmapFilterMode_Linear() {
        return WGPUMipmapFilterMode_Linear;
    }

    private static final int WGPUMipmapFilterMode_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUMipmapFilterMode.WGPUMipmapFilterMode_Force32 = 2147483647
     * }
     */
    public static int WGPUMipmapFilterMode_Force32() {
        return WGPUMipmapFilterMode_Force32;
    }

    private static final int WGPUOptionalBool_False = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUOptionalBool.WGPUOptionalBool_False = 0
     * }
     */
    public static int WGPUOptionalBool_False() {
        return WGPUOptionalBool_False;
    }

    private static final int WGPUOptionalBool_True = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUOptionalBool.WGPUOptionalBool_True = 1
     * }
     */
    public static int WGPUOptionalBool_True() {
        return WGPUOptionalBool_True;
    }

    private static final int WGPUOptionalBool_Undefined = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUOptionalBool.WGPUOptionalBool_Undefined = 2
     * }
     */
    public static int WGPUOptionalBool_Undefined() {
        return WGPUOptionalBool_Undefined;
    }

    private static final int WGPUOptionalBool_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUOptionalBool.WGPUOptionalBool_Force32 = 2147483647
     * }
     */
    public static int WGPUOptionalBool_Force32() {
        return WGPUOptionalBool_Force32;
    }

    private static final int WGPUPopErrorScopeStatus_Success = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPopErrorScopeStatus.WGPUPopErrorScopeStatus_Success = 1
     * }
     */
    public static int WGPUPopErrorScopeStatus_Success() {
        return WGPUPopErrorScopeStatus_Success;
    }

    private static final int WGPUPopErrorScopeStatus_CallbackCancelled = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPopErrorScopeStatus.WGPUPopErrorScopeStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUPopErrorScopeStatus_CallbackCancelled() {
        return WGPUPopErrorScopeStatus_CallbackCancelled;
    }

    private static final int WGPUPopErrorScopeStatus_Error = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPopErrorScopeStatus.WGPUPopErrorScopeStatus_Error = 3
     * }
     */
    public static int WGPUPopErrorScopeStatus_Error() {
        return WGPUPopErrorScopeStatus_Error;
    }

    private static final int WGPUPopErrorScopeStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPopErrorScopeStatus.WGPUPopErrorScopeStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUPopErrorScopeStatus_Force32() {
        return WGPUPopErrorScopeStatus_Force32;
    }

    private static final int WGPUPowerPreference_Undefined = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPowerPreference.WGPUPowerPreference_Undefined = 0
     * }
     */
    public static int WGPUPowerPreference_Undefined() {
        return WGPUPowerPreference_Undefined;
    }

    private static final int WGPUPowerPreference_LowPower = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPowerPreference.WGPUPowerPreference_LowPower = 1
     * }
     */
    public static int WGPUPowerPreference_LowPower() {
        return WGPUPowerPreference_LowPower;
    }

    private static final int WGPUPowerPreference_HighPerformance = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPowerPreference.WGPUPowerPreference_HighPerformance = 2
     * }
     */
    public static int WGPUPowerPreference_HighPerformance() {
        return WGPUPowerPreference_HighPerformance;
    }

    private static final int WGPUPowerPreference_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPowerPreference.WGPUPowerPreference_Force32 = 2147483647
     * }
     */
    public static int WGPUPowerPreference_Force32() {
        return WGPUPowerPreference_Force32;
    }

    private static final int WGPUPredefinedColorSpace_SRGB = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPredefinedColorSpace.WGPUPredefinedColorSpace_SRGB = 1
     * }
     */
    public static int WGPUPredefinedColorSpace_SRGB() {
        return WGPUPredefinedColorSpace_SRGB;
    }

    private static final int WGPUPredefinedColorSpace_DisplayP3 = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPredefinedColorSpace.WGPUPredefinedColorSpace_DisplayP3 = 2
     * }
     */
    public static int WGPUPredefinedColorSpace_DisplayP3() {
        return WGPUPredefinedColorSpace_DisplayP3;
    }

    private static final int WGPUPredefinedColorSpace_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPredefinedColorSpace.WGPUPredefinedColorSpace_Force32 = 2147483647
     * }
     */
    public static int WGPUPredefinedColorSpace_Force32() {
        return WGPUPredefinedColorSpace_Force32;
    }

    private static final int WGPUPresentMode_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUPresentMode.WGPUPresentMode_Undefined = 0
     * }
     */
    public static int WGPUPresentMode_Undefined() {
        return WGPUPresentMode_Undefined;
    }

    private static final int WGPUPresentMode_Fifo = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUPresentMode.WGPUPresentMode_Fifo = 1
     * }
     */
    public static int WGPUPresentMode_Fifo() {
        return WGPUPresentMode_Fifo;
    }

    private static final int WGPUPresentMode_FifoRelaxed = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUPresentMode.WGPUPresentMode_FifoRelaxed = 2
     * }
     */
    public static int WGPUPresentMode_FifoRelaxed() {
        return WGPUPresentMode_FifoRelaxed;
    }

    private static final int WGPUPresentMode_Immediate = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUPresentMode.WGPUPresentMode_Immediate = 3
     * }
     */
    public static int WGPUPresentMode_Immediate() {
        return WGPUPresentMode_Immediate;
    }

    private static final int WGPUPresentMode_Mailbox = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUPresentMode.WGPUPresentMode_Mailbox = 4
     * }
     */
    public static int WGPUPresentMode_Mailbox() {
        return WGPUPresentMode_Mailbox;
    }

    private static final int WGPUPresentMode_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPresentMode.WGPUPresentMode_Force32 = 2147483647
     * }
     */
    public static int WGPUPresentMode_Force32() {
        return WGPUPresentMode_Force32;
    }

    private static final int WGPUPrimitiveTopology_Undefined = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_Undefined = 0
     * }
     */
    public static int WGPUPrimitiveTopology_Undefined() {
        return WGPUPrimitiveTopology_Undefined;
    }

    private static final int WGPUPrimitiveTopology_PointList = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_PointList = 1
     * }
     */
    public static int WGPUPrimitiveTopology_PointList() {
        return WGPUPrimitiveTopology_PointList;
    }

    private static final int WGPUPrimitiveTopology_LineList = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_LineList = 2
     * }
     */
    public static int WGPUPrimitiveTopology_LineList() {
        return WGPUPrimitiveTopology_LineList;
    }

    private static final int WGPUPrimitiveTopology_LineStrip = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_LineStrip = 3
     * }
     */
    public static int WGPUPrimitiveTopology_LineStrip() {
        return WGPUPrimitiveTopology_LineStrip;
    }

    private static final int WGPUPrimitiveTopology_TriangleList = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_TriangleList = 4
     * }
     */
    public static int WGPUPrimitiveTopology_TriangleList() {
        return WGPUPrimitiveTopology_TriangleList;
    }

    private static final int WGPUPrimitiveTopology_TriangleStrip = (int) 5L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_TriangleStrip = 5
     * }
     */
    public static int WGPUPrimitiveTopology_TriangleStrip() {
        return WGPUPrimitiveTopology_TriangleStrip;
    }

    private static final int WGPUPrimitiveTopology_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUPrimitiveTopology.WGPUPrimitiveTopology_Force32 = 2147483647
     * }
     */
    public static int WGPUPrimitiveTopology_Force32() {
        return WGPUPrimitiveTopology_Force32;
    }

    private static final int WGPUQueryType_Occlusion = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUQueryType.WGPUQueryType_Occlusion = 1
     * }
     */
    public static int WGPUQueryType_Occlusion() {
        return WGPUQueryType_Occlusion;
    }

    private static final int WGPUQueryType_Timestamp = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUQueryType.WGPUQueryType_Timestamp = 2
     * }
     */
    public static int WGPUQueryType_Timestamp() {
        return WGPUQueryType_Timestamp;
    }

    private static final int WGPUQueryType_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c : * enum WGPUQueryType.WGPUQueryType_Force32 = 2147483647
     * }
     */
    public static int WGPUQueryType_Force32() {
        return WGPUQueryType_Force32;
    }

    private static final int WGPUQueueWorkDoneStatus_Success = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUQueueWorkDoneStatus.WGPUQueueWorkDoneStatus_Success = 1
     * }
     */
    public static int WGPUQueueWorkDoneStatus_Success() {
        return WGPUQueueWorkDoneStatus_Success;
    }

    private static final int WGPUQueueWorkDoneStatus_CallbackCancelled = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUQueueWorkDoneStatus.WGPUQueueWorkDoneStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPUQueueWorkDoneStatus_CallbackCancelled() {
        return WGPUQueueWorkDoneStatus_CallbackCancelled;
    }

    private static final int WGPUQueueWorkDoneStatus_Error = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUQueueWorkDoneStatus.WGPUQueueWorkDoneStatus_Error = 3
     * }
     */
    public static int WGPUQueueWorkDoneStatus_Error() {
        return WGPUQueueWorkDoneStatus_Error;
    }

    private static final int WGPUQueueWorkDoneStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUQueueWorkDoneStatus.WGPUQueueWorkDoneStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUQueueWorkDoneStatus_Force32() {
        return WGPUQueueWorkDoneStatus_Force32;
    }

    private static final int WGPURequestAdapterStatus_Success = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_Success = 1
     * }
     */
    public static int WGPURequestAdapterStatus_Success() {
        return WGPURequestAdapterStatus_Success;
    }

    private static final int WGPURequestAdapterStatus_CallbackCancelled = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPURequestAdapterStatus_CallbackCancelled() {
        return WGPURequestAdapterStatus_CallbackCancelled;
    }

    private static final int WGPURequestAdapterStatus_Unavailable = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_Unavailable = 3
     * }
     */
    public static int WGPURequestAdapterStatus_Unavailable() {
        return WGPURequestAdapterStatus_Unavailable;
    }

    private static final int WGPURequestAdapterStatus_Error = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_Error = 4
     * }
     */
    public static int WGPURequestAdapterStatus_Error() {
        return WGPURequestAdapterStatus_Error;
    }

    private static final int WGPURequestAdapterStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPURequestAdapterStatus.WGPURequestAdapterStatus_Force32 = 2147483647
     * }
     */
    public static int WGPURequestAdapterStatus_Force32() {
        return WGPURequestAdapterStatus_Force32;
    }

    private static final int WGPURequestDeviceStatus_Success = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPURequestDeviceStatus.WGPURequestDeviceStatus_Success = 1
     * }
     */
    public static int WGPURequestDeviceStatus_Success() {
        return WGPURequestDeviceStatus_Success;
    }

    private static final int WGPURequestDeviceStatus_CallbackCancelled = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPURequestDeviceStatus.WGPURequestDeviceStatus_CallbackCancelled = 2
     * }
     */
    public static int WGPURequestDeviceStatus_CallbackCancelled() {
        return WGPURequestDeviceStatus_CallbackCancelled;
    }

    private static final int WGPURequestDeviceStatus_Error = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPURequestDeviceStatus.WGPURequestDeviceStatus_Error = 3
     * }
     */
    public static int WGPURequestDeviceStatus_Error() {
        return WGPURequestDeviceStatus_Error;
    }

    private static final int WGPURequestDeviceStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPURequestDeviceStatus.WGPURequestDeviceStatus_Force32 = 2147483647
     * }
     */
    public static int WGPURequestDeviceStatus_Force32() {
        return WGPURequestDeviceStatus_Force32;
    }

    private static final int WGPUSamplerBindingType_BindingNotUsed = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSamplerBindingType.WGPUSamplerBindingType_BindingNotUsed = 0
     * }
     */
    public static int WGPUSamplerBindingType_BindingNotUsed() {
        return WGPUSamplerBindingType_BindingNotUsed;
    }

    private static final int WGPUSamplerBindingType_Undefined = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSamplerBindingType.WGPUSamplerBindingType_Undefined = 1
     * }
     */
    public static int WGPUSamplerBindingType_Undefined() {
        return WGPUSamplerBindingType_Undefined;
    }

    private static final int WGPUSamplerBindingType_Filtering = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSamplerBindingType.WGPUSamplerBindingType_Filtering = 2
     * }
     */
    public static int WGPUSamplerBindingType_Filtering() {
        return WGPUSamplerBindingType_Filtering;
    }

    private static final int WGPUSamplerBindingType_NonFiltering = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSamplerBindingType.WGPUSamplerBindingType_NonFiltering = 3
     * }
     */
    public static int WGPUSamplerBindingType_NonFiltering() {
        return WGPUSamplerBindingType_NonFiltering;
    }

    private static final int WGPUSamplerBindingType_Comparison = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSamplerBindingType.WGPUSamplerBindingType_Comparison = 4
     * }
     */
    public static int WGPUSamplerBindingType_Comparison() {
        return WGPUSamplerBindingType_Comparison;
    }

    private static final int WGPUSamplerBindingType_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSamplerBindingType.WGPUSamplerBindingType_Force32 = 2147483647
     * }
     */
    public static int WGPUSamplerBindingType_Force32() {
        return WGPUSamplerBindingType_Force32;
    }

    private static final int WGPUStatus_Success = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUStatus.WGPUStatus_Success = 1
     * }
     */
    public static int WGPUStatus_Success() {
        return WGPUStatus_Success;
    }

    private static final int WGPUStatus_Error = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUStatus.WGPUStatus_Error = 2
     * }
     */
    public static int WGPUStatus_Error() {
        return WGPUStatus_Error;
    }

    private static final int WGPUStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c : * enum WGPUStatus.WGPUStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUStatus_Force32() {
        return WGPUStatus_Force32;
    }

    private static final int WGPUStencilOperation_Undefined = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_Undefined = 0
     * }
     */
    public static int WGPUStencilOperation_Undefined() {
        return WGPUStencilOperation_Undefined;
    }

    private static final int WGPUStencilOperation_Keep = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_Keep = 1
     * }
     */
    public static int WGPUStencilOperation_Keep() {
        return WGPUStencilOperation_Keep;
    }

    private static final int WGPUStencilOperation_Zero = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_Zero = 2
     * }
     */
    public static int WGPUStencilOperation_Zero() {
        return WGPUStencilOperation_Zero;
    }

    private static final int WGPUStencilOperation_Replace = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_Replace = 3
     * }
     */
    public static int WGPUStencilOperation_Replace() {
        return WGPUStencilOperation_Replace;
    }

    private static final int WGPUStencilOperation_Invert = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_Invert = 4
     * }
     */
    public static int WGPUStencilOperation_Invert() {
        return WGPUStencilOperation_Invert;
    }

    private static final int WGPUStencilOperation_IncrementClamp = (int) 5L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_IncrementClamp = 5
     * }
     */
    public static int WGPUStencilOperation_IncrementClamp() {
        return WGPUStencilOperation_IncrementClamp;
    }

    private static final int WGPUStencilOperation_DecrementClamp = (int) 6L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_DecrementClamp = 6
     * }
     */
    public static int WGPUStencilOperation_DecrementClamp() {
        return WGPUStencilOperation_DecrementClamp;
    }

    private static final int WGPUStencilOperation_IncrementWrap = (int) 7L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_IncrementWrap = 7
     * }
     */
    public static int WGPUStencilOperation_IncrementWrap() {
        return WGPUStencilOperation_IncrementWrap;
    }

    private static final int WGPUStencilOperation_DecrementWrap = (int) 8L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_DecrementWrap = 8
     * }
     */
    public static int WGPUStencilOperation_DecrementWrap() {
        return WGPUStencilOperation_DecrementWrap;
    }

    private static final int WGPUStencilOperation_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStencilOperation.WGPUStencilOperation_Force32 = 2147483647
     * }
     */
    public static int WGPUStencilOperation_Force32() {
        return WGPUStencilOperation_Force32;
    }

    private static final int WGPUStorageTextureAccess_BindingNotUsed = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_BindingNotUsed = 0
     * }
     */
    public static int WGPUStorageTextureAccess_BindingNotUsed() {
        return WGPUStorageTextureAccess_BindingNotUsed;
    }

    private static final int WGPUStorageTextureAccess_Undefined = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_Undefined = 1
     * }
     */
    public static int WGPUStorageTextureAccess_Undefined() {
        return WGPUStorageTextureAccess_Undefined;
    }

    private static final int WGPUStorageTextureAccess_WriteOnly = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_WriteOnly = 2
     * }
     */
    public static int WGPUStorageTextureAccess_WriteOnly() {
        return WGPUStorageTextureAccess_WriteOnly;
    }

    private static final int WGPUStorageTextureAccess_ReadOnly = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_ReadOnly = 3
     * }
     */
    public static int WGPUStorageTextureAccess_ReadOnly() {
        return WGPUStorageTextureAccess_ReadOnly;
    }

    private static final int WGPUStorageTextureAccess_ReadWrite = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_ReadWrite = 4
     * }
     */
    public static int WGPUStorageTextureAccess_ReadWrite() {
        return WGPUStorageTextureAccess_ReadWrite;
    }

    private static final int WGPUStorageTextureAccess_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUStorageTextureAccess.WGPUStorageTextureAccess_Force32 = 2147483647
     * }
     */
    public static int WGPUStorageTextureAccess_Force32() {
        return WGPUStorageTextureAccess_Force32;
    }

    private static final int WGPUStoreOp_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUStoreOp.WGPUStoreOp_Undefined = 0
     * }
     */
    public static int WGPUStoreOp_Undefined() {
        return WGPUStoreOp_Undefined;
    }

    private static final int WGPUStoreOp_Store = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUStoreOp.WGPUStoreOp_Store = 1
     * }
     */
    public static int WGPUStoreOp_Store() {
        return WGPUStoreOp_Store;
    }

    private static final int WGPUStoreOp_Discard = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUStoreOp.WGPUStoreOp_Discard = 2
     * }
     */
    public static int WGPUStoreOp_Discard() {
        return WGPUStoreOp_Discard;
    }

    private static final int WGPUStoreOp_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c : * enum WGPUStoreOp.WGPUStoreOp_Force32 = 2147483647
     * }
     */
    public static int WGPUStoreOp_Force32() {
        return WGPUStoreOp_Force32;
    }

    private static final int WGPUSType_ShaderSourceSPIRV = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUSType.WGPUSType_ShaderSourceSPIRV = 1
     * }
     */
    public static int WGPUSType_ShaderSourceSPIRV() {
        return WGPUSType_ShaderSourceSPIRV;
    }

    private static final int WGPUSType_ShaderSourceWGSL = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUSType.WGPUSType_ShaderSourceWGSL = 2
     * }
     */
    public static int WGPUSType_ShaderSourceWGSL() {
        return WGPUSType_ShaderSourceWGSL;
    }

    private static final int WGPUSType_RenderPassMaxDrawCount = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUSType.WGPUSType_RenderPassMaxDrawCount = 3
     * }
     */
    public static int WGPUSType_RenderPassMaxDrawCount() {
        return WGPUSType_RenderPassMaxDrawCount;
    }

    private static final int WGPUSType_SurfaceSourceMetalLayer = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUSType.WGPUSType_SurfaceSourceMetalLayer = 4
     * }
     */
    public static int WGPUSType_SurfaceSourceMetalLayer() {
        return WGPUSType_SurfaceSourceMetalLayer;
    }

    private static final int WGPUSType_SurfaceSourceWindowsHWND = (int) 5L;

    /**
     * {@snippet lang = c : * enum WGPUSType.WGPUSType_SurfaceSourceWindowsHWND = 5
     * }
     */
    public static int WGPUSType_SurfaceSourceWindowsHWND() {
        return WGPUSType_SurfaceSourceWindowsHWND;
    }

    private static final int WGPUSType_SurfaceSourceXlibWindow = (int) 6L;

    /**
     * {@snippet lang = c : * enum WGPUSType.WGPUSType_SurfaceSourceXlibWindow = 6
     * }
     */
    public static int WGPUSType_SurfaceSourceXlibWindow() {
        return WGPUSType_SurfaceSourceXlibWindow;
    }

    private static final int WGPUSType_SurfaceSourceWaylandSurface = (int) 7L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSType.WGPUSType_SurfaceSourceWaylandSurface = 7
     * }
     */
    public static int WGPUSType_SurfaceSourceWaylandSurface() {
        return WGPUSType_SurfaceSourceWaylandSurface;
    }

    private static final int WGPUSType_SurfaceSourceAndroidNativeWindow = (int) 8L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSType.WGPUSType_SurfaceSourceAndroidNativeWindow = 8
     * }
     */
    public static int WGPUSType_SurfaceSourceAndroidNativeWindow() {
        return WGPUSType_SurfaceSourceAndroidNativeWindow;
    }

    private static final int WGPUSType_SurfaceSourceXCBWindow = (int) 9L;

    /**
     * {@snippet lang = c : * enum WGPUSType.WGPUSType_SurfaceSourceXCBWindow = 9
     * }
     */
    public static int WGPUSType_SurfaceSourceXCBWindow() {
        return WGPUSType_SurfaceSourceXCBWindow;
    }

    private static final int WGPUSType_SurfaceColorManagement = (int) 10L;

    /**
     * {@snippet lang = c : * enum WGPUSType.WGPUSType_SurfaceColorManagement = 10
     * }
     */
    public static int WGPUSType_SurfaceColorManagement() {
        return WGPUSType_SurfaceColorManagement;
    }

    private static final int WGPUSType_RequestAdapterWebXROptions = (int) 11L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSType.WGPUSType_RequestAdapterWebXROptions = 11
     * }
     */
    public static int WGPUSType_RequestAdapterWebXROptions() {
        return WGPUSType_RequestAdapterWebXROptions;
    }

    private static final int WGPUSType_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c : * enum WGPUSType.WGPUSType_Force32 = 2147483647
     * }
     */
    public static int WGPUSType_Force32() {
        return WGPUSType_Force32;
    }

    private static final int WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal = 1
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal() {
        return WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal;
    }

    private static final int WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal = 2
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal() {
        return WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal;
    }

    private static final int WGPUSurfaceGetCurrentTextureStatus_Timeout = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Timeout = 3
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Timeout() {
        return WGPUSurfaceGetCurrentTextureStatus_Timeout;
    }

    private static final int WGPUSurfaceGetCurrentTextureStatus_Outdated = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Outdated = 4
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Outdated() {
        return WGPUSurfaceGetCurrentTextureStatus_Outdated;
    }

    private static final int WGPUSurfaceGetCurrentTextureStatus_Lost = (int) 5L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Lost = 5
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Lost() {
        return WGPUSurfaceGetCurrentTextureStatus_Lost;
    }

    private static final int WGPUSurfaceGetCurrentTextureStatus_Error = (int) 6L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Error = 6
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Error() {
        return WGPUSurfaceGetCurrentTextureStatus_Error;
    }

    private static final int WGPUSurfaceGetCurrentTextureStatus_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUSurfaceGetCurrentTextureStatus.WGPUSurfaceGetCurrentTextureStatus_Force32 = 2147483647
     * }
     */
    public static int WGPUSurfaceGetCurrentTextureStatus_Force32() {
        return WGPUSurfaceGetCurrentTextureStatus_Force32;
    }

    private static final int WGPUTextureAspect_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUTextureAspect.WGPUTextureAspect_Undefined = 0
     * }
     */
    public static int WGPUTextureAspect_Undefined() {
        return WGPUTextureAspect_Undefined;
    }

    private static final int WGPUTextureAspect_All = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUTextureAspect.WGPUTextureAspect_All = 1
     * }
     */
    public static int WGPUTextureAspect_All() {
        return WGPUTextureAspect_All;
    }

    private static final int WGPUTextureAspect_StencilOnly = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureAspect.WGPUTextureAspect_StencilOnly = 2
     * }
     */
    public static int WGPUTextureAspect_StencilOnly() {
        return WGPUTextureAspect_StencilOnly;
    }

    private static final int WGPUTextureAspect_DepthOnly = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUTextureAspect.WGPUTextureAspect_DepthOnly = 3
     * }
     */
    public static int WGPUTextureAspect_DepthOnly() {
        return WGPUTextureAspect_DepthOnly;
    }

    private static final int WGPUTextureAspect_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureAspect.WGPUTextureAspect_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureAspect_Force32() {
        return WGPUTextureAspect_Force32;
    }

    private static final int WGPUTextureDimension_Undefined = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureDimension.WGPUTextureDimension_Undefined = 0
     * }
     */
    public static int WGPUTextureDimension_Undefined() {
        return WGPUTextureDimension_Undefined;
    }

    private static final int WGPUTextureDimension_1D = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUTextureDimension.WGPUTextureDimension_1D = 1
     * }
     */
    public static int WGPUTextureDimension_1D() {
        return WGPUTextureDimension_1D;
    }

    private static final int WGPUTextureDimension_2D = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUTextureDimension.WGPUTextureDimension_2D = 2
     * }
     */
    public static int WGPUTextureDimension_2D() {
        return WGPUTextureDimension_2D;
    }

    private static final int WGPUTextureDimension_3D = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUTextureDimension.WGPUTextureDimension_3D = 3
     * }
     */
    public static int WGPUTextureDimension_3D() {
        return WGPUTextureDimension_3D;
    }

    private static final int WGPUTextureDimension_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureDimension.WGPUTextureDimension_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureDimension_Force32() {
        return WGPUTextureDimension_Force32;
    }

    private static final int WGPUTextureFormat_Undefined = (int) 0L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_Undefined = 0
     * }
     */
    public static int WGPUTextureFormat_Undefined() {
        return WGPUTextureFormat_Undefined;
    }

    private static final int WGPUTextureFormat_R8Unorm = (int) 1L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R8Unorm = 1
     * }
     */
    public static int WGPUTextureFormat_R8Unorm() {
        return WGPUTextureFormat_R8Unorm;
    }

    private static final int WGPUTextureFormat_R8Snorm = (int) 2L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R8Snorm = 2
     * }
     */
    public static int WGPUTextureFormat_R8Snorm() {
        return WGPUTextureFormat_R8Snorm;
    }

    private static final int WGPUTextureFormat_R8Uint = (int) 3L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R8Uint = 3
     * }
     */
    public static int WGPUTextureFormat_R8Uint() {
        return WGPUTextureFormat_R8Uint;
    }

    private static final int WGPUTextureFormat_R8Sint = (int) 4L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R8Sint = 4
     * }
     */
    public static int WGPUTextureFormat_R8Sint() {
        return WGPUTextureFormat_R8Sint;
    }

    private static final int WGPUTextureFormat_R16Uint = (int) 5L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R16Uint = 5
     * }
     */
    public static int WGPUTextureFormat_R16Uint() {
        return WGPUTextureFormat_R16Uint;
    }

    private static final int WGPUTextureFormat_R16Sint = (int) 6L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R16Sint = 6
     * }
     */
    public static int WGPUTextureFormat_R16Sint() {
        return WGPUTextureFormat_R16Sint;
    }

    private static final int WGPUTextureFormat_R16Float = (int) 7L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R16Float = 7
     * }
     */
    public static int WGPUTextureFormat_R16Float() {
        return WGPUTextureFormat_R16Float;
    }

    private static final int WGPUTextureFormat_RG8Unorm = (int) 8L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_RG8Unorm = 8
     * }
     */
    public static int WGPUTextureFormat_RG8Unorm() {
        return WGPUTextureFormat_RG8Unorm;
    }

    private static final int WGPUTextureFormat_RG8Snorm = (int) 9L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_RG8Snorm = 9
     * }
     */
    public static int WGPUTextureFormat_RG8Snorm() {
        return WGPUTextureFormat_RG8Snorm;
    }

    private static final int WGPUTextureFormat_RG8Uint = (int) 10L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_RG8Uint = 10
     * }
     */
    public static int WGPUTextureFormat_RG8Uint() {
        return WGPUTextureFormat_RG8Uint;
    }

    private static final int WGPUTextureFormat_RG8Sint = (int) 11L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_RG8Sint = 11
     * }
     */
    public static int WGPUTextureFormat_RG8Sint() {
        return WGPUTextureFormat_RG8Sint;
    }

    private static final int WGPUTextureFormat_R32Float = (int) 12L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R32Float = 12
     * }
     */
    public static int WGPUTextureFormat_R32Float() {
        return WGPUTextureFormat_R32Float;
    }

    private static final int WGPUTextureFormat_R32Uint = (int) 13L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R32Uint = 13
     * }
     */
    public static int WGPUTextureFormat_R32Uint() {
        return WGPUTextureFormat_R32Uint;
    }

    private static final int WGPUTextureFormat_R32Sint = (int) 14L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_R32Sint = 14
     * }
     */
    public static int WGPUTextureFormat_R32Sint() {
        return WGPUTextureFormat_R32Sint;
    }

    private static final int WGPUTextureFormat_RG16Uint = (int) 15L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_RG16Uint = 15
     * }
     */
    public static int WGPUTextureFormat_RG16Uint() {
        return WGPUTextureFormat_RG16Uint;
    }

    private static final int WGPUTextureFormat_RG16Sint = (int) 16L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_RG16Sint = 16
     * }
     */
    public static int WGPUTextureFormat_RG16Sint() {
        return WGPUTextureFormat_RG16Sint;
    }

    private static final int WGPUTextureFormat_RG16Float = (int) 17L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RG16Float = 17
     * }
     */
    public static int WGPUTextureFormat_RG16Float() {
        return WGPUTextureFormat_RG16Float;
    }

    private static final int WGPUTextureFormat_RGBA8Unorm = (int) 18L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8Unorm = 18
     * }
     */
    public static int WGPUTextureFormat_RGBA8Unorm() {
        return WGPUTextureFormat_RGBA8Unorm;
    }

    private static final int WGPUTextureFormat_RGBA8UnormSrgb = (int) 19L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8UnormSrgb = 19
     * }
     */
    public static int WGPUTextureFormat_RGBA8UnormSrgb() {
        return WGPUTextureFormat_RGBA8UnormSrgb;
    }

    private static final int WGPUTextureFormat_RGBA8Snorm = (int) 20L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8Snorm = 20
     * }
     */
    public static int WGPUTextureFormat_RGBA8Snorm() {
        return WGPUTextureFormat_RGBA8Snorm;
    }

    private static final int WGPUTextureFormat_RGBA8Uint = (int) 21L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8Uint = 21
     * }
     */
    public static int WGPUTextureFormat_RGBA8Uint() {
        return WGPUTextureFormat_RGBA8Uint;
    }

    private static final int WGPUTextureFormat_RGBA8Sint = (int) 22L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA8Sint = 22
     * }
     */
    public static int WGPUTextureFormat_RGBA8Sint() {
        return WGPUTextureFormat_RGBA8Sint;
    }

    private static final int WGPUTextureFormat_BGRA8Unorm = (int) 23L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BGRA8Unorm = 23
     * }
     */
    public static int WGPUTextureFormat_BGRA8Unorm() {
        return WGPUTextureFormat_BGRA8Unorm;
    }

    private static final int WGPUTextureFormat_BGRA8UnormSrgb = (int) 24L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BGRA8UnormSrgb = 24
     * }
     */
    public static int WGPUTextureFormat_BGRA8UnormSrgb() {
        return WGPUTextureFormat_BGRA8UnormSrgb;
    }

    private static final int WGPUTextureFormat_RGB10A2Uint = (int) 25L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGB10A2Uint = 25
     * }
     */
    public static int WGPUTextureFormat_RGB10A2Uint() {
        return WGPUTextureFormat_RGB10A2Uint;
    }

    private static final int WGPUTextureFormat_RGB10A2Unorm = (int) 26L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGB10A2Unorm = 26
     * }
     */
    public static int WGPUTextureFormat_RGB10A2Unorm() {
        return WGPUTextureFormat_RGB10A2Unorm;
    }

    private static final int WGPUTextureFormat_RG11B10Ufloat = (int) 27L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RG11B10Ufloat = 27
     * }
     */
    public static int WGPUTextureFormat_RG11B10Ufloat() {
        return WGPUTextureFormat_RG11B10Ufloat;
    }

    private static final int WGPUTextureFormat_RGB9E5Ufloat = (int) 28L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGB9E5Ufloat = 28
     * }
     */
    public static int WGPUTextureFormat_RGB9E5Ufloat() {
        return WGPUTextureFormat_RGB9E5Ufloat;
    }

    private static final int WGPUTextureFormat_RG32Float = (int) 29L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RG32Float = 29
     * }
     */
    public static int WGPUTextureFormat_RG32Float() {
        return WGPUTextureFormat_RG32Float;
    }

    private static final int WGPUTextureFormat_RG32Uint = (int) 30L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_RG32Uint = 30
     * }
     */
    public static int WGPUTextureFormat_RG32Uint() {
        return WGPUTextureFormat_RG32Uint;
    }

    private static final int WGPUTextureFormat_RG32Sint = (int) 31L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_RG32Sint = 31
     * }
     */
    public static int WGPUTextureFormat_RG32Sint() {
        return WGPUTextureFormat_RG32Sint;
    }

    private static final int WGPUTextureFormat_RGBA16Uint = (int) 32L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA16Uint = 32
     * }
     */
    public static int WGPUTextureFormat_RGBA16Uint() {
        return WGPUTextureFormat_RGBA16Uint;
    }

    private static final int WGPUTextureFormat_RGBA16Sint = (int) 33L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA16Sint = 33
     * }
     */
    public static int WGPUTextureFormat_RGBA16Sint() {
        return WGPUTextureFormat_RGBA16Sint;
    }

    private static final int WGPUTextureFormat_RGBA16Float = (int) 34L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA16Float = 34
     * }
     */
    public static int WGPUTextureFormat_RGBA16Float() {
        return WGPUTextureFormat_RGBA16Float;
    }

    private static final int WGPUTextureFormat_RGBA32Float = (int) 35L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA32Float = 35
     * }
     */
    public static int WGPUTextureFormat_RGBA32Float() {
        return WGPUTextureFormat_RGBA32Float;
    }

    private static final int WGPUTextureFormat_RGBA32Uint = (int) 36L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA32Uint = 36
     * }
     */
    public static int WGPUTextureFormat_RGBA32Uint() {
        return WGPUTextureFormat_RGBA32Uint;
    }

    private static final int WGPUTextureFormat_RGBA32Sint = (int) 37L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_RGBA32Sint = 37
     * }
     */
    public static int WGPUTextureFormat_RGBA32Sint() {
        return WGPUTextureFormat_RGBA32Sint;
    }

    private static final int WGPUTextureFormat_Stencil8 = (int) 38L;

    /**
     * {@snippet lang = c : * enum WGPUTextureFormat.WGPUTextureFormat_Stencil8 = 38
     * }
     */
    public static int WGPUTextureFormat_Stencil8() {
        return WGPUTextureFormat_Stencil8;
    }

    private static final int WGPUTextureFormat_Depth16Unorm = (int) 39L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_Depth16Unorm = 39
     * }
     */
    public static int WGPUTextureFormat_Depth16Unorm() {
        return WGPUTextureFormat_Depth16Unorm;
    }

    private static final int WGPUTextureFormat_Depth24Plus = (int) 40L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_Depth24Plus = 40
     * }
     */
    public static int WGPUTextureFormat_Depth24Plus() {
        return WGPUTextureFormat_Depth24Plus;
    }

    private static final int WGPUTextureFormat_Depth24PlusStencil8 = (int) 41L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_Depth24PlusStencil8 = 41
     * }
     */
    public static int WGPUTextureFormat_Depth24PlusStencil8() {
        return WGPUTextureFormat_Depth24PlusStencil8;
    }

    private static final int WGPUTextureFormat_Depth32Float = (int) 42L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_Depth32Float = 42
     * }
     */
    public static int WGPUTextureFormat_Depth32Float() {
        return WGPUTextureFormat_Depth32Float;
    }

    private static final int WGPUTextureFormat_Depth32FloatStencil8 = (int) 43L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_Depth32FloatStencil8 = 43
     * }
     */
    public static int WGPUTextureFormat_Depth32FloatStencil8() {
        return WGPUTextureFormat_Depth32FloatStencil8;
    }

    private static final int WGPUTextureFormat_BC1RGBAUnorm = (int) 44L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC1RGBAUnorm = 44
     * }
     */
    public static int WGPUTextureFormat_BC1RGBAUnorm() {
        return WGPUTextureFormat_BC1RGBAUnorm;
    }

    private static final int WGPUTextureFormat_BC1RGBAUnormSrgb = (int) 45L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC1RGBAUnormSrgb = 45
     * }
     */
    public static int WGPUTextureFormat_BC1RGBAUnormSrgb() {
        return WGPUTextureFormat_BC1RGBAUnormSrgb;
    }

    private static final int WGPUTextureFormat_BC2RGBAUnorm = (int) 46L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC2RGBAUnorm = 46
     * }
     */
    public static int WGPUTextureFormat_BC2RGBAUnorm() {
        return WGPUTextureFormat_BC2RGBAUnorm;
    }

    private static final int WGPUTextureFormat_BC2RGBAUnormSrgb = (int) 47L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC2RGBAUnormSrgb = 47
     * }
     */
    public static int WGPUTextureFormat_BC2RGBAUnormSrgb() {
        return WGPUTextureFormat_BC2RGBAUnormSrgb;
    }

    private static final int WGPUTextureFormat_BC3RGBAUnorm = (int) 48L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC3RGBAUnorm = 48
     * }
     */
    public static int WGPUTextureFormat_BC3RGBAUnorm() {
        return WGPUTextureFormat_BC3RGBAUnorm;
    }

    private static final int WGPUTextureFormat_BC3RGBAUnormSrgb = (int) 49L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC3RGBAUnormSrgb = 49
     * }
     */
    public static int WGPUTextureFormat_BC3RGBAUnormSrgb() {
        return WGPUTextureFormat_BC3RGBAUnormSrgb;
    }

    private static final int WGPUTextureFormat_BC4RUnorm = (int) 50L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC4RUnorm = 50
     * }
     */
    public static int WGPUTextureFormat_BC4RUnorm() {
        return WGPUTextureFormat_BC4RUnorm;
    }

    private static final int WGPUTextureFormat_BC4RSnorm = (int) 51L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC4RSnorm = 51
     * }
     */
    public static int WGPUTextureFormat_BC4RSnorm() {
        return WGPUTextureFormat_BC4RSnorm;
    }

    private static final int WGPUTextureFormat_BC5RGUnorm = (int) 52L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC5RGUnorm = 52
     * }
     */
    public static int WGPUTextureFormat_BC5RGUnorm() {
        return WGPUTextureFormat_BC5RGUnorm;
    }

    private static final int WGPUTextureFormat_BC5RGSnorm = (int) 53L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC5RGSnorm = 53
     * }
     */
    public static int WGPUTextureFormat_BC5RGSnorm() {
        return WGPUTextureFormat_BC5RGSnorm;
    }

    private static final int WGPUTextureFormat_BC6HRGBUfloat = (int) 54L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC6HRGBUfloat = 54
     * }
     */
    public static int WGPUTextureFormat_BC6HRGBUfloat() {
        return WGPUTextureFormat_BC6HRGBUfloat;
    }

    private static final int WGPUTextureFormat_BC6HRGBFloat = (int) 55L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC6HRGBFloat = 55
     * }
     */
    public static int WGPUTextureFormat_BC6HRGBFloat() {
        return WGPUTextureFormat_BC6HRGBFloat;
    }

    private static final int WGPUTextureFormat_BC7RGBAUnorm = (int) 56L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC7RGBAUnorm = 56
     * }
     */
    public static int WGPUTextureFormat_BC7RGBAUnorm() {
        return WGPUTextureFormat_BC7RGBAUnorm;
    }

    private static final int WGPUTextureFormat_BC7RGBAUnormSrgb = (int) 57L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_BC7RGBAUnormSrgb = 57
     * }
     */
    public static int WGPUTextureFormat_BC7RGBAUnormSrgb() {
        return WGPUTextureFormat_BC7RGBAUnormSrgb;
    }

    private static final int WGPUTextureFormat_ETC2RGB8Unorm = (int) 58L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGB8Unorm = 58
     * }
     */
    public static int WGPUTextureFormat_ETC2RGB8Unorm() {
        return WGPUTextureFormat_ETC2RGB8Unorm;
    }

    private static final int WGPUTextureFormat_ETC2RGB8UnormSrgb = (int) 59L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGB8UnormSrgb = 59
     * }
     */
    public static int WGPUTextureFormat_ETC2RGB8UnormSrgb() {
        return WGPUTextureFormat_ETC2RGB8UnormSrgb;
    }

    private static final int WGPUTextureFormat_ETC2RGB8A1Unorm = (int) 60L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGB8A1Unorm = 60
     * }
     */
    public static int WGPUTextureFormat_ETC2RGB8A1Unorm() {
        return WGPUTextureFormat_ETC2RGB8A1Unorm;
    }

    private static final int WGPUTextureFormat_ETC2RGB8A1UnormSrgb = (int) 61L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGB8A1UnormSrgb = 61
     * }
     */
    public static int WGPUTextureFormat_ETC2RGB8A1UnormSrgb() {
        return WGPUTextureFormat_ETC2RGB8A1UnormSrgb;
    }

    private static final int WGPUTextureFormat_ETC2RGBA8Unorm = (int) 62L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGBA8Unorm = 62
     * }
     */
    public static int WGPUTextureFormat_ETC2RGBA8Unorm() {
        return WGPUTextureFormat_ETC2RGBA8Unorm;
    }

    private static final int WGPUTextureFormat_ETC2RGBA8UnormSrgb = (int) 63L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ETC2RGBA8UnormSrgb = 63
     * }
     */
    public static int WGPUTextureFormat_ETC2RGBA8UnormSrgb() {
        return WGPUTextureFormat_ETC2RGBA8UnormSrgb;
    }

    private static final int WGPUTextureFormat_EACR11Unorm = (int) 64L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_EACR11Unorm = 64
     * }
     */
    public static int WGPUTextureFormat_EACR11Unorm() {
        return WGPUTextureFormat_EACR11Unorm;
    }

    private static final int WGPUTextureFormat_EACR11Snorm = (int) 65L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_EACR11Snorm = 65
     * }
     */
    public static int WGPUTextureFormat_EACR11Snorm() {
        return WGPUTextureFormat_EACR11Snorm;
    }

    private static final int WGPUTextureFormat_EACRG11Unorm = (int) 66L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_EACRG11Unorm = 66
     * }
     */
    public static int WGPUTextureFormat_EACRG11Unorm() {
        return WGPUTextureFormat_EACRG11Unorm;
    }

    private static final int WGPUTextureFormat_EACRG11Snorm = (int) 67L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_EACRG11Snorm = 67
     * }
     */
    public static int WGPUTextureFormat_EACRG11Snorm() {
        return WGPUTextureFormat_EACRG11Snorm;
    }

    private static final int WGPUTextureFormat_ASTC4x4Unorm = (int) 68L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC4x4Unorm = 68
     * }
     */
    public static int WGPUTextureFormat_ASTC4x4Unorm() {
        return WGPUTextureFormat_ASTC4x4Unorm;
    }

    private static final int WGPUTextureFormat_ASTC4x4UnormSrgb = (int) 69L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC4x4UnormSrgb = 69
     * }
     */
    public static int WGPUTextureFormat_ASTC4x4UnormSrgb() {
        return WGPUTextureFormat_ASTC4x4UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC5x4Unorm = (int) 70L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC5x4Unorm = 70
     * }
     */
    public static int WGPUTextureFormat_ASTC5x4Unorm() {
        return WGPUTextureFormat_ASTC5x4Unorm;
    }

    private static final int WGPUTextureFormat_ASTC5x4UnormSrgb = (int) 71L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC5x4UnormSrgb = 71
     * }
     */
    public static int WGPUTextureFormat_ASTC5x4UnormSrgb() {
        return WGPUTextureFormat_ASTC5x4UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC5x5Unorm = (int) 72L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC5x5Unorm = 72
     * }
     */
    public static int WGPUTextureFormat_ASTC5x5Unorm() {
        return WGPUTextureFormat_ASTC5x5Unorm;
    }

    private static final int WGPUTextureFormat_ASTC5x5UnormSrgb = (int) 73L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC5x5UnormSrgb = 73
     * }
     */
    public static int WGPUTextureFormat_ASTC5x5UnormSrgb() {
        return WGPUTextureFormat_ASTC5x5UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC6x5Unorm = (int) 74L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC6x5Unorm = 74
     * }
     */
    public static int WGPUTextureFormat_ASTC6x5Unorm() {
        return WGPUTextureFormat_ASTC6x5Unorm;
    }

    private static final int WGPUTextureFormat_ASTC6x5UnormSrgb = (int) 75L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC6x5UnormSrgb = 75
     * }
     */
    public static int WGPUTextureFormat_ASTC6x5UnormSrgb() {
        return WGPUTextureFormat_ASTC6x5UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC6x6Unorm = (int) 76L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC6x6Unorm = 76
     * }
     */
    public static int WGPUTextureFormat_ASTC6x6Unorm() {
        return WGPUTextureFormat_ASTC6x6Unorm;
    }

    private static final int WGPUTextureFormat_ASTC6x6UnormSrgb = (int) 77L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC6x6UnormSrgb = 77
     * }
     */
    public static int WGPUTextureFormat_ASTC6x6UnormSrgb() {
        return WGPUTextureFormat_ASTC6x6UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC8x5Unorm = (int) 78L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x5Unorm = 78
     * }
     */
    public static int WGPUTextureFormat_ASTC8x5Unorm() {
        return WGPUTextureFormat_ASTC8x5Unorm;
    }

    private static final int WGPUTextureFormat_ASTC8x5UnormSrgb = (int) 79L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x5UnormSrgb = 79
     * }
     */
    public static int WGPUTextureFormat_ASTC8x5UnormSrgb() {
        return WGPUTextureFormat_ASTC8x5UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC8x6Unorm = (int) 80L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x6Unorm = 80
     * }
     */
    public static int WGPUTextureFormat_ASTC8x6Unorm() {
        return WGPUTextureFormat_ASTC8x6Unorm;
    }

    private static final int WGPUTextureFormat_ASTC8x6UnormSrgb = (int) 81L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x6UnormSrgb = 81
     * }
     */
    public static int WGPUTextureFormat_ASTC8x6UnormSrgb() {
        return WGPUTextureFormat_ASTC8x6UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC8x8Unorm = (int) 82L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x8Unorm = 82
     * }
     */
    public static int WGPUTextureFormat_ASTC8x8Unorm() {
        return WGPUTextureFormat_ASTC8x8Unorm;
    }

    private static final int WGPUTextureFormat_ASTC8x8UnormSrgb = (int) 83L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC8x8UnormSrgb = 83
     * }
     */
    public static int WGPUTextureFormat_ASTC8x8UnormSrgb() {
        return WGPUTextureFormat_ASTC8x8UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC10x5Unorm = (int) 84L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x5Unorm = 84
     * }
     */
    public static int WGPUTextureFormat_ASTC10x5Unorm() {
        return WGPUTextureFormat_ASTC10x5Unorm;
    }

    private static final int WGPUTextureFormat_ASTC10x5UnormSrgb = (int) 85L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x5UnormSrgb = 85
     * }
     */
    public static int WGPUTextureFormat_ASTC10x5UnormSrgb() {
        return WGPUTextureFormat_ASTC10x5UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC10x6Unorm = (int) 86L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x6Unorm = 86
     * }
     */
    public static int WGPUTextureFormat_ASTC10x6Unorm() {
        return WGPUTextureFormat_ASTC10x6Unorm;
    }

    private static final int WGPUTextureFormat_ASTC10x6UnormSrgb = (int) 87L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x6UnormSrgb = 87
     * }
     */
    public static int WGPUTextureFormat_ASTC10x6UnormSrgb() {
        return WGPUTextureFormat_ASTC10x6UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC10x8Unorm = (int) 88L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x8Unorm = 88
     * }
     */
    public static int WGPUTextureFormat_ASTC10x8Unorm() {
        return WGPUTextureFormat_ASTC10x8Unorm;
    }

    private static final int WGPUTextureFormat_ASTC10x8UnormSrgb = (int) 89L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x8UnormSrgb = 89
     * }
     */
    public static int WGPUTextureFormat_ASTC10x8UnormSrgb() {
        return WGPUTextureFormat_ASTC10x8UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC10x10Unorm = (int) 90L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x10Unorm = 90
     * }
     */
    public static int WGPUTextureFormat_ASTC10x10Unorm() {
        return WGPUTextureFormat_ASTC10x10Unorm;
    }

    private static final int WGPUTextureFormat_ASTC10x10UnormSrgb = (int) 91L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC10x10UnormSrgb = 91
     * }
     */
    public static int WGPUTextureFormat_ASTC10x10UnormSrgb() {
        return WGPUTextureFormat_ASTC10x10UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC12x10Unorm = (int) 92L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC12x10Unorm = 92
     * }
     */
    public static int WGPUTextureFormat_ASTC12x10Unorm() {
        return WGPUTextureFormat_ASTC12x10Unorm;
    }

    private static final int WGPUTextureFormat_ASTC12x10UnormSrgb = (int) 93L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC12x10UnormSrgb = 93
     * }
     */
    public static int WGPUTextureFormat_ASTC12x10UnormSrgb() {
        return WGPUTextureFormat_ASTC12x10UnormSrgb;
    }

    private static final int WGPUTextureFormat_ASTC12x12Unorm = (int) 94L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC12x12Unorm = 94
     * }
     */
    public static int WGPUTextureFormat_ASTC12x12Unorm() {
        return WGPUTextureFormat_ASTC12x12Unorm;
    }

    private static final int WGPUTextureFormat_ASTC12x12UnormSrgb = (int) 95L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_ASTC12x12UnormSrgb = 95
     * }
     */
    public static int WGPUTextureFormat_ASTC12x12UnormSrgb() {
        return WGPUTextureFormat_ASTC12x12UnormSrgb;
    }

    private static final int WGPUTextureFormat_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureFormat.WGPUTextureFormat_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureFormat_Force32() {
        return WGPUTextureFormat_Force32;
    }

    private static final int WGPUTextureSampleType_BindingNotUsed = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureSampleType.WGPUTextureSampleType_BindingNotUsed = 0
     * }
     */
    public static int WGPUTextureSampleType_BindingNotUsed() {
        return WGPUTextureSampleType_BindingNotUsed;
    }

    private static final int WGPUTextureSampleType_Undefined = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureSampleType.WGPUTextureSampleType_Undefined = 1
     * }
     */
    public static int WGPUTextureSampleType_Undefined() {
        return WGPUTextureSampleType_Undefined;
    }

    private static final int WGPUTextureSampleType_Float = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureSampleType.WGPUTextureSampleType_Float = 2
     * }
     */
    public static int WGPUTextureSampleType_Float() {
        return WGPUTextureSampleType_Float;
    }

    private static final int WGPUTextureSampleType_UnfilterableFloat = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureSampleType.WGPUTextureSampleType_UnfilterableFloat = 3
     * }
     */
    public static int WGPUTextureSampleType_UnfilterableFloat() {
        return WGPUTextureSampleType_UnfilterableFloat;
    }

    private static final int WGPUTextureSampleType_Depth = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureSampleType.WGPUTextureSampleType_Depth = 4
     * }
     */
    public static int WGPUTextureSampleType_Depth() {
        return WGPUTextureSampleType_Depth;
    }

    private static final int WGPUTextureSampleType_Sint = (int) 5L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureSampleType.WGPUTextureSampleType_Sint = 5
     * }
     */
    public static int WGPUTextureSampleType_Sint() {
        return WGPUTextureSampleType_Sint;
    }

    private static final int WGPUTextureSampleType_Uint = (int) 6L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureSampleType.WGPUTextureSampleType_Uint = 6
     * }
     */
    public static int WGPUTextureSampleType_Uint() {
        return WGPUTextureSampleType_Uint;
    }

    private static final int WGPUTextureSampleType_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureSampleType.WGPUTextureSampleType_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureSampleType_Force32() {
        return WGPUTextureSampleType_Force32;
    }

    private static final int WGPUTextureViewDimension_Undefined = (int) 0L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureViewDimension.WGPUTextureViewDimension_Undefined = 0
     * }
     */
    public static int WGPUTextureViewDimension_Undefined() {
        return WGPUTextureViewDimension_Undefined;
    }

    private static final int WGPUTextureViewDimension_1D = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureViewDimension.WGPUTextureViewDimension_1D = 1
     * }
     */
    public static int WGPUTextureViewDimension_1D() {
        return WGPUTextureViewDimension_1D;
    }

    private static final int WGPUTextureViewDimension_2D = (int) 2L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureViewDimension.WGPUTextureViewDimension_2D = 2
     * }
     */
    public static int WGPUTextureViewDimension_2D() {
        return WGPUTextureViewDimension_2D;
    }

    private static final int WGPUTextureViewDimension_2DArray = (int) 3L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureViewDimension.WGPUTextureViewDimension_2DArray = 3
     * }
     */
    public static int WGPUTextureViewDimension_2DArray() {
        return WGPUTextureViewDimension_2DArray;
    }

    private static final int WGPUTextureViewDimension_Cube = (int) 4L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureViewDimension.WGPUTextureViewDimension_Cube = 4
     * }
     */
    public static int WGPUTextureViewDimension_Cube() {
        return WGPUTextureViewDimension_Cube;
    }

    private static final int WGPUTextureViewDimension_CubeArray = (int) 5L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureViewDimension.WGPUTextureViewDimension_CubeArray = 5
     * }
     */
    public static int WGPUTextureViewDimension_CubeArray() {
        return WGPUTextureViewDimension_CubeArray;
    }

    private static final int WGPUTextureViewDimension_3D = (int) 6L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureViewDimension.WGPUTextureViewDimension_3D = 6
     * }
     */
    public static int WGPUTextureViewDimension_3D() {
        return WGPUTextureViewDimension_3D;
    }

    private static final int WGPUTextureViewDimension_Force32 = (int) 2147483647L;

    /**
     * {@snippet lang = c
     * : * enum WGPUTextureViewDimension.WGPUTextureViewDimension_Force32 = 2147483647
     * }
     */
    public static int WGPUTextureViewDimension_Force32() {
        return WGPUTextureViewDimension_Force32;
    }

    private static final int WGPUToneMappingMode_Standard = (int) 1L;

    /**
     * {@snippet lang = c
     * : * enum WGPUToneMappingMode.WGPUToneMappingMode_Standard = 1
     * }
     */
    public static int WGPUToneMappingMode_Standard() {
        return WGPUToneMappingMode_Standard;
    }
}
